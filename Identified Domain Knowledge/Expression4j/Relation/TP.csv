[abs function] IsA--> [function],[asin function] HasProperty---> [name],[asin function] HasProperty---> [parameters],[asin function] IsA--> [function],[atan function] HasProperty---> [name],[atan function] HasProperty---> [parameters],[atan function] IsA--> [function],[binary operator expression element] HasProperty---> [name],[binary operator expression element] IsA--> [element],[boolean mathematical element] HasProperty---> [real value],[boolean mathematical element] HasProperty---> [type],[boolean mathematical element] HasProperty---> [value],[ceil function] HasProperty---> [name],[ceil function] HasProperty---> [parameters],[ceil function] IsA--> [function],[complex or real expression element] HasProperty---> [name],[complex or real expression element] IsA--> [element],[constant or variable expression element] HasProperty---> [name],[constant or variable expression element] IsA--> [element],[constant or variable without check expression element] HasProperty---> [name],[cos function] HasProperty---> [name],[cos function] HasProperty---> [parameters],[cos function] IsA--> [function],[cosh function] HasProperty---> [name],[cosh function] HasProperty---> [parameters],[cosh function] IsA--> [function],[element type] IsA--> [type],[expression element name] IsA--> [name],[expression element] IsA--> [element],[expression expression element] HasProperty---> [name],[expression expression element] IsA--> [element],[expression function] HasProperty---> [name],[expression function] HasProperty---> [parameters],[expression function] IsA--> [function],[expression model] IsA--> [model],[floor function] HasProperty---> [name],[floor function] HasProperty---> [parameters],[floor function] IsA--> [function],[function def expression element] IsA--> [element],[function expression element] HasProperty---> [name],[function expression element] IsA--> [element],[function name] IsA--> [name],[integer expression element] HasProperty---> [name],[integer expression element] IsA--> [element],[log function] HasProperty---> [name],[log function] HasProperty---> [parameters],[log function] IsA--> [function],[operator and] HasProperty---> [name],[operator and] HasProperty---> [symbol],[operator divide complex complex] HasProperty---> [operator name],[operator divide real complex] HasProperty---> [operator name],[operator divide real real] HasProperty---> [operator name],[operator divide] HasProperty---> [name],[operator divide] HasProperty---> [symbol],[operator divide] IsA--> [divide],[operator minus complex complex] HasProperty---> [operator name],[operator minus real complex] HasProperty---> [operator name],[operator minus real real] HasProperty---> [operator name],[operator minus] HasProperty---> [name],[operator minus] HasProperty---> [symbol],[operator name] IsA--> [name],[operator plus complex complex] HasProperty---> [operator name],[operator plus real complex] HasProperty---> [operator name],[operator plus real real] HasProperty---> [operator name],[operator plus string real] HasProperty---> [operator name],[operator plus string real] is---> [unary operator],[operator plus string string] HasProperty---> [operator name],[operator plus string string] is---> [unary operator],[operator plus] HasProperty---> [name],[operator plus] HasProperty---> [symbol],[operator pow real real] HasProperty---> [operator name],[operator pow] HasProperty---> [name],[operator pow] HasProperty---> [symbol],[operator pow] IsA--> [pow],[operator sup real real] HasProperty---> [operator name],[operator unary minus complex] HasProperty---> [operator name],[operator unary minus complex] is---> [unary operator],[operator unary minus real] HasProperty---> [operator name],[operator unary minus real] is---> [unary operator],[operator unary minus] HasProperty---> [name],[operator unary minus] HasProperty---> [symbol],[operator unary minus] is---> [unary],[operator unary plus complex] HasProperty---> [operator name],[operator unary plus complex] is---> [unary operator],[operator unary plus real] HasProperty---> [operator name],[operator unary plus real] is---> [unary operator],[operator unary plus] HasProperty---> [name],[operator unary plus] HasProperty---> [symbol],[operator unary plus] is---> [unary],[parameters def expression element] IsA--> [element],[parameters expression element] HasProperty---> [name],[parameters expression element] IsA--> [element],[parenthesis expression element] HasProperty---> [name],[parenthesis expression element] IsA--> [element],[random function] HasProperty---> [name],[random function] HasProperty---> [parameters],[real expression element] HasProperty---> [name],[real expression element] IsA--> [element],[right operande type] IsA--> [type],[root element] IsA--> [element],[signed expression expression element] IsA--> [element],[signed integer expression element] IsA--> [element],[sin function] HasProperty---> [name],[sin function] HasProperty---> [parameters],[sin function] IsA--> [function],[sinh function] HasProperty---> [name],[sinh function] HasProperty---> [parameters],[sinh function] IsA--> [function],[sqrt function] HasProperty---> [name],[sqrt function] HasProperty---> [parameters],[sqrt function] IsA--> [function],[tan function] HasProperty---> [name],[tan function] HasProperty---> [parameters],[tan function] IsA--> [function],[tree element] HasProperty---> [element type],[tree element] HasProperty---> [expression element name],[tree element] HasProperty---> [expression element properties],[tree element] HasProperty---> [left element],[tree element] HasProperty---> [right element],[tree element] HasProperty---> [value],[tree element] IsA--> [element],[unary operator expression element] HasProperty---> [name],[unary operator expression element] IsA--> [element],[variable expression element] IsA--> [element],[operator minus] verify---> [unary],[operator pow] verify---> [unary],[operator unary minus] verify---> [unary],[operator divide] verify---> [unary],[operator plus] verify---> [unary],[operator unary plus] verify---> [unary],[operator divide real real] verify---> [unary operator],[operator pow real real] verify---> [unary operator],[operator minus real real] verify---> [unary operator],[operator unary minus real] verify---> [unary operator],[operator plus real real] verify---> [unary operator],[operator unary plus real] verify---> [unary operator],[operator minus real complex] verify---> [unary operator],[operator plus real complex] verify---> [unary operator],[operator divide real complex] verify---> [unary operator],[operator plus complex complex] verify---> [unary operator],[operator unary minus complex] verify---> [unary operator],[operator minus complex complex] verify---> [unary operator],[operator divide complex complex] verify---> [unary operator],[operator unary plus complex] verify---> [unary operator],[operator and] verify---> [unary],[operator sup real real] verify---> [unary operator],[operator plus string real] verify---> [unary operator],[operator plus string string] verify---> [unary operator]