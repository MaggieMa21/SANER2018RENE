[] affix---> [converter test test infix to postfix auto add multiple handling],[] affix---> [converter test test infix to postfix bracket handling],[] affix---> [converter test test infix to postfix negative sign handling],[] affix---> [converter test test infix to postfix postfix operator handling],[] affix---> [converter test test infix to postfix prefix operator handling],[] affix---> [converter test test infix to postfix],[] affix---> [converter test test is negative sign],[] affix---> [converter test test to string array bracket handling],[] affix---> [converter test test to string array multi digit or floating point handling],[] affix---> [converter test test to string array negative sign handling],[] affix---> [converter test test to string array sin cos tan],[] affix---> [converter test test to string array],[addition] calculate---> [object],[addition] HasProperty---> [addition],[affix converter test test] IsA--> [test],[affixing converter test] IsA--> [test],[array bracket handling] IsA--> [handling],[array multi digit or floating point handling] IsA--> [handling],[array negative sign handling] IsA--> [handling],[array sin cos tan] IsA--> [tan],[bracket handling] IsA--> [handling],[calculator set input expression] IsA--> [expression],[calculator test test] execute---> [],[calculator test] HasProperty---> [up],[calculator test] IsA--> [test],[calculator test] tear---> [down],[calculator] execute---> [object],[calculator] HasProperty---> [main],[converter test test infix] IsA--> [infix],[cosecant] calculate---> [object],[cosecant] HasProperty---> [cosecant],[cosine] calculate---> [object],[cosine] HasProperty---> [cosine],[cotangent] calculate---> [object],[cotangent] HasProperty---> [cotangent],[division] calculate---> [object],[division] HasProperty---> [division],[exponentiation] calculate---> [object],[exponentiation] HasProperty---> [exponentiation],[expression tree controller steps list getter] IsA--> [getter],[expression tree controller] evaluate---> [object],[expression tree controller] execute---> [object],[expression tree controller] HasProperty---> [expression tree controller],[expression tree controller] HasProperty---> [output step],[expression tree controller] IsA--> [controller],[expression tree controller] read---> [object],[expression tree test test] IsA--> [test],[expression tree test test] parse---> [result],[expression tree test] HasProperty---> [up],[expression tree test] IsA--> [test],[expression tree test] tear---> [down],[expression tree] HasProperty---> [expression tree],[factorial] calculate---> [object],[factorial] HasProperty---> [factorial],[file path] IsA--> [path],[floating point handling] IsA--> [handling],[list getter] IsA--> [getter],[log gamma] IsA--> [gamma],[math helper] compare---> [priority],[math helper] is---> [digit],[math helper] is---> [negative sign],[math helper] is---> [operator],[math helper] is---> [postfix operator],[math helper] is---> [prefix operator],[math helper] IsA--> [helper],[multiplication] calculate---> [object],[multiplication] HasProperty---> [multiplication],[negative sign handling] IsA--> [handling],[null parser] execute---> [object],[null parser] HasProperty---> [null parser],[null parser] read---> [object],[operand] HasProperty---> [operand],[operator factory test] IsA--> [test],[operator factory] HasProperty---> [type of operator],[operator factory] IsA--> [factory],[operator test test] calculate---> [],[operator test] IsA--> [test],[operator test] tear---> [down],[operator] calculate---> [object],[operator] HasProperty---> [operator],[parser factory test test] is---> [expression],[parser factory test test] IsA--> [test],[parser factory test] HasProperty---> [up],[parser factory test] IsA--> [test],[parser factory test] tear---> [down],[parser factory] create---> [parser],[parser factory] is---> [equation],[parser factory] is---> [expression],[parser factory] is---> [file path],[parser factory] IsA--> [factory],[parser] execute---> [object],[parser] HasProperty---> [parser],[parser] read---> [object],[postfix operator handling] IsA--> [handling],[prefix operator handling] IsA--> [handling],[secant] calculate---> [object],[secant] HasProperty---> [secant],[sine] calculate---> [object],[sine] HasProperty---> [sine],[string array] IsA--> [array],[subtraction] calculate---> [object],[subtraction] HasProperty---> [subtraction],[tangent] calculate---> [object],[tangent] HasProperty---> [tangent],[test test output step] IsA--> [step],[test test type] IsA--> [type],[to] postfix---> [],[to] string---> [],[to] string---> [array]