 assign---> [assign object],[] assign---> [process object],[] combined---> [combined object],[] combined---> [get length],[] combined---> [get type],[] combined---> [has next],[] combined---> [requires max index],[] compare---> [fixed to common ops check equivalent],[] compare---> [fixed to common ops compare fixed to common ops],[] compare---> [fixed to common ops compare to common ops],[] compare---> [fixed to common ops compare to common],[] compare---> [fixed to common ops declare parameter standard],[] compare---> [fixed to common ops handle special case],[] compare---> [fixed to common ops is match],[] compare---> [fixed to common ops is valid],[] convert---> [matrix type convert object],[] debug---> [bidiagonal compute update],[] debug---> [bidiagonal compute v],[] debug---> [bidiagonal debug bidiagonal],[] debug---> [decompose debug decompose],[] debug---> [decompose decompose object],[] debug---> [decompose set lu],[] debug---> [qr get gamma],[] debug---> [qr get householder],[] debug---> [qr get update],[] do---> [not modify block decompose object],[] do---> [not modify block get input modified],[] fixed---> [matrix f copy object],[] fixed---> [matrix f create like],[] fixed---> [matrix f fixed matrix f],[] fixed---> [matrix f get number columns],[] fixed---> [matrix f get number elements],[] fixed---> [matrix f get number rows],[] fixed---> [matrix f get object],[] fixed---> [matrix f get print],[] fixed---> [matrix f set object],[] fixed---> [matrix x f copy object],[] fixed---> [matrix x f create like],[] fixed---> [matrix x f fixed matrix x f],[] fixed---> [matrix x f get number columns],[] fixed---> [matrix x f get number elements],[] fixed---> [matrix x f get number rows],[] fixed---> [matrix x f get object],[] fixed---> [matrix x f get print],[] fixed---> [matrix x f set object],[] fixed---> [ops add equals],[] fixed---> [ops add object],[] fixed---> [ops change sign],[] fixed---> [ops divide object],[] fixed---> [ops dot object],[] fixed---> [ops extract column],[] fixed---> [ops extract row],[] fixed---> [ops fill object],[] fixed---> [ops get determinant],[] fixed---> [ops get diagonal],[] fixed---> [ops get element div],[] fixed---> [ops get element max absolute],[] fixed---> [ops get element max],[] fixed---> [ops get element min absolute],[] fixed---> [ops get element min],[] fixed---> [ops get element multiple],[] fixed---> [ops get multiple add transpose a],[] fixed---> [ops get multiple add transpose ab],[] fixed---> [ops get multiple add transpose b],[] fixed---> [ops get multiple add],[] fixed---> [ops get multiple transpose a],[] fixed---> [ops get multiple transpose ab],[] fixed---> [ops get multiple transpose b],[] fixed---> [ops get multiple],[] fixed---> [ops get scale],[] fixed---> [ops invert object],[] fixed---> [ops set identity],[] fixed---> [ops subtract equals],[] fixed---> [ops subtract object],[] fixed---> [ops trace object],[] fixed---> [ops transpose object],[] generate---> [determinant from minor create class],[] generate---> [determinant from minor generate determinant from minor],[] generate---> [determinant from minor get a],[] generate---> [determinant from minor get input value],[] generate---> [determinant from minor get main],[] generate---> [determinant from minor get minor],[] generate---> [determinant from minor get print calls],[] generate---> [determinant from minor get print function inner],[] generate---> [determinant from minor get print function],[] generate---> [determinant from minor get print top],[] generate---> [determinant from minor get print],[] generate---> [fixed matrix n generate object],[] generate---> [fixed matrix n get main],[] generate---> [fixed matrix n get print class parameter],[] generate---> [fixed matrix n get print function parameter],[] generate---> [fixed matrix n get print set from parameter],[] generate---> [fixed matrix n get print set matrix],[] generate---> [fixed matrix n get print],[] generate---> [fixed matrix n set getter],[] generate---> [fixed matrix n set setter],[] generate---> [fixed matrix nx n generate object],[] generate---> [fixed matrix nx n get main],[] generate---> [fixed matrix nx n get print class parameter],[] generate---> [fixed matrix nx n get print function parameter],[] generate---> [fixed matrix nx n get print set from parameter],[] generate---> [fixed matrix nx n get print set matrix],[] generate---> [fixed matrix nx n get print],[] generate---> [fixed matrix nx n set getter],[] generate---> [fixed matrix nx n set setter],[] generate---> [fixed ops add equals],[] generate---> [fixed ops add object],[] generate---> [fixed ops change sign vector],[] generate---> [fixed ops change sign],[] generate---> [fixed ops divide three],[] generate---> [fixed ops divide two],[] generate---> [fixed ops divide vector three],[] generate---> [fixed ops divide vector two],[] generate---> [fixed ops dot object],[] generate---> [fixed ops extract object],[] generate---> [fixed ops fill object],[] generate---> [fixed ops fill vector],[] generate---> [fixed ops generate object],[] generate---> [fixed ops get determinant],[] generate---> [fixed ops get diagonal],[] generate---> [fixed ops get element div three],[] generate---> [fixed ops get element div two],[] generate---> [fixed ops get element div vector three],[] generate---> [fixed ops get element div vector two],[] generate---> [fixed ops get element max absolute vector],[] generate---> [fixed ops get element max absolute],[] generate---> [fixed ops get element max vector],[] generate---> [fixed ops get element max],[] generate---> [fixed ops get element min absolute vector],[] generate---> [fixed ops get element min absolute],[] generate---> [fixed ops get element min vector],[] generate---> [fixed ops get element min],[] generate---> [fixed ops get element multiple three],[] generate---> [fixed ops get element multiple two],[] generate---> [fixed ops get element multiple vector three],[] generate---> [fixed ops get element multiple vector two],[] generate---> [fixed ops get main],[] generate---> [fixed ops get multiple matrix v v],[] generate---> [fixed ops get multiple transpose a],[] generate---> [fixed ops get multiple transpose ab],[] generate---> [fixed ops get multiple transpose b],[] generate---> [fixed ops get multiple v matrix v],[] generate---> [fixed ops get multiple],[] generate---> [fixed ops get print preable],[] generate---> [fixed ops get scale three],[] generate---> [fixed ops get scale two],[] generate---> [fixed ops get scale vector three],[] generate---> [fixed ops get scale vector two],[] generate---> [fixed ops get vector add equals],[] generate---> [fixed ops get vector add],[] generate---> [fixed ops get vector subtract equals],[] generate---> [fixed ops get vector subtract],[] generate---> [fixed ops invert object],[] generate---> [fixed ops set identity],[] generate---> [fixed ops subtract equals],[] generate---> [fixed ops subtract object],[] generate---> [fixed ops trace object],[] generate---> [fixed ops transpose one],[] generate---> [fixed ops transpose two],[] generate---> [inverse from minor create class],[] generate---> [inverse from minor create minor],[] generate---> [inverse from minor generate inverse from minor],[] generate---> [inverse from minor get a],[] generate---> [inverse from minor get determinant],[] generate---> [inverse from minor get main],[] generate---> [inverse from minor get print calls],[] generate---> [inverse from minor get print function],[] generate---> [inverse from minor get print minors],[] generate---> [inverse from minor get print top minor],[] generate---> [inverse from minor get print top],[] implied---> [common ops dense matrix f extract object],[] implied---> [common ops matrix f extract object],[] implied---> [dense get scale],[] implied---> [generic get scale],[] inlined---> [],[] modify---> [block decompose object],[] modify---> [block get input modified],[] parse---> [error parse error],[] read---> [csv extract words],[] read---> [csv get line number],[] read---> [csv get reader],[] read---> [csv is space],[] read---> [csv parse words],[] read---> [csv read csv],[] read---> [csv set comment],[] read---> [matrix csv read complex],[] read---> [matrix csv read matrix csv],[] read---> [matrix csv read object],[] read---> [matrix csv read real],[] solve---> [pseudo inverse qrp d modifies a],[] solve---> [pseudo inverse qrp d modifies b],[] solve---> [pseudo inverse qrp d set a],[] solve---> [pseudo inverse qrp d solve object],[] solve---> [pseudo inverse qrp d solve pseudo inverse qrp d],[] solve---> [pseudo inverse svd get decomposer],[] solve---> [pseudo inverse svd get decomposition],[] solve---> [pseudo inverse svd get quality],[] solve---> [pseudo inverse svd invert object],[] solve---> [pseudo inverse svd modifies a],[] solve---> [pseudo inverse svd modifies b],[] solve---> [pseudo inverse svd set a],[] solve---> [pseudo inverse svd set threshold],[] solve---> [pseudo inverse svd solve object],[] solve---> [pseudo inverse svd solve pseudo inverse svd],[] specialized---> [ops add identity],[] specialized---> [ops copy change row],[] specialized---> [ops copy triangle],[] specialized---> [ops create reflector],[] specialized---> [ops get diagonal prod],[] specialized---> [ops get element diagonal max absolute],[] specialized---> [ops get element sum sq],[] specialized---> [ops get pivot matrix],[] specialized---> [ops get quality triangular],[] specialized---> [ops get split into vectors],[] switching---> [eigenvalue decomposition decompose object],[] switching---> [eigenvalue decomposition get eigenvalue vector],[] switching---> [eigenvalue decomposition get eigenvalue],[] switching---> [eigenvalue decomposition get input modified],[] switching---> [eigenvalue decomposition get number of eigenvalues],[] switching---> [eigenvalue decomposition switching eigenvalue decomposition],[] transpose---> [algs block object],[] transpose---> [algs get standard],[] transpose---> [algs square object],[] transposed---> [svd implicit qr decompose d are things],[] watched---> [double step qr decomposition d decompose object],[] watched---> [double step qr decomposition d get eigenvalue vector],[] watched---> [double step qr decomposition d get eigenvalue],[] watched---> [double step qr decomposition d get input modified],[] watched---> [double step qr decomposition d get number of eigenvalues],[] watched---> [double step qr decomposition d watched double step qr decomposition d],[] watched---> [double step qr eigenvalue add computed eigenvalue x],[] watched---> [double step qr eigenvalue add eigenvalue at],[] watched---> [double step qr eigenvalue add eigenvalue],[] watched---> [double step qr eigenvalue bulge double step qn],[] watched---> [double step qr eigenvalue bulge single step qn],[] watched---> [double step qr eigenvalue create bulge single step],[] watched---> [double step qr eigenvalue get eigenvalue by scale],[] watched---> [double step qr eigenvalue get eigenvalues],[] watched---> [double step qr eigenvalue get implicit qr],[] watched---> [double step qr eigenvalue get increment steps],[] watched---> [double step qr eigenvalue get number of eigenvalues],[] watched---> [double step qr eigenvalue get print steps],[] watched---> [double step qr eigenvalue get setup],[] watched---> [double step qr eigenvalue is real x],[] watched---> [double step qr eigenvalue is zero],[] watched---> [double step qr eigenvalue move to next split],[] watched---> [double step qr eigenvalue perform implicit double step],[] watched---> [double step qr eigenvalue perform implicit single step],[] watched---> [double step qr eigenvalue perform iteration],[] watched---> [double step qr eigenvalue process object],[] watched---> [double step qr eigenvalue set checks],[] watched---> [double step qr eigenvalue set quality],[] watched---> [double step qr eigenvalue watched double step qr eigenvalue],[] watched---> [double step qr eigenvector check split perform implicit],[] watched---> [double step qr eigenvector extract vectors],[] watched---> [double step qr eigenvector find next eigenvalue],[] watched---> [double step qr eigenvector find qand r],[] watched---> [double step qr eigenvector get eigenvalues],[] watched---> [double step qr eigenvector get eigenvectors],[] watched---> [double step qr eigenvector get implicit],[] watched---> [double step qr eigenvector get quality],[] watched---> [double step qr eigenvector move to next split],[] watched---> [double step qr eigenvector process object],[] watched---> [double step qr eigenvector solve eigenvector duplicate eigenvalue],[] watched---> [double step qr eigenvector solve using triangle],[] watched---> [double step qr eigenvector solve with lu],[a dimension check] IsA--> [check],[a process object] IsA--> [object],[a vec col] IsA--> [col],[abstract invert object] IsA--> [object],[access d] IsA--> [d],[adjustable linear solver qr d set max size] IsA--> [size],[adjustable linear solver qr d] add---> [row to a],[adjustable linear solver qr d] HasProperty---> [a],[adjustable linear solver qr d] HasProperty---> [max size],[adjustable linear solver qr d] IsA--> [d],[adjustable linear solver qr d] remove---> [row from a],[adjustable linear solver qr] IsA--> [qr],[alpha beta] IsA--> [beta],[array extent] HasProperty---> [array extent],[array extent] HasProperty---> [length],[array extent] IsA--> [extent],[b to d decompose object] IsA--> [object],[b to d invert object] IsA--> [object],[bad matrix col] IsA--> [col],[bad matrix row] IsA--> [row],[base cd invert object] IsA--> [object],[base cd] IsA--> [cd],[base cholesky solve tests d test invert] IsA--> [invert],[base cholesky solve tests d test quality] IsA--> [quality],[base cholesky] IsA--> [cholesky],[base cholesky] solve---> [tests cd create safe solver],[base cholesky] solve---> [tests cd create solver],[base cholesky] solve---> [tests cd get standard tests],[base cholesky] solve---> [tests cd set a dimension check],[base cholesky] solve---> [tests cd solve dimension check],[base cholesky] solve---> [tests cd test invert],[base cholesky] solve---> [tests cd test quality scale],[base cholesky] solve---> [tests cd test quality],[base cholesky] solve---> [tests cd test solve],[base cholesky] solve---> [tests d create safe solver],[base cholesky] solve---> [tests d create solver],[base cholesky] solve---> [tests d get standard tests],[base cholesky] solve---> [tests d set a dimension check],[base cholesky] solve---> [tests d solve dimension check],[base cholesky] solve---> [tests d test invert],[base cholesky] solve---> [tests d test quality scale],[base cholesky] solve---> [tests d test quality],[base cholesky] solve---> [tests d test solve],[base decomposition b to d decompose object] IsA--> [object],[base decomposition b to d] convert---> [block to row],[base decomposition b to d] HasProperty---> [base decomposition b to d],[base decomposition b to d] HasProperty---> [input modified],[base decomposition] IsA--> [decomposition],[base linear solver qrp d get base linear solver qrp d] IsA--> [d],[base linear solver qrp d invert object] IsA--> [object],[base linear solver qrp d] HasProperty---> [a],[base linear solver qrp d] HasProperty---> [base linear solver qrp d],[base linear solver qrp d] HasProperty---> [decomposition],[base linear solver qrp d] HasProperty---> [quality],[base linear solver qrp d] HasProperty---> [upgrade solution],[base linear solver qrp d] IsA--> [d],[base linear solver qrp] IsA--> [qrp],[basis error] IsA--> [error],[basis vector] IsA--> [vector],[benchmark bidiagonal decomposition] evaluate---> [object],[benchmark bidiagonal decomposition] HasProperty---> [main],[benchmark block transpose transpose] IsA--> [transpose],[benchmark block transpose] IsA--> [transpose],[benchmark block] transpose---> [get main],[benchmark cholesky decomposition] HasProperty---> [main],[benchmark cholesky decomposition] IsA--> [decomposition],[benchmark cholesky decomposition] run---> [algorithms],[benchmark determinant] compute---> [auto],[benchmark determinant] compute---> [fixed x],[benchmark determinant] compute---> [leibniz],[benchmark determinant] compute---> [lu],[benchmark determinant] compute---> [minor x],[benchmark determinant] compute---> [minor],[benchmark determinant] HasProperty---> [main],[benchmark eigenvalue decomposition] HasProperty---> [main],[benchmark eigenvalue decomposition] run---> [algorithms],[benchmark eigenvalue decomposition] watched---> [object],[benchmark element] HasProperty---> [main],[benchmark equality] equals---> [object],[benchmark equality] HasProperty---> [main],[benchmark function return] HasProperty---> [benchmark a],[benchmark function return] HasProperty---> [benchmark b],[benchmark function return] HasProperty---> [function a],[benchmark function return] HasProperty---> [function b],[benchmark function return] HasProperty---> [main],[benchmark function return] IsA--> [return],[benchmark function return] reset---> [data],[benchmark generics] HasProperty---> [benchmark dense],[benchmark generics] HasProperty---> [benchmark generic],[benchmark generics] HasProperty---> [main],[benchmark generics] HasProperty---> [scale],[benchmark hessenberg] HasProperty---> [basic],[benchmark hessenberg] HasProperty---> [main],[benchmark inheritance call] HasProperty---> [main],[benchmark inheritance call] HasProperty---> [multiple child],[benchmark inheritance call] HasProperty---> [multiple parent wrap],[benchmark inheritance call] HasProperty---> [multiple parent],[benchmark inheritance call] IsA--> [call],[benchmark instance of] HasProperty---> [main],[benchmark inverse stability] evaluate---> [all],[benchmark inverse stability] evaluate---> [inverse],[benchmark inverse stability] HasProperty---> [main],[benchmark inverse] fixed---> [get benchmark],[benchmark inverse] fixed---> [get main],[benchmark invert square invert benchmark] IsA--> [benchmark],[benchmark invert square invert ops benchmark] IsA--> [benchmark],[benchmark invert square] HasProperty---> [main],[benchmark invert square] IsA--> [square],[benchmark invert square] run---> [algorithms],[benchmark invert sym positive definite invert covar] IsA--> [covar],[benchmark invert sym positive definite] HasProperty---> [main],[benchmark invert sym] IsA--> [sym],[benchmark kalman performance process] IsA--> [process],[benchmark kalman performance run] IsA--> [run],[benchmark kalman performance] create---> [f],[benchmark kalman performance] create---> [h],[benchmark kalman performance] create---> [quality],[benchmark kalman performance] create---> [simulated meas],[benchmark kalman performance] HasProperty---> [main],[benchmark kalman performance] IsA--> [performance],[benchmark kalman performance] run---> [object],[benchmark lu decomposition] HasProperty---> [benchmark],[benchmark lu decomposition] HasProperty---> [main],[benchmark lu decomposition] IsA--> [decomposition],[benchmark lu decomposition] run---> [algorithms],[benchmark matrix matrix multiple fixed block] HasProperty---> [main],[benchmark matrix matrix multiple fixed block] HasProperty---> [multiple fixed x],[benchmark matrix matrix multiple fixed block] HasProperty---> [multiple],[benchmark matrix matrix multiple fixed block] perform---> [tests],[benchmark matrix matrix multiple quad] HasProperty---> [main],[benchmark matrix matrix multiple quad] HasProperty---> [multiple],[benchmark matrix matrix multiple quad] HasProperty---> [quad],[benchmark matrix matrix multiple quad] perform---> [tests],[benchmark matrix matrix multiple transpose ab] HasProperty---> [main],[benchmark matrix matrix multiple transpose ab] HasProperty---> [multiple aux],[benchmark matrix matrix multiple transpose ab] HasProperty---> [multiple small],[benchmark matrix matrix multiple transpose ab] HasProperty---> [multiple],[benchmark matrix matrix multiple transpose ab] perform---> [tests],[benchmark matrix matrix multiple] add---> [get main],[benchmark matrix matrix multiple] add---> [get multiple aux],[benchmark matrix matrix multiple] add---> [get multiple reorder],[benchmark matrix matrix multiple] add---> [get multiple small],[benchmark matrix matrix multiple] add---> [get multiple],[benchmark matrix matrix multiple] add---> [perform tests],[benchmark matrix matrix multiple] HasProperty---> [main],[benchmark matrix matrix multiple] HasProperty---> [multiple aux],[benchmark matrix matrix multiple] HasProperty---> [multiple block d native],[benchmark matrix matrix multiple] HasProperty---> [multiple block native],[benchmark matrix matrix multiple] HasProperty---> [multiple reorder],[benchmark matrix matrix multiple] HasProperty---> [multiple small],[benchmark matrix matrix multiple] HasProperty---> [multiple],[benchmark matrix matrix multiple] multiply---> [object],[benchmark matrix matrix multiple] perform---> [tests],[benchmark matrix matrix multiple] transpose---> [a get main],[benchmark matrix matrix multiple] transpose---> [a get multiple reorder],[benchmark matrix matrix multiple] transpose---> [a get multiple small],[benchmark matrix matrix multiple] transpose---> [a get multiple],[benchmark matrix matrix multiple] transpose---> [a perform tests],[benchmark matrix matrix] IsA--> [matrix],[benchmark matrix multiple accessors] HasProperty---> [access d],[benchmark matrix multiple accessors] HasProperty---> [main],[benchmark matrix multiple accessors] wrapped---> [object],[benchmark matrix multiple product] HasProperty---> [main],[benchmark matrix multiple product] HasProperty---> [multiple transpose a],[benchmark matrix multiple product] perform---> [tests],[benchmark matrix vector ops] HasProperty---> [main],[benchmark matrix vector ops] HasProperty---> [mm multiple small],[benchmark matrix vector ops] HasProperty---> [mm multiple transpose a large],[benchmark matrix vector ops] HasProperty---> [mm multiple transpose a small],[benchmark matrix vector ops] HasProperty---> [mv multiple transpose a large],[benchmark matrix vector ops] HasProperty---> [mv multiple transpose a small],[benchmark matrix vector ops] HasProperty---> [mv multiple],[benchmark matrix vector ops] perform---> [tests],[benchmark multiple and add ops get multiple add transpose b] IsA--> [b],[benchmark multiple and add ops get multiple transpose b] IsA--> [b],[benchmark multiple and] add---> [ops add a b],[benchmark multiple and] add---> [ops add equal beta],[benchmark multiple and] add---> [ops add equals],[benchmark multiple and] add---> [ops add object],[benchmark multiple and] add---> [ops get main],[benchmark multiple and] add---> [ops get minus equals],[benchmark multiple and] add---> [ops get minus],[benchmark multiple and] add---> [ops get multiple add transpose a],[benchmark multiple and] add---> [ops get multiple add transpose ab],[benchmark multiple and] add---> [ops get multiple add transpose b],[benchmark multiple and] add---> [ops get multiple add],[benchmark multiple and] add---> [ops get multiple alpha],[benchmark multiple and] add---> [ops get multiple alt],[benchmark multiple and] add---> [ops get multiple transpose a alpha],[benchmark multiple and] add---> [ops get multiple transpose a],[benchmark multiple and] add---> [ops get multiple transpose ab],[benchmark multiple and] add---> [ops get multiple transpose b],[benchmark multiple and] add---> [ops get multiple],[benchmark multiple and] add---> [ops perform add tests],[benchmark multiple and] add---> [ops perform multiple tests],[benchmark multiplication] fixed---> [get benchmark],[benchmark multiplication] fixed---> [get main],[benchmark qr decomposition cd] HasProperty---> [generic],[benchmark qr decomposition cd] HasProperty---> [main],[benchmark qr decomposition cd] IsA--> [cd],[benchmark qr decomposition cd] run---> [algorithms],[benchmark qr decomposition d block object] IsA--> [object],[benchmark qr decomposition d] HasProperty---> [generic],[benchmark qr decomposition d] HasProperty---> [main],[benchmark qr decomposition d] IsA--> [d],[benchmark qr decomposition d] run---> [algorithms],[benchmark qr decomposition] IsA--> [decomposition],[benchmark rect] solve---> [get main],[benchmark rect] solve---> [run algorithms],[benchmark rect] solve---> [solve benchmark],[benchmark solve pseudo inverse] IsA--> [inverse],[benchmark svd] evaluate---> [object],[benchmark svd] HasProperty---> [main],[benchmark symmetric eigenvalue decomposition block tridiagonal] IsA--> [tridiagonal],[benchmark symmetric eigenvalue decomposition] HasProperty---> [default symmetric],[benchmark symmetric eigenvalue decomposition] HasProperty---> [main],[benchmark symmetric eigenvalue decomposition] HasProperty---> [standard tridiagonal],[benchmark symmetric eigenvalue decomposition] IsA--> [decomposition],[benchmark symmetric eigenvalue decomposition] run---> [algorithms],[benchmark transpose block] IsA--> [block],[benchmark transpose square] IsA--> [square],[benchmark transpose] evaluate---> [matrix],[benchmark transpose] HasProperty---> [common],[benchmark transpose] HasProperty---> [main],[benchmark transpose] HasProperty---> [standard],[benchmark tridiagonal] HasProperty---> [alt],[benchmark tridiagonal] HasProperty---> [basic],[benchmark tridiagonal] HasProperty---> [main],[benchmark various ops] fill---> [arrays],[benchmark various ops] fill---> [manual],[benchmark various ops] HasProperty---> [determinant],[benchmark various ops] HasProperty---> [main],[benchmark various ops] HasProperty---> [norm eml],[benchmark various ops] HasProperty---> [scale],[benchmark various ops] transpose---> [eml],[benchmark] implied---> [common ops extract common],[benchmark] implied---> [common ops extract dense matrix f],[benchmark] implied---> [common ops extract matrix f],[benchmark] implied---> [common ops get benchmark],[benchmark] implied---> [common ops get main],[benchmark] inlining---> [get set get bench get],[benchmark] inlining---> [get set get d],[benchmark] inlining---> [get set get main],[benchmark] inlining---> [get set get unsafe get],[benchmark] solve---> [equation get main],[benchmark] solve---> [equation run algorithms],[benchmark] solve---> [equation solve benchmark],[benchmark] solve---> [over get main],[benchmark] solve---> [over run algorithms],[benchmark] solve---> [over solve benchmark],[benchmark] solve---> [pseudo inverse get main],[benchmark] solve---> [pseudo inverse run algorithms],[benchmark] solve---> [pseudo inverse solve benchmark],[benchmark] solve---> [sym positive definite get main],[benchmark] solve---> [sym positive definite run algorithms],[benchmark] solve---> [sym positive definite solve object],[bidiagonal debug bidiagonal] IsA--> [bidiagonal],[bidiagonal decomposition naive d] compute---> [update],[bidiagonal decomposition naive d] compute---> [v],[bidiagonal decomposition naive d] decompose---> [object],[bidiagonal decomposition naive d] HasProperty---> [b],[bidiagonal decomposition naive d] HasProperty---> [update],[bidiagonal decomposition naive d] HasProperty---> [v],[bidiagonal decomposition row d create qr decomposition] IsA--> [decomposition],[bidiagonal decomposition row d] compute---> [update],[bidiagonal decomposition row d] compute---> [v],[bidiagonal decomposition row d] decompose---> [object],[bidiagonal decomposition row d] handle---> [b],[bidiagonal decomposition row d] handle---> [update],[bidiagonal decomposition row d] handle---> [v],[bidiagonal decomposition row d] HasProperty---> [b],[bidiagonal decomposition row d] HasProperty---> [diagonal],[bidiagonal decomposition row d] HasProperty---> [gammas update],[bidiagonal decomposition row d] HasProperty---> [gammas v],[bidiagonal decomposition row d] HasProperty---> [input modified],[bidiagonal decomposition row d] HasProperty---> [ubv],[bidiagonal decomposition row d] HasProperty---> [update],[bidiagonal decomposition row d] HasProperty---> [v],[bidiagonal decomposition row d] IsA--> [d],[bidiagonal decomposition row] IsA--> [row],[bidiagonal decomposition tall d] decompose---> [object],[bidiagonal decomposition tall d] HasProperty---> [b],[bidiagonal decomposition tall d] HasProperty---> [diagonal],[bidiagonal decomposition tall d] HasProperty---> [input modified],[bidiagonal decomposition tall d] HasProperty---> [update],[bidiagonal decomposition tall d] HasProperty---> [v],[block cholesky outer solver] HasProperty---> [a],[block cholesky outer solver] HasProperty---> [decomposition],[block cholesky outer solver] HasProperty---> [quality],[block cholesky outer solver] modifies---> [a],[block cholesky outer solver] modifies---> [b],[block cholesky outer solver] solve---> [object],[block d matrix f] create---> [like],[block d matrix f] HasProperty---> [data],[block d matrix f] HasProperty---> [number columns],[block d matrix f] HasProperty---> [number elements],[block d matrix f] HasProperty---> [number rows],[block d matrix f] HasProperty---> [object],[block d matrix f] HasProperty---> [print],[block d matrix f] reshape---> [object],[block d matrix ops] convert---> [object],[block d matrix ops] HasProperty---> [multiple block add],[block d matrix ops] HasProperty---> [multiple block set],[block d matrix ops] HasProperty---> [multiple],[block decompose object] IsA--> [object],[block helper] IsA--> [helper],[block house holder test] IsA--> [test],[block house holder] add---> [row],[block house holder] compute---> [house holder col],[block house holder] compute---> [house holder row],[block house holder] compute---> [tau and divide col],[block house holder] compute---> [tau and divide row],[block house holder] compute---> [width column],[block house holder] compute---> [y t v],[block house holder] compute---> [z],[block house holder] decompose---> [qr block col],[block house holder] find---> [max col],[block house holder] find---> [max row],[block house holder] HasProperty---> [multiple add zeros],[block house holder] HasProperty---> [multiple block add zerosone],[block house holder] HasProperty---> [multiple transpose a block set lower triag],[block house holder] HasProperty---> [multiple transpose a vec col],[block house holder] HasProperty---> [rank update multiple lower left col],[block house holder] HasProperty---> [rank update multiple lower row],[block house holder] HasProperty---> [rank update multiple r col],[block house holder] HasProperty---> [rank update multiple r top row],[block house holder] HasProperty---> [scale row],[block house holder] initialize---> [width],[block house holder] IsA--> [holder],[block inner multiplication block multiple minus] transpose---> [a],[block inner multiplication block multiple minus] transpose---> [b],[block inner multiplication block multiple plus] transpose---> [a],[block inner multiplication block multiple plus] transpose---> [b],[block inner multiplication block multiple set transpose b] IsA--> [b],[block inner multiplication block multiple set] transpose---> [a],[block inner rank] update---> [get multiple transpose a block minus update],[block inner rank] update---> [get multiple transpose a block minus],[block inner rank] update---> [get multiple transpose b block minus lower],[block inner rank] update---> [get multiple transpose b block minus],[block inner rank] update---> [get rank n update],[block inner triangular solver] solve---> [lower transpose b],[block inner triangular solver] solve---> [lower],[block inner triangular solver] solve---> [transpose lower],[block inner triangular solver] solve---> [transpose update],[block inner triangular solver] solve---> [update],[block matrix f] create---> [like],[block matrix f] HasProperty---> [data],[block matrix f] HasProperty---> [index],[block matrix f] HasProperty---> [number columns],[block matrix f] HasProperty---> [number elements],[block matrix f] HasProperty---> [number rows],[block matrix f] HasProperty---> [object],[block matrix f] HasProperty---> [print],[block matrix f] reshape---> [object],[block matrix f] wrap---> [object],[block matrix ops get multiple transpose b] IsA--> [b],[block matrix ops] convert---> [object],[block matrix ops] convert---> [transpose src],[block matrix ops] create---> [random],[block matrix ops] extract---> [aligned],[block matrix ops] HasProperty---> [multiple transpose a],[block matrix ops] HasProperty---> [multiple transpose b],[block matrix ops] HasProperty---> [zero triangle],[block matrix ops] is---> [equals],[block matrix ops] transpose---> [object],[block multiplication get multiple transpose b] IsA--> [b],[block multiplication] HasProperty---> [multiple minus transpose a],[block multiplication] HasProperty---> [multiple minus],[block multiplication] HasProperty---> [multiple plus transpose a],[block multiplication] HasProperty---> [multiple plus],[block multiplication] HasProperty---> [multiple transpose a],[block multiplication] HasProperty---> [multiple transpose b],[block multiplication] HasProperty---> [multiple],[block qr house holder solver] HasProperty---> [a],[block qr house holder solver] IsA--> [solver],[block qr house holder solver] modifies---> [a],[block qr house holder solver] modifies---> [b],[block qr house holder solver] solve---> [object],[block qr house holder] solver---> [get decomposition],[block qr house holder] solver---> [get quality],[block triangular solver] solve---> [block],[block triangular solver] solve---> [lower],[block triangular solver] solve---> [object],[block triangular solver] solve---> [r],[block vector ops] HasProperty---> [scale row],[bulge end] IsA--> [end],[bulge right] IsA--> [right],[bulge scale] IsA--> [scale],[c common ops strip] IsA--> [strip],[c common ops] add---> [object],[c common ops] convert---> [object],[c common ops] fill---> [object],[c common ops] HasProperty---> [columns to vector],[c common ops] HasProperty---> [determinant],[c common ops] HasProperty---> [diagonal],[c common ops] HasProperty---> [element divide],[c common ops] HasProperty---> [element max absolute],[c common ops] HasProperty---> [element max imaginary],[c common ops] HasProperty---> [element max magnitude],[c common ops] HasProperty---> [element max real],[c common ops] HasProperty---> [element min imaginary],[c common ops] HasProperty---> [element min real],[c common ops] HasProperty---> [element multiply],[c common ops] HasProperty---> [identity],[c common ops] HasProperty---> [magnitude],[c common ops] HasProperty---> [multiple add transpose a],[c common ops] HasProperty---> [multiple add transpose ab],[c common ops] HasProperty---> [multiple add transpose b],[c common ops] HasProperty---> [multiple add],[c common ops] HasProperty---> [multiple transpose a],[c common ops] HasProperty---> [multiple transpose ab],[c common ops] HasProperty---> [multiple transpose b],[c common ops] HasProperty---> [multiple],[c common ops] HasProperty---> [scale],[c common ops] solve---> [object],[c common ops] subtract---> [object],[c common ops] transpose---> [conjugate],[c common ops] transpose---> [object],[c decomposition factory] decompose---> [safe],[c decomposition factory] HasProperty---> [lu],[c dense matrix f] create---> [like],[c dense matrix f] HasProperty---> [c dense matrix f],[c dense matrix f] HasProperty---> [data length],[c dense matrix f] HasProperty---> [imaginary],[c dense matrix f] HasProperty---> [index],[c dense matrix f] HasProperty---> [object],[c dense matrix f] HasProperty---> [print],[c dense matrix f] HasProperty---> [real],[c dense matrix f] HasProperty---> [row stride],[c dense matrix f] HasProperty---> [zero],[c dense matrix f] reshape---> [object],[c invert] using---> [solve invert object],[c linear solver factory] HasProperty---> [lu],[c norm ops] HasProperty---> [norm f],[c norm] IsA--> [norm],[c random matrices] create---> [herm positive definite],[c random matrices] create---> [hermitian],[c random matrices] create---> [random],[c random matrices] HasProperty---> [hermitian],[c random matrices] HasProperty---> [random],[c specialized ops create reflector gamma] IsA--> [gamma],[c specialized ops get element diagonal max magnitude] IsA--> [magnitude],[c specialized ops get householder vector] IsA--> [vector],[c transpose algs] HasProperty---> [standard conjugate],[c transpose algs] HasProperty---> [standard],[c triangular solver] solve---> [conjugate transpose lower diagonal real],[c triangular solver] solve---> [lower diagonal real],[c triangular solver] solve---> [update],[c] specialized---> [ops create reflector],[c] specialized---> [ops get element diagonal max magnitude],[c] specialized---> [ops get householder vector],[c] specialized---> [ops get householder],[c] specialized---> [ops get pivot matrix],[c] specialized---> [ops get quality triangular],[case square] IsA--> [square],[cd check identity null] IsA--> [null],[cd check sub house] IsA--> [house],[cd check sub matrix] IsA--> [matrix],[cd check] IsA--> [check],[cd matrix f] HasProperty---> [data],[cd matrix f] HasProperty---> [index],[cd matrix f] HasProperty---> [number columns],[cd matrix f] HasProperty---> [number elements],[cd matrix f] HasProperty---> [number rows],[cd matrix f] HasProperty---> [object],[cd matrix] IsA--> [matrix],[cd test decomposition] IsA--> [decomposition],[cd test invert] IsA--> [invert],[cd test quality scale] IsA--> [scale],[cd test quality] IsA--> [quality],[cd test] IsA--> [test],[check cd check decomposition] IsA--> [decomposition],[check check companion matrix] IsA--> [matrix],[check check size] IsA--> [size],[check check] IsA--> [check],[check compact] IsA--> [compact],[check decomposition interface cd check] modified---> [input],[check decomposition interface cd] HasProperty---> [safe decomposition],[check decomposition interface cd] IsA--> [cd],[check decomposition interface check] modified---> [input],[check decomposition interface] HasProperty---> [safe decomposition],[check decomposition] IsA--> [decomposition],[check determinant] IsA--> [determinant],[check failure] IsA--> [failure],[check identity] IsA--> [identity],[check matrix multiple shape] check---> [all],[check matrix vector multiple shape] check---> [all],[check matrix vector multiple shape] invoke---> [expect fail],[check matrix vector] IsA--> [vector],[check quality scale] IsA--> [scale],[check rref] IsA--> [rref],[check size] IsA--> [size],[check sub house] IsA--> [house],[check sub matrix] IsA--> [matrix],[check svd matrix size] IsA--> [size],[check test eigenvalue consistency] IsA--> [consistency],[checking decomposition interface] IsA--> [interface],[chol cd] IsA--> [cd],[chol ldl] IsA--> [ldl],[cholesky block helper d] decompose---> [object],[cholesky block helper d] HasProperty---> [lower],[cholesky block helper] IsA--> [helper],[cholesky block] update---> [],[cholesky decomposition b to d] compute---> [determinant],[cholesky decomposition b to d] HasProperty---> [t],[cholesky decomposition b to d] is---> [lower],[cholesky decomposition block d] decompose---> [lower],[cholesky decomposition block d] decompose---> [upper],[cholesky decomposition block d] HasProperty---> [expected max size],[cholesky decomposition block d] solve---> [lower special],[cholesky decomposition common cd decompose object] IsA--> [object],[cholesky decomposition common cd] compute---> [determinant],[cholesky decomposition common cd] decompose---> [lower],[cholesky decomposition common cd] HasProperty---> [input modified],[cholesky decomposition common cd] HasProperty---> [t],[cholesky decomposition common cd] is---> [lower],[cholesky decomposition common d] compute---> [determinant],[cholesky decomposition common d] decompose---> [lower],[cholesky decomposition common d] decompose---> [object],[cholesky decomposition common d] decompose---> [upper],[cholesky decomposition common d] HasProperty---> [expected max size],[cholesky decomposition common d] HasProperty---> [input modified],[cholesky decomposition common d] HasProperty---> [t],[cholesky decomposition common d] HasProperty---> [vv],[cholesky decomposition common d] is---> [lower],[cholesky decomposition inner cd] decompose---> [lower],[cholesky decomposition inner cd] HasProperty---> [tolerance],[cholesky decomposition inner d] decompose---> [lower],[cholesky decomposition inner d] decompose---> [upper],[cholesky decomposition inner] IsA--> [inner],[cholesky decomposition ldl d] decompose---> [object],[cholesky decomposition ldl d] HasProperty---> [d],[cholesky decomposition ldl d] HasProperty---> [diagonal],[cholesky decomposition ldl d] HasProperty---> [expected max size],[cholesky decomposition ldl d] HasProperty---> [input modified],[cholesky decomposition ldl d] HasProperty---> [lower],[cholesky decomposition ldl d] HasProperty---> [vv],[cholesky decomposition ldl] IsA--> [ldl],[cholesky ldl] IsA--> [ldl],[cholesky outer form b] compute---> [determinant],[cholesky outer form b] decompose---> [lower],[cholesky outer form b] decompose---> [object],[cholesky outer form b] decompose---> [upper],[cholesky outer form b] HasProperty---> [input modified],[cholesky outer form b] HasProperty---> [t],[cholesky outer form b] is---> [lower],[cholesky outer solver invert object] IsA--> [object],[cholesky outer solver test invert] IsA--> [invert],[cholesky outer solver test quality scale] IsA--> [scale],[cholesky outer solver test quality] IsA--> [quality],[cholesky] update---> [],[class name] IsA--> [name],[class preamble] IsA--> [preamble],[code generator base] generate---> [object],[code generator base] HasProperty---> [output file],[code generator base] HasProperty---> [package],[code generator base] IsA--> [base],[code generator misc] IsA--> [misc],[col pivot decomposition householder column] IsA--> [column],[column switch] IsA--> [switch],[common ops check input shape] IsA--> [shape],[common ops conjugate object] IsA--> [object],[common ops conjugate] IsA--> [conjugate],[common ops count] IsA--> [count],[common ops extract object] IsA--> [object],[common ops extract] IsA--> [extract],[common ops get element divide] IsA--> [divide],[common ops get element max magnitude] IsA--> [magnitude],[common ops get multiple add transpose b] IsA--> [b],[common ops get multiple transpose b] IsA--> [b],[common ops matrix] IsA--> [matrix],[complex f times] object---> [],[complex f] divide---> [object],[complex f] HasProperty---> [complex f],[complex f] HasProperty---> [imaginary],[complex f] HasProperty---> [magnitude],[complex f] HasProperty---> [minus],[complex f] HasProperty---> [object],[complex f] HasProperty---> [plus],[complex f] HasProperty---> [real],[complex f] is---> [real],[complex math f conjugate object] IsA--> [object],[complex math f divide object] IsA--> [object],[complex math f] convert---> [object],[complex math f] HasProperty---> [minus],[complex math f] HasProperty---> [plus],[complex math f] HasProperty---> [pow],[complex math f] HasProperty---> [root],[complex math f] multiply---> [object],[complex polar f] HasProperty---> [complex polar f],[complex polar f] HasProperty---> [r],[complex polar f] HasProperty---> [theta],[compute house holder col] IsA--> [col],[compute house holder row] IsA--> [row],[compute v block vector] IsA--> [vector],[compute width row] IsA--> [row],[condition p] IsA--> [p],[conjugate object] IsA--> [object],[constructor cmatrix] IsA--> [cmatrix],[constructor d array] IsA--> [array],[constructor shape] IsA--> [shape],[copy object] IsA--> [object],[copy submatrix matrix case] IsA--> [case],[copy submatrix scalar case] IsA--> [case],[covariance ops] is---> [valid fast],[covariance ops] is---> [valid],[covariance random draw] compute---> [likelihood p],[covariance random draw] HasProperty---> [covariance random draw],[createing r] IsA--> [r],[csv] serialized---> [binary],[d check block matrix] IsA--> [matrix],[d check identity null] IsA--> [null],[d check sub house] IsA--> [house],[d check sub matrix] IsA--> [matrix],[d decompose object] IsA--> [object],[d invert object] IsA--> [object],[d matrix f times] object---> [],[d matrix f] HasProperty---> [data],[d matrix f] HasProperty---> [index],[d matrix f] HasProperty---> [minus],[d matrix f] HasProperty---> [number columns],[d matrix f] HasProperty---> [number rows],[d matrix f] HasProperty---> [object],[d matrix f] HasProperty---> [plus],[d matrix f] reshape---> [object],[d matrix] IsA--> [matrix],[d native] IsA--> [native],[d submatrix f] HasProperty---> [columns],[d submatrix f] HasProperty---> [d submatrix f],[d submatrix f] HasProperty---> [object],[d submatrix f] HasProperty---> [print],[d submatrix f] HasProperty---> [rows],[d submatrix] IsA--> [submatrix],[d test h] IsA--> [h],[d test inverse] IsA--> [inverse],[d test quality scale] IsA--> [scale],[d test] IsA--> [test],[dand h] IsA--> [h],[data length] IsA--> [length],[data width] IsA--> [width],[data wta] IsA--> [wta],[debug qr debug qr] IsA--> [qr],[debug qr] convert---> [to column major],[debug qr] update---> [a],[decomposition bi] IsA--> [bi],[decomposition factory] decompose---> [safe],[decomposition factory] HasProperty---> [eigenvalue],[decomposition factory] HasProperty---> [lu],[decomposition factory] HasProperty---> [quality],[decomposition factory] IsA--> [factory],[decomposition householder column cd] IsA--> [cd],[decomposition householder column d set expected max size] IsA--> [size],[decomposition householder column] IsA--> [column],[decomposition householder] IsA--> [householder],[decomposition interface check] IsA--> [check],[decomposition interface] IsA--> [interface],[decomposition ldl] IsA--> [ldl],[decomposition qrp] IsA--> [qrp],[decomposition shape] IsA--> [shape],[dense d matrix f] create---> [like],[dense d matrix f] HasProperty---> [number columns],[dense d matrix f] HasProperty---> [number elements],[dense d matrix f] HasProperty---> [number rows],[dense d matrix f] HasProperty---> [object],[dense d matrix f] HasProperty---> [print],[dense d matrix f] reshape---> [object],[dense d matrix] IsA--> [matrix],[dense matrix boolean copy object] IsA--> [object],[dense matrix boolean set get row col] IsA--> [col],[dense matrix boolean] create---> [like],[dense matrix boolean] HasProperty---> [object],[dense matrix boolean] HasProperty---> [print],[dense matrix boolean] is---> [in bounds],[dense matrix boolean] reshape---> [object],[dense matrix f copy object] IsA--> [object],[dense matrix f extract object] IsA--> [object],[dense matrix f] add---> [object],[dense matrix f] create---> [like],[dense matrix f] HasProperty---> [index],[dense matrix f] HasProperty---> [number elements],[dense matrix f] HasProperty---> [object],[dense matrix f] HasProperty---> [print],[dense matrix f] HasProperty---> [zero],[dense matrix f] is---> [in bounds],[dense matrix f] reshape---> [object],[dense matrix f] wrap---> [object],[determinant from minor open] add---> [],[determinant from minor open] remove---> [],[determinant from minor] compute---> [object],[determinant from minor] create---> [minor],[determinant from minor] HasProperty---> [determinant from minor],[determinant from minor] put---> [into open],[dimension check] IsA--> [check],[dimension exception] IsA--> [exception],[divide elements brow] IsA--> [brow],[divide object] IsA--> [object],[double step qr decomposition d] IsA--> [d],[double step qr decomposition] IsA--> [decomposition],[double step qr eigenvalue] IsA--> [eigenvalue],[double step qr eigenvector move] IsA--> [move],[double step qr eigenvector] IsA--> [eigenvector],[double step qr watch] IsA--> [watch],[double step qr] IsA--> [qr],[dummy solver invert] IsA--> [invert],[dummy solver] HasProperty---> [a],[dummy solver] HasProperty---> [decomposition],[dummy solver] HasProperty---> [dummy solver],[dummy solver] HasProperty---> [quality],[dummy solver] IsA--> [solver],[dummy solver] modifies---> [a],[dummy solver] modifies---> [b],[dummy solver] solve---> [object],[dummy] decompose---> [lower],[dummy] HasProperty---> [dummy],[dummy] HasProperty---> [input modified],[dummy] HasProperty---> [number columns],[dummy] HasProperty---> [number of singular values],[dummy] HasProperty---> [number rows],[dummy] HasProperty---> [singular values],[dummy] HasProperty---> [update],[dummy] HasProperty---> [v],[dummy] HasProperty---> [width],[dummy] is---> [compact],[eigenvalue bb x] IsA--> [x],[eigenvalue helper copy diagonal] IsA--> [diagonal],[eigenvalue move] IsA--> [move],[eigenvalue ops bound largest eigenvalue value markov] IsA--> [markov],[eigenvalue ops] bound---> [largest eigenvalue value],[eigenvalue ops] create---> [matrix d],[eigenvalue ops] create---> [matrix v],[eigenvalue power method check] converged---> [],[eigenvalue power method check] IsA--> [check],[eigenvalue power method] compute---> [direct],[eigenvalue power method] compute---> [shift direct],[eigenvalue power method] compute---> [shift invert],[eigenvalue power method] HasProperty---> [eigenvalue power method],[eigenvalue power method] HasProperty---> [options],[eigenvalue power method] HasProperty---> [seed],[eigenvalue small] HasProperty---> [value x fast],[eigenvalue small] HasProperty---> [value x],[eigenvalue watched double step qr eigenvalue] IsA--> [eigenvalue],[eigenvalue x] IsA--> [x],[ejml unit] tests---> [assert countable],[ejml unit] tests---> [assert equals transpose],[ejml unit] tests---> [assert equals uncountable],[ejml unit] tests---> [assert equals],[ejml unit] tests---> [assert shape],[ejml unit] tests---> [assert true],[element diagonal max magnitude] IsA--> [magnitude],[element div vector] IsA--> [vector],[element max magnitude] IsA--> [magnitude],[element p] IsA--> [p],[element power mm] IsA--> [mm],[element power sm] IsA--> [sm],[element sum sq] IsA--> [sq],[equation check] IsA--> [check],[equation custom function] create---> [multiple transpose a],[equation custom function] HasProperty---> [main],[equation custom function] IsA--> [function],[equation custom] IsA--> [custom],[equation insert] IsA--> [insert],[equation parse macro input] IsA--> [input],[equation parse parameter comma] IsA--> [comma],[equation parse submatrix] IsA--> [submatrix],[equation parse] assign---> [range],[equation parse] combine---> [integer lists],[equation process] IsA--> [process],[equation] add---> [sub matrix variables],[equation] compile---> [object],[equation] create---> [function],[equation] create---> [op],[equation] create---> [variable inferred],[equation] handle---> [parentheses],[equation] HasProperty---> [alias],[equation] HasProperty---> [equation],[equation] HasProperty---> [lookup double],[equation] HasProperty---> [lookup integer],[equation] HasProperty---> [lookup macro],[equation] HasProperty---> [lookup matrix],[equation] HasProperty---> [lookup variable],[equation] is---> [letter],[equation] is---> [operator lr],[equation] is---> [reserved],[equation] is---> [symbol],[equation] is---> [target op],[equation] is---> [variable integer],[equation] parse---> [block no parentheses],[equation] parse---> [bracket create matrix],[equation] parse---> [integer lists],[equation] parse---> [macro input],[equation] parse---> [macro],[equation] parse---> [negative op],[equation] parse---> [operations lower],[equation] parse---> [operations lr],[equation] replace---> [sequence],[error check] IsA--> [check],[error membership] IsA--> [membership],[example complex math] HasProperty---> [main],[example complex math] IsA--> [math],[example equation] IsA--> [equation],[example matrix io] HasProperty---> [main],[example matrix io] IsA--> [io],[example matrix io] serialized---> [binary],[example simple] IsA--> [simple],[example] fixed---> [sized matrix get main],[exception shift] IsA--> [shift],[expected max size] IsA--> [size],[explicit] has---> [next],[explicit] HasProperty---> [length],[explicit] HasProperty---> [sequence],[explicit] HasProperty---> [type],[explicit] requires---> [max index],[extract object] IsA--> [object],[f copy object] IsA--> [object],[f extract object] IsA--> [object],[f test construactorfloat array] IsA--> [array],[f test constructor copy] IsA--> [copy],[f test constructor shape] IsA--> [shape],[f test set matrix] IsA--> [matrix],[f wrap object] IsA--> [object],[fast element p] IsA--> [p],[fast norm p] IsA--> [p],[filter equation] IsA--> [equation],[fixed matrix f copy object] IsA--> [object],[fixed matrix n] IsA--> [n],[fixed matrix nx n] IsA--> [n],[fixed matrix x f copy object] IsA--> [object],[fixed ops change sign vector] IsA--> [vector],[fixed ops extract column] IsA--> [column],[fixed ops extract row] IsA--> [row],[fixed ops get multiple transpose b] IsA--> [b],[fixed ops trace] IsA--> [trace],[foo process] IsA--> [process],[for] has---> [next],[for] HasProperty---> [end],[for] HasProperty---> [length],[for] HasProperty---> [start],[for] HasProperty---> [step],[for] HasProperty---> [type],[for] requires---> [max index],[function n] IsA--> [n],[general eigenvalue decomposition check check with some] repeated---> [values symmetric],[general eigenvalue decomposition check check] IsA--> [check],[general eigenvalue decomposition check check] known---> [complex],[general eigenvalue decomposition check check] known---> [real just value],[general eigenvalue decomposition check check] known---> [real],[general eigenvalue decomposition check check] known---> [symmetric just value],[general eigenvalue decomposition check] check---> [all zeros],[general eigenvalue decomposition check] check---> [large value],[general eigenvalue decomposition check] create---> [decomposition],[general eigenvalue decomposition check] IsA--> [check],[general eigenvalue decomposition check] perform---> [standard tests],[general eigenvalue decomposition] IsA--> [decomposition],[general lu decomposition checks cd test decomposition square] IsA--> [square],[general lu decomposition checks cd] create---> [object],[general lu decomposition checks test] modified---> [input],[general lu decomposition checks] cd---> [get lower get upper],[general lu decomposition checks] cd---> [get zero matrix],[general lu decomposition checks] cd---> [test all real],[general lu decomposition checks] cd---> [test decomposition square imaginary],[general lu decomposition checks] cd---> [test decomposition square real],[general lu decomposition checks] cd---> [test decomposition square],[general lu decomposition checks] cd---> [test fat],[general lu decomposition checks] cd---> [test modified input],[general lu decomposition checks] cd---> [test nearly singular],[general lu decomposition checks] cd---> [test singular],[general lu decomposition checks] cd---> [test tall],[general lu decomposition checks] create---> [object],[general lu decomposition checks] HasProperty---> [lower get upper],[general lu decomposition checks] HasProperty---> [zero matrix],[general reduced row echelon form checks test format] IsA--> [format],[general reduced row echelon form checks test solution] IsA--> [solution],[general reduced row echelon] IsA--> [echelon],[general] reduced---> [row echelon form checks check format random],[general] reduced---> [row echelon form checks check rref],[general] reduced---> [row echelon form checks check solution random],[general] reduced---> [row echelon form checks get general reduced row echelon form checks],[general] reduced---> [row echelon form checks get spot tests],[general] reduced---> [row echelon form checks test format],[general] reduced---> [row echelon form checks test singular],[general] reduced---> [row echelon form checks test solution],[generator base] IsA--> [base],[generator block inner multiplication get print multiple transpose b] IsA--> [b],[generator block inner multiplication] create---> [class],[generator block inner multiplication] create---> [header],[generator block inner multiplication] create---> [op string],[generator block inner multiplication] HasProperty---> [generator block inner multiplication],[generator block inner multiplication] HasProperty---> [main],[generator block inner multiplication] HasProperty---> [print multiple transpose a],[generator block inner multiplication] HasProperty---> [print multiple transpose b],[generator block inner multiplication] HasProperty---> [print multiple],[generator block inner multiplication] HasProperty---> [print top],[generator block inner] IsA--> [inner],[generator c matrix matrix multiple] create---> [class],[generator c matrix matrix multiple] handle---> [zeros],[generator c matrix matrix multiple] HasProperty---> [generator c matrix matrix multiple],[generator c matrix matrix multiple] HasProperty---> [main],[generator c matrix matrix multiple] HasProperty---> [print multiple reroder],[generator c matrix matrix multiple] HasProperty---> [print multiple small],[generator c matrix matrix multiple] HasProperty---> [print multiple transpose a reorder],[generator c matrix matrix multiple] HasProperty---> [print multiple transpose a small],[generator c matrix matrix multiple] HasProperty---> [print multiple transpose ab aux],[generator c matrix matrix multiple] HasProperty---> [print multiple transpose ab],[generator c matrix matrix multiple] HasProperty---> [print multiple transpose b],[generator c matrix matrix multiple] make---> [bounds check],[generator c matrix matrix multiple] make---> [header],[generator matrix matrix multiple get print multiple transpose b] IsA--> [b],[generator matrix matrix multiple] create---> [class],[generator matrix matrix multiple] handle---> [zeros],[generator matrix matrix multiple] HasProperty---> [generator matrix matrix multiple],[generator matrix matrix multiple] HasProperty---> [main],[generator matrix matrix multiple] HasProperty---> [print multiple aux],[generator matrix matrix multiple] HasProperty---> [print multiple reroder],[generator matrix matrix multiple] HasProperty---> [print multiple small],[generator matrix matrix multiple] HasProperty---> [print multiple transpose a reorder],[generator matrix matrix multiple] HasProperty---> [print multiple transpose a small],[generator matrix matrix multiple] HasProperty---> [print multiple transpose ab aux],[generator matrix matrix multiple] HasProperty---> [print multiple transpose ab],[generator matrix matrix multiple] HasProperty---> [print multiple transpose b],[generator matrix matrix multiple] make---> [bounds check],[generator matrix matrix multiple] make---> [comment],[generator matrix matrix multiple] make---> [header],[generator matrix matrix] IsA--> [matrix],[generic bidiagonal check test identity] IsA--> [identity],[generic bidiagonal check test] IsA--> [test],[generic bidiagonal check test] modified---> [input],[generic bidiagonal check] create---> [qr decomposition],[generic block qr decomposition tests] apply---> [quality transpose],[generic block qr decomposition tests] apply---> [quality],[generic block qr decomposition tests] check---> [full decomposition],[generic block qr decomposition tests] check---> [internal data],[generic block qr decomposition tests] check---> [size],[generic block qr decomposition tests] HasProperty---> [generic block qr decomposition tests],[generic block qr] IsA--> [qr],[generic c linear solver checks check quality scale] IsA--> [scale],[generic c linear solver checks] check---> [quality scale],[generic c linear solver checks] check---> [quality],[generic c linear solver checks] create---> [poly a],[generic c linear solver checks] create---> [safe solver],[generic c linear solver checks] create---> [solver],[generic c linear solver checks] HasProperty---> [inverse],[generic c linear solver checks] modifies---> [a],[generic c linear solver checks] modifies---> [b],[generic c linear solver checks] solve---> [dimension check],[generic cholesky tests cd check] modify---> [input],[generic cholesky tests cd] create---> [object],[generic cholesky tests cd] fail---> [zeros],[generic cholesky tests cd] IsA--> [cd],[generic cholesky tests d check determinant] IsA--> [determinant],[generic cholesky tests d test] decompose---> [lower],[generic cholesky tests d test] decompose---> [r],[generic cholesky tests d] create---> [object],[generic cholesky tests d] HasProperty---> [t],[generic cholesky tests] cd---> [test not positive definite],[generic linear solver checks] check---> [quality scale],[generic linear solver checks] check---> [quality],[generic linear solver checks] create---> [poly a],[generic linear solver checks] create---> [safe solver],[generic linear solver checks] create---> [solver],[generic linear solver checks] HasProperty---> [inverse],[generic linear solver checks] modifies---> [a],[generic linear solver checks] modifies---> [b],[generic linear solver checks] solve---> [dimension check],[generic matrix ops] copy---> [object],[generic matrix ops] is---> [equivalent triangle],[generic matrix ops] is---> [equivalent],[generic matrix ops] is---> [identity],[generic qr check cd check] HasProperty---> [null versus not],[generic qr check cd check] HasProperty---> [r input size],[generic qr check cd check] IsA--> [check],[generic qr check cd test] modified---> [input],[generic qr check cd] create---> [qr decomposition],[generic qr check cd] HasProperty---> [decomposition shape],[generic qr check cd] IsA--> [cd],[generic qr check d check decomposition] IsA--> [decomposition],[generic qr check d check] HasProperty---> [null versus not],[generic qr check d check] HasProperty---> [r input size],[generic qr check d test] modified---> [input],[generic qr check d] create---> [qr decomposition],[generic qr check d] HasProperty---> [decomposition shape],[generic qr check] IsA--> [check],[generic tests d matrix f test set and] HasProperty---> [d],[generic tests d matrix f test] reshape---> [],[generic tests d matrix f] create---> [matrix],[generic tests d matrix] IsA--> [matrix],[generic tests matrix f check set and] HasProperty---> [],[generic tests matrix f check set and] HasProperty---> [unsafe],[generic tests matrix f test set and] HasProperty---> [d unsafe],[generic tests matrix f test set and] HasProperty---> [d],[generic tests matrix f test] HasProperty---> [number columns],[generic tests matrix f test] HasProperty---> [number rows],[generic tests matrix f] create---> [matrix],[generic] solve---> [pseudo inverse checks get generic solve pseudo inverse checks],[generic] solve---> [pseudo inverse checks get singular inv],[generic] solve---> [pseudo inverse checks get singular solve],[generic] solve---> [pseudo inverse checks get zero matrix],[gracefully] handle---> [bad code],[helper d] IsA--> [d],[hessenberg similar decomposition cd] decompose---> [object],[hessenberg similar decomposition cd] HasProperty---> [gammas],[hessenberg similar decomposition cd] HasProperty---> [h],[hessenberg similar decomposition cd] HasProperty---> [input modified],[hessenberg similar decomposition cd] HasProperty---> [qh],[hessenberg similar decomposition cd] HasProperty---> [quality],[hessenberg similar decomposition d] decompose---> [object],[hessenberg similar decomposition d] HasProperty---> [gammas],[hessenberg similar decomposition d] HasProperty---> [h],[hessenberg similar decomposition d] HasProperty---> [input modified],[hessenberg similar decomposition d] HasProperty---> [qh],[hessenberg similar decomposition d] HasProperty---> [quality],[hessenberg stress test] IsA--> [test],[holder solver test invert] IsA--> [invert],[holder solver test quality] IsA--> [quality],[house cd] IsA--> [cd],[house col cd] IsA--> [cd],[house col] IsA--> [col],[house holder solver] IsA--> [solver],[house holder] IsA--> [holder],[house transpose] IsA--> [transpose],[householder column cd] IsA--> [cd],[householder column] IsA--> [column],[householder row] IsA--> [row],[householder transpose] IsA--> [transpose],[householder vector] IsA--> [vector],[identity rect] IsA--> [rect],[implicit qr algorithm check] IsA--> [check],[implicit qr algorithm process object] IsA--> [object],[implicit qr algorithm set max value] IsA--> [value],[implicit qr algorithm] IsA--> [algorithm],[implied common ops matrix] IsA--> [matrix],[induced p infinite] IsA--> [infinite],[inline block] IsA--> [block],[inner cholesky b] HasProperty---> [upper],[inner cholesky b] IsA--> [b],[inner multiplication check] IsA--> [check],[inner multiplication test] IsA--> [test],[inner prod h] IsA--> [h],[inner prod reorder] IsA--> [reorder],[inner prod] transpose---> [a],[inner triangular solver check] IsA--> [check],[inner triangular solver invert] IsA--> [invert],[input n] IsA--> [n],[insert quality] IsA--> [quality],[integer integer] IsA--> [integer],[integer sequence case] IsA--> [case],[integer sequence check] IsA--> [check],[integer sequence] IsA--> [sequence],[invert object] IsA--> [object],[invert using solve invert object] IsA--> [object],[invert] using---> [solve invert object],[item] HasProperty---> [columns],[item] HasProperty---> [item],[item] HasProperty---> [matrix],[item] HasProperty---> [rows],[item] HasProperty---> [value],[item] initialize---> [object],[jacobian test function] compute---> [object],[kalman filter equation] configure---> [object],[kalman filter equation] predict---> [object],[kalman filter equation] update---> [object],[kalman filter operations] configure---> [object],[kalman filter operations] predict---> [object],[kalman filter operations] update---> [object],[kalman filter simple set state] IsA--> [state],[kalman filter simple] HasProperty---> [covariance],[kalman filter simple] HasProperty---> [state],[kalman filter simple] IsA--> [simple],[kalman filter simple] predict---> [object],[kalman filter simple] update---> [object],[kron matrix matrix] IsA--> [matrix],[largest eigenvalue value markov] IsA--> [markov],[levenberg marquardt test] IsA--> [test],[levenberg marquardt] compute---> [a],[levenberg marquardt] compute---> [dand h],[levenberg marquardt] compute---> [object],[levenberg marquardt] HasProperty---> [cost],[levenberg marquardt] HasProperty---> [final cost],[levenberg marquardt] HasProperty---> [initial cost],[levenberg marquardt] IsA--> [marquardt],[levenberg marquardt] optimize---> [object],[likelihood p] IsA--> [p],[line number] IsA--> [number],[linear solver abstract cd invert object] IsA--> [object],[linear solver abstract cd] HasProperty---> [a],[linear solver abstract d invert object] IsA--> [object],[linear solver abstract d] HasProperty---> [a],[linear solver b to d invert object] IsA--> [object],[linear solver b to d] HasProperty---> [a],[linear solver b to d] HasProperty---> [decomposition],[linear solver b to d] HasProperty---> [quality],[linear solver b to d] modifies---> [a],[linear solver b to d] modifies---> [b],[linear solver b to d] solve---> [object],[linear solver chol b] IsA--> [b],[linear solver chol b] solve---> [object],[linear solver chol cd invert object] IsA--> [object],[linear solver chol cd] HasProperty---> [a],[linear solver chol cd] HasProperty---> [decomposition],[linear solver chol cd] HasProperty---> [quality],[linear solver chol cd] HasProperty---> [to inverse lower],[linear solver chol cd] IsA--> [cd],[linear solver chol cd] modifies---> [a],[linear solver chol cd] modifies---> [b],[linear solver chol cd] solve---> [internal lower],[linear solver chol cd] solve---> [object],[linear solver chol d invert object] IsA--> [object],[linear solver chol d] HasProperty---> [a],[linear solver chol d] HasProperty---> [decomposition],[linear solver chol d] HasProperty---> [quality],[linear solver chol d] HasProperty---> [to inverse lower],[linear solver chol d] IsA--> [d],[linear solver chol d] modifies---> [a],[linear solver chol d] modifies---> [b],[linear solver chol d] solve---> [internal lower],[linear solver chol d] solve---> [object],[linear solver chol ldl d invert object] IsA--> [object],[linear solver chol ldl d] HasProperty---> [a],[linear solver chol ldl d] HasProperty---> [decomposition],[linear solver chol ldl d] HasProperty---> [quality],[linear solver chol ldl d] IsA--> [d],[linear solver chol ldl d] modifies---> [a],[linear solver chol ldl d] modifies---> [b],[linear solver chol ldl d] solve---> [internal],[linear solver chol ldl d] solve---> [object],[linear solver chol ldl] IsA--> [ldl],[linear solver chol] IsA--> [chol],[linear solver factory] HasProperty---> [general],[linear solver factory] HasProperty---> [least squares qr pivot],[linear solver factory] HasProperty---> [least squares],[linear solver factory] HasProperty---> [lu],[linear solver factory] HasProperty---> [pseudo inverse],[linear solver factory] IsA--> [factory],[linear solver lu base cd] HasProperty---> [a],[linear solver lu base cd] HasProperty---> [decomposition],[linear solver lu base cd] HasProperty---> [quality],[linear solver lu base cd] IsA--> [cd],[linear solver lu base cd] modifies---> [a],[linear solver lu base cd] modifies---> [b],[linear solver lu base d invert object] IsA--> [object],[linear solver lu base d test improve sol noharm] IsA--> [noharm],[linear solver lu base d] HasProperty---> [a],[linear solver lu base d] HasProperty---> [decomposition],[linear solver lu base d] HasProperty---> [quality],[linear solver lu base d] improve---> [sol],[linear solver lu base d] IsA--> [d],[linear solver lu base d] modifies---> [a],[linear solver lu base d] modifies---> [b],[linear solver lu base] IsA--> [base],[linear solver lu cd test] IsA--> [test],[linear solver lu cd] IsA--> [cd],[linear solver lu cd] solve---> [object],[linear solver lu d] IsA--> [d],[linear solver lu d] solve---> [object],[linear solver lu kji d] HasProperty---> [a],[linear solver lu kji d] IsA--> [d],[linear solver lu kji d] solve---> [object],[linear solver lu kji] IsA--> [kji],[linear solver lu] IsA--> [lu],[linear solver qr block d] IsA--> [d],[linear solver qr cd test] IsA--> [test],[linear solver qr cd] HasProperty---> [a],[linear solver qr cd] HasProperty---> [decomposer],[linear solver qr cd] HasProperty---> [decomposition],[linear solver qr cd] HasProperty---> [max size],[linear solver qr cd] HasProperty---> [quality],[linear solver qr cd] HasProperty---> [r],[linear solver qr cd] IsA--> [cd],[linear solver qr cd] modifies---> [a],[linear solver qr cd] modifies---> [b],[linear solver qr cd] solve---> [object],[linear solver qr d set max size] IsA--> [size],[linear solver qr d] HasProperty---> [a],[linear solver qr d] HasProperty---> [decomposer],[linear solver qr d] HasProperty---> [decomposition],[linear solver qr d] HasProperty---> [max size],[linear solver qr d] HasProperty---> [quality],[linear solver qr d] HasProperty---> [r],[linear solver qr d] IsA--> [d],[linear solver qr d] modifies---> [a],[linear solver qr d] modifies---> [b],[linear solver qr d] solve---> [object],[linear solver qr house cd set max size] IsA--> [size],[linear solver qr house cd] HasProperty---> [a],[linear solver qr house cd] HasProperty---> [decomposition],[linear solver qr house cd] HasProperty---> [max size],[linear solver qr house cd] HasProperty---> [quality],[linear solver qr house cd] IsA--> [cd],[linear solver qr house cd] modifies---> [a],[linear solver qr house cd] modifies---> [b],[linear solver qr house cd] solve---> [object],[linear solver qr house col cd set max size] IsA--> [size],[linear solver qr house col cd] HasProperty---> [a],[linear solver qr house col cd] HasProperty---> [decomposition],[linear solver qr house col cd] HasProperty---> [max size],[linear solver qr house col cd] HasProperty---> [quality],[linear solver qr house col cd] IsA--> [cd],[linear solver qr house col cd] modifies---> [a],[linear solver qr house col cd] modifies---> [b],[linear solver qr house col cd] solve---> [object],[linear solver qr house col d set max size] IsA--> [size],[linear solver qr house col d] HasProperty---> [a],[linear solver qr house col d] HasProperty---> [decomposition],[linear solver qr house col d] HasProperty---> [max size],[linear solver qr house col d] HasProperty---> [quality],[linear solver qr house col d] IsA--> [d],[linear solver qr house col d] modifies---> [a],[linear solver qr house col d] modifies---> [b],[linear solver qr house col d] solve---> [object],[linear solver qr house col] IsA--> [col],[linear solver qr house d set max size] IsA--> [size],[linear solver qr house d] HasProperty---> [a],[linear solver qr house d] HasProperty---> [decomposition],[linear solver qr house d] HasProperty---> [max size],[linear solver qr house d] HasProperty---> [quality],[linear solver qr house d] IsA--> [d],[linear solver qr house d] modifies---> [a],[linear solver qr house d] modifies---> [b],[linear solver qr house d] solve---> [object],[linear solver qr house transpose cd set max size] IsA--> [size],[linear solver qr house transpose d] HasProperty---> [a],[linear solver qr house transpose d] HasProperty---> [decomposition],[linear solver qr house transpose d] HasProperty---> [max size],[linear solver qr house transpose d] HasProperty---> [quality],[linear solver qr house transpose d] IsA--> [d],[linear solver qr house transpose d] modifies---> [a],[linear solver qr house transpose d] modifies---> [b],[linear solver qr house transpose d] solve---> [object],[linear solver qr house transpose] IsA--> [transpose],[linear solver qr house] IsA--> [house],[linear solver qr house] transpose---> [cd get decomposition],[linear solver qr house] transpose---> [cd get quality],[linear solver qr house] transpose---> [cd modifies a],[linear solver qr house] transpose---> [cd modifies b],[linear solver qr house] transpose---> [cd set a],[linear solver qr house] transpose---> [cd set max size],[linear solver qr house] transpose---> [cd solve object],[linear solver qr house] transpose---> [cd],[linear solver qr] IsA--> [qr],[linear solver qrp house col d check] IsA--> [check],[linear solver qrp house col d] IsA--> [d],[linear solver qrp house col d] modifies---> [a],[linear solver qrp house col d] modifies---> [b],[linear solver qrp house col d] solve---> [object],[linear solver qrp house col] IsA--> [col],[linear solver qrp house] IsA--> [house],[linear solver qrp] IsA--> [qrp],[linear solver safe t] extends---> [reshape matrix],[linear solver unrolled] HasProperty---> [decomposition],[linear solver unrolled] HasProperty---> [quality],[linear solver unrolled] modifies---> [a],[linear solver unrolled] modifies---> [b],[linear solver unrolled] solve---> [object],[load bin] IsA--> [bin],[load csv] IsA--> [csv],[log matrix] IsA--> [matrix],[lookup element] IsA--> [element],[lookup integer] IsA--> [integer],[lookup macro] IsA--> [macro],[lookup matrix] IsA--> [matrix],[lookup variable] IsA--> [variable],[lower transpose b] IsA--> [b],[lt null] IsA--> [null],[lu base] IsA--> [base],[lu decomposition alt cd] decompose---> [object],[lu decomposition alt cd] HasProperty---> [mag],[lu decomposition alt cd] IsA--> [cd],[lu decomposition alt d] decompose---> [object],[lu decomposition base cd] compute---> [determinant],[lu decomposition base cd] decompose---> [common initial],[lu decomposition base cd] HasProperty---> [expected max size],[lu decomposition base cd] HasProperty---> [index],[lu decomposition base cd] HasProperty---> [input modified],[lu decomposition base cd] HasProperty---> [lower],[lu decomposition base cd] HasProperty---> [lu],[lu decomposition base cd] HasProperty---> [pivot],[lu decomposition base cd] HasProperty---> [quality],[lu decomposition base cd] HasProperty---> [upper],[lu decomposition base cd] HasProperty---> [vv],[lu decomposition base cd] is---> [singular],[lu decomposition base cd] IsA--> [cd],[lu decomposition base cd] solve---> [lower],[lu decomposition base cd] solve---> [vector internal],[lu decomposition base d] compute---> [determinant],[lu decomposition base d] decompose---> [common initial],[lu decomposition base d] HasProperty---> [expected max size],[lu decomposition base d] HasProperty---> [index],[lu decomposition base d] HasProperty---> [input modified],[lu decomposition base d] HasProperty---> [lower],[lu decomposition base d] HasProperty---> [lu],[lu decomposition base d] HasProperty---> [pivot],[lu decomposition base d] HasProperty---> [quality],[lu decomposition base d] HasProperty---> [upper],[lu decomposition base d] HasProperty---> [vv],[lu decomposition base d] is---> [singular],[lu decomposition base d] solve---> [vector internal],[lu decomposition base] IsA--> [base],[lu decomposition nr cd] decompose---> [object],[lu decomposition nr cd] IsA--> [cd],[lu decomposition nr d] decompose---> [object],[lu decomposition nr] IsA--> [nr],[lu decomposition] IsA--> [decomposition],[lu kji] IsA--> [kji],[macro] create---> [operation],[macro] execute---> [object],[manager functions] add---> [built in],[manager functions] add---> [object],[manager functions] create---> [object],[manager functions] HasProperty---> [manager functions],[manager functions] HasProperty---> [manager temp],[manager functions] is---> [function name],[manager temp variables] create---> [double],[manager temp variables] create---> [integer sequence],[manager temp variables] create---> [integer],[manager temp variables] create---> [matrix],[manager temp] IsA--> [temp],[marquardt configure object] IsA--> [object],[mat scalar] IsA--> [scalar],[matrix component paint object] IsA--> [object],[matrix component] HasProperty---> [matrix component],[matrix component] render---> [matrix],[matrix constructor set to required size matrix] IsA--> [matrix],[matrix constructor set to required size scalar] IsA--> [scalar],[matrix constructor] add---> [to row],[matrix constructor] HasProperty---> [end row],[matrix constructor] HasProperty---> [matrix constructor],[matrix constructor] HasProperty---> [output],[matrix constructor] HasProperty---> [to required size],[matrix constructor] IsA--> [constructor],[matrix csv] IsA--> [csv],[matrix d] IsA--> [d],[matrix dimension exception] HasProperty---> [matrix dimension exception],[matrix dimension exception] IsA--> [exception],[matrix features] has---> [na n],[matrix features] has---> [uncountable],[matrix features] HasProperty---> [nullity],[matrix features] HasProperty---> [rank],[matrix features] is---> [constant value],[matrix features] is---> [diagonal positive],[matrix features] is---> [equals triangle],[matrix features] is---> [equals],[matrix features] is---> [full rank],[matrix features] is---> [identical],[matrix features] is---> [identity],[matrix features] is---> [inverse],[matrix features] is---> [lower triangle],[matrix features] is---> [negative],[matrix features] is---> [orthogonal],[matrix features] is---> [positive definite],[matrix features] is---> [positive semidefinite],[matrix features] is---> [rows linear independent],[matrix features] is---> [skew symmetric],[matrix features] is---> [square],[matrix features] is---> [symmetric],[matrix features] is---> [upper triangle],[matrix features] is---> [vector],[matrix features] is---> [zeros],[matrix io] HasProperty---> [load bin],[matrix io] HasProperty---> [load csv],[matrix io] HasProperty---> [print],[matrix io] IsA--> [io],[matrix io] save---> [bin],[matrix io] save---> [csv],[matrix iterator f] has---> [next],[matrix iterator f] HasProperty---> [index],[matrix iterator f] HasProperty---> [matrix iterator f],[matrix iterator f] HasProperty---> [object],[matrix iterator f] is---> [row major],[matrix iterator f] remove---> [object],[matrix matrix multiple d] HasProperty---> [multiple aux],[matrix matrix multiple d] HasProperty---> [multiple small],[matrix matrix] IsA--> [matrix],[matrix multiple check input instance] IsA--> [instance],[matrix multiple fixed block compute row x] IsA--> [x],[matrix multiple fixed block] compute---> [row x],[matrix multiple fixed block] HasProperty---> [multiple x],[matrix multiple quad] HasProperty---> [multiple quad],[matrix ops set identity] IsA--> [identity],[matrix ops set object] IsA--> [object],[matrix spd] IsA--> [spd],[matrix type check] IsA--> [check],[matrix visualization] IsA--> [visualization],[matrix visualization] show---> [object],[max array] IsA--> [array],[meas] dof---> [],[multiple block native] IsA--> [native],[multiple block set] IsA--> [set],[multiple check object] IsA--> [object],[multiple column switch] IsA--> [switch],[multiple fixed block insert object] IsA--> [object],[multiple parent wrap] IsA--> [wrap],[multiple r col] IsA--> [col],[multiple shape check matrix vector] IsA--> [vector],[multiple shape check] IsA--> [check],[multiple tranab column switch] IsA--> [switch],[multiple transpose b] IsA--> [b],[multiple transpose object] IsA--> [object],[multiplication check input] IsA--> [input],[multiplication transpose sub] IsA--> [sub],[my solver] HasProperty---> [decomposition],[my solver] HasProperty---> [quality],[my solver] modifies---> [a],[my solver] modifies---> [b],[my solver] solve---> [object],[naive determinant] HasProperty---> [leibniz],[norm eml] IsA--> [eml],[norm ops fast element p] IsA--> [p],[norm ops fast norm p] IsA--> [p],[norm ops] HasProperty---> [condition p],[norm ops] HasProperty---> [element p],[norm ops] HasProperty---> [norm f],[norm ops] HasProperty---> [norm p infinite],[norm ops] HasProperty---> [norm p],[norm ops] induced---> [p infinite],[norm ops] induced---> [p],[norm ops] normalize---> [f],[norm p infinite] IsA--> [infinite],[norm p] IsA--> [p],[norm solution] IsA--> [solution],[nullity threshold] IsA--> [threshold],[number cant] IsA--> [cant],[number columns t] IsA--> [t],[number rows t] IsA--> [t],[op string] IsA--> [string],[operation copy integer integer] IsA--> [integer],[operation copy matrix matrix] IsA--> [matrix],[operation copy] IsA--> [copy],[operation process] IsA--> [process],[operation] add---> [object],[operation] express---> [object],[operation] HasProperty---> [eye],[operation] HasProperty---> [matrix constructor],[operation] HasProperty---> [norm f],[operation] HasProperty---> [ones],[operation] HasProperty---> [operation],[operation] multiply---> [object],[operation] resize---> [object],[operation] solve---> [object],[operation] subtract---> [object],[ops benchmark] IsA--> [benchmark],[order array] IsA--> [array],[outer prod h] IsA--> [h],[output file] IsA--> [file],[p infinite] IsA--> [infinite],[parameter standard] IsA--> [standard],[parse error parse error] IsA--> [error],[parseing error] IsA--> [error],[permute array check permutation list] IsA--> [list],[permute array permute list] IsA--> [list],[permute array] create---> [list],[permute array] HasProperty---> [fact],[pinv matrix] IsA--> [matrix],[pinv scalar] IsA--> [scalar],[pivot decomposition householder column] IsA--> [column],[pivot set tolerance] IsA--> [tolerance],[polynomial fit fit] IsA--> [fit],[polynomial fit test noise] IsA--> [noise],[polynomial fit] HasProperty---> [coef],[polynomial fit] HasProperty---> [polynomial fit],[polynomial fit] remove---> [observation],[polynomial fit] remove---> [worst fit],[polynomial root finder check root] IsA--> [root],[polynomial root finder] find---> [roots],[polynomial root finder] IsA--> [finder],[positive definite invert covar] IsA--> [covar],[power integer integer] IsA--> [integer],[pref] compute---> [update],[pref] compute---> [v],[principal component analysis] add---> [sample],[principal component analysis] compute---> [basis],[principal component analysis] HasProperty---> [basis vector],[principal component analysis] HasProperty---> [eigenvalue to sample space],[principal component analysis] HasProperty---> [error membership],[principal component analysis] HasProperty---> [principal component analysis],[principal component analysis] HasProperty---> [response],[principal component analysis] HasProperty---> [sample to eigenvalue space],[principal component analysis] HasProperty---> [setup],[principal component analysis] IsA--> [analysis],[print class parameter] IsA--> [parameter],[print function inner] IsA--> [inner],[print function parameter] IsA--> [parameter],[print function] IsA--> [function],[print matrix] IsA--> [matrix],[print multiple transpose b] IsA--> [b],[print top] IsA--> [top],[process instance] IsA--> [instance],[process object] IsA--> [object],[pseudo inverse qrp d check] IsA--> [check],[pseudo inverse qrp d] IsA--> [d],[pseudo inverse svd check] IsA--> [check],[pseudo inverse svd invert object] IsA--> [object],[pseudo inverse svd test] IsA--> [test],[pseudo inverse] IsA--> [inverse],[qand r] IsA--> [r],[qr check cd check] IsA--> [check],[qr col pivot decomposition householder column d] decompose---> [object],[qr col pivot decomposition householder column d] HasProperty---> [expected max size],[qr col pivot decomposition householder column d] HasProperty---> [householder pivot],[qr col pivot decomposition householder column d] HasProperty---> [pivot matrix],[qr col pivot decomposition householder column d] HasProperty---> [pivots],[qr col pivot decomposition householder column d] HasProperty---> [quality],[qr col pivot decomposition householder column d] HasProperty---> [rank],[qr col pivot decomposition householder column d] HasProperty---> [setup pivot info],[qr col pivot decomposition householder column d] HasProperty---> [singular threshold],[qr col pivot decomposition householder column d] IsA--> [d],[qr col pivot decomposition householder column d] update---> [norms],[qr col pivot decomposition householder column] IsA--> [column],[qr decompose ultimate decompose object] IsA--> [object],[qr decomposition b to d] HasProperty---> [quality],[qr decomposition b to d] HasProperty---> [r],[qr decomposition householder b] apply---> [quality transpose],[qr decomposition householder b] apply---> [quality],[qr decomposition householder b] decompose---> [object],[qr decomposition householder b] HasProperty---> [input modified],[qr decomposition householder b] HasProperty---> [qr],[qr decomposition householder b] HasProperty---> [quality],[qr decomposition householder b] HasProperty---> [r],[qr decomposition householder b] HasProperty---> [save width],[qr decomposition householder b] HasProperty---> [setup],[qr decomposition householder b] HasProperty---> [width],[qr decomposition householder b] initialize---> [quality],[qr decomposition householder b] IsA--> [b],[qr decomposition householder b] update---> [a],[qr decomposition householder cd] decompose---> [object],[qr decomposition householder cd] HasProperty---> [common setup],[qr decomposition householder cd] HasProperty---> [expected max size],[qr decomposition householder cd] HasProperty---> [gammas],[qr decomposition householder cd] HasProperty---> [householder],[qr decomposition householder cd] HasProperty---> [input modified],[qr decomposition householder cd] HasProperty---> [qr],[qr decomposition householder cd] HasProperty---> [quality],[qr decomposition householder cd] HasProperty---> [r],[qr decomposition householder cd] IsA--> [cd],[qr decomposition householder column cd] convert---> [to column major],[qr decomposition householder column cd] decompose---> [object],[qr decomposition householder column cd] HasProperty---> [expected max size],[qr decomposition householder column cd] HasProperty---> [gammas],[qr decomposition householder column cd] HasProperty---> [householder],[qr decomposition householder column cd] HasProperty---> [input modified],[qr decomposition householder column cd] HasProperty---> [qr],[qr decomposition householder column cd] HasProperty---> [quality],[qr decomposition householder column cd] HasProperty---> [r],[qr decomposition householder column cd] IsA--> [cd],[qr decomposition householder column cd] update---> [a],[qr decomposition householder column d] convert---> [to column major],[qr decomposition householder column d] decompose---> [object],[qr decomposition householder column d] HasProperty---> [expected max size],[qr decomposition householder column d] HasProperty---> [gammas],[qr decomposition householder column d] HasProperty---> [householder],[qr decomposition householder column d] HasProperty---> [input modified],[qr decomposition householder column d] HasProperty---> [qr],[qr decomposition householder column d] HasProperty---> [quality],[qr decomposition householder column d] HasProperty---> [r],[qr decomposition householder column d] IsA--> [d],[qr decomposition householder column d] update---> [a],[qr decomposition householder column] IsA--> [column],[qr decomposition householder d create qr decomposition] IsA--> [decomposition],[qr decomposition householder d] decompose---> [object],[qr decomposition householder d] HasProperty---> [common setup],[qr decomposition householder d] HasProperty---> [expected max size],[qr decomposition householder d] HasProperty---> [gammas],[qr decomposition householder d] HasProperty---> [householder],[qr decomposition householder d] HasProperty---> [input modified],[qr decomposition householder d] HasProperty---> [qr],[qr decomposition householder d] HasProperty---> [quality],[qr decomposition householder d] HasProperty---> [r],[qr decomposition householder d] IsA--> [d],[qr decomposition householder d] update---> [a],[qr decomposition householder transpose cd set expected max size] IsA--> [size],[qr decomposition householder transpose d] apply---> [quality],[qr decomposition householder transpose d] apply---> [transpose quality],[qr decomposition householder transpose d] decompose---> [object],[qr decomposition householder transpose d] HasProperty---> [expected max size],[qr decomposition householder transpose d] HasProperty---> [gammas],[qr decomposition householder transpose d] HasProperty---> [householder],[qr decomposition householder transpose d] HasProperty---> [input modified],[qr decomposition householder transpose d] HasProperty---> [qr],[qr decomposition householder transpose d] HasProperty---> [quality],[qr decomposition householder transpose d] HasProperty---> [r],[qr decomposition householder transpose d] IsA--> [d],[qr decomposition householder transpose d] update---> [a],[qr decomposition householder transpose] IsA--> [transpose],[qr decomposition householder] IsA--> [householder],[qr decomposition householder] transpose---> [cd apply quality],[qr decomposition householder] transpose---> [cd apply transpose quality],[qr decomposition householder] transpose---> [cd decompose object],[qr decomposition householder] transpose---> [cd get gammas],[qr decomposition householder] transpose---> [cd get householder],[qr decomposition householder] transpose---> [cd get input modified],[qr decomposition householder] transpose---> [cd get qr],[qr decomposition householder] transpose---> [cd get quality],[qr decomposition householder] transpose---> [cd get r],[qr decomposition householder] transpose---> [cd set expected max size],[qr decomposition householder] transpose---> [cd update a],[qr decomposition householder] transpose---> [cd],[qr eigenvalue bulge double step qn] IsA--> [qn],[qr eigenvalue bulge single step qn] IsA--> [qn],[qr eigenvalue process object] IsA--> [object],[qr eigenvector process object] IsA--> [object],[qr example equation] decompose---> [object],[qr example equation] HasProperty---> [quality],[qr example equation] HasProperty---> [r],[qr example operations] decompose---> [object],[qr example operations] HasProperty---> [quality],[qr example operations] HasProperty---> [r],[qr example simple] HasProperty---> [quality],[qr example simple] HasProperty---> [r],[qr example] IsA--> [example],[qr helper] functions---> [cd compute row max],[qr helper] functions---> [cd compute tau gamma and divide],[qr helper] functions---> [cd divide elements],[qr helper] functions---> [cd extract column and max],[qr helper] functions---> [cd extract householder column],[qr helper] functions---> [cd extract householder row],[qr helper] functions---> [cd find max],[qr helper] functions---> [cd get mag],[qr helper] functions---> [cd get rank update multiple lower],[qr helper] functions---> [cd get rank update multiple r],[qr helper] functions---> [cd],[qr helper] functions---> [d compute tau and divide],[qr helper] functions---> [d divide elements bcol],[qr helper] functions---> [d divide elements brow],[qr helper] functions---> [d divide elements],[qr helper] functions---> [d find max],[qr helper] functions---> [d get rank update multiple lower],[qr helper] functions---> [d get rank update multiple r],[qr helper] functions---> [d],[qr house col cd test linear solver qr house col cd] IsA--> [cd],[qr house col cd] IsA--> [cd],[qr house col] IsA--> [col],[qr house holder solver block] IsA--> [block],[qr house holder solver invert object] IsA--> [object],[qr house holder solver] IsA--> [solver],[qr house holder] IsA--> [holder],[qr house transpose] IsA--> [transpose],[qr house] IsA--> [house],[qr update check insert] IsA--> [insert],[qr watch] IsA--> [watch],[qr] update---> [],[qr] update---> [apply first givens],[qr] update---> [apply later givens],[qr] update---> [compute remove givens],[qr] update---> [declare internal data],[qr] update---> [get update transpose],[qr] update---> [set qr],[qr] update---> [update insert quality],[qr] update---> [update remove quality],[qr] update---> [update remove r],[qrp house col d test solve linear solver qrp house col d] IsA--> [d],[quality eigenvalue] IsA--> [eigenvalue],[quality mod] IsA--> [mod],[quality scale] IsA--> [scale],[quality svd] IsA--> [svd],[quality transpose] IsA--> [transpose],[r input size] IsA--> [size],[r row] IsA--> [row],[random matrices full] decompose---> [],[random matrices] add---> [random],[random matrices] create---> [diagonal],[random matrices] create---> [eigenvalues symmetric],[random matrices] create---> [gaussian],[random matrices] create---> [in span],[random matrices] create---> [orthogonal],[random matrices] create---> [random b],[random matrices] create---> [random],[random matrices] create---> [singular values],[random matrices] create---> [span],[random matrices] create---> [symmetric positive definite],[random matrices] create---> [symmetric],[random matrices] create---> [upper triangle],[random matrices] HasProperty---> [gaussian],[random matrices] HasProperty---> [random b],[random matrices] HasProperty---> [random],[random min max] IsA--> [max],[range] has---> [next],[range] HasProperty---> [range],[range] HasProperty---> [step],[range] initialize---> [object],[rank threshold] IsA--> [threshold],[reading matrix csv] IsA--> [csv],[real eigenvalue hessenberg stress test test matrix] IsA--> [matrix],[real eigenvalue hessenberg stress test] evaluate---> [random],[real eigenvalue hessenberg stress test] evaluate---> [scaling down],[real eigenvalue hessenberg stress test] evaluate---> [scaling up],[real eigenvalue hessenberg stress test] evaluate---> [scaling],[real eigenvalue hessenberg stress test] has---> [complex],[real eigenvalue hessenberg stress test] HasProperty---> [real eigenvalue hessenberg stress test],[real eigenvalue hessenberg stress test] is---> [all complex],[real eigenvalue hessenberg stress test] IsA--> [test],[real eigenvalue hessenberg stress] IsA--> [stress],[real eigenvalue hessenberg] IsA--> [hessenberg],[reflector gamma] IsA--> [gamma],[required size matrix] IsA--> [matrix],[required size scalar] IsA--> [scalar],[root standard] IsA--> [standard],[row col] IsA--> [col],[row stride] IsA--> [stride],[rref gauss jordan row pivot set tolerance] IsA--> [tolerance],[rref gauss] IsA--> [gauss],[rref matrix] IsA--> [matrix],[rref scalar] IsA--> [scalar],[rref] gauss---> [jordan row pivot reduce object],[rref] gauss---> [jordan row pivot set tolerance],[rref] gauss---> [jordan row pivot swap rows],[rref] gauss---> [jordan row pivot],[safe svd] HasProperty---> [input modified],[safe svd] HasProperty---> [number columns],[safe svd] HasProperty---> [number of singular values],[safe svd] HasProperty---> [number rows],[safe svd] HasProperty---> [safe svd],[safe svd] HasProperty---> [singular values],[safe svd] HasProperty---> [update],[safe svd] HasProperty---> [v],[safe svd] HasProperty---> [width],[safe svd] is---> [compact],[safe test set] IsA--> [set],[safe test solver mod] IsA--> [mod],[sample index] IsA--> [index],[sample space] IsA--> [space],[scalar c] IsA--> [c],[scale row] IsA--> [row],[select wilkinson shift] IsA--> [shift],[sequence case] IsA--> [case],[sequence] add---> [operation],[sequence] perform---> [object],[set max size] IsA--> [size],[shift invert] IsA--> [invert],[should not] change---> [],[should] fail---> [singular],[should] work---> [rectangle],[similar decomposition cd test h] IsA--> [h],[similar decomposition cd] IsA--> [cd],[similar decomposition d] IsA--> [d],[similar] transform---> [],[simple base t] IsA--> [t],[simple check matrix] IsA--> [matrix],[simple evd t] IsA--> [t],[simple matrix copy object] IsA--> [object],[simple matrix dot object] IsA--> [object],[simple matrix insert] IsA--> [insert],[simple matrix invert na n infinity] IsA--> [infinity],[simple matrix invert object] IsA--> [object],[simple matrix set] IsA--> [set],[simple matrix transpose object] IsA--> [object],[simple matrix wrap object] IsA--> [object],[simple matrix wrap] IsA--> [wrap],[simple matrix] create---> [matrix],[simple matrix] HasProperty---> [diagonal],[simple matrix] HasProperty---> [identity],[simple matrix] HasProperty---> [simple matrix],[simple set state] IsA--> [state],[simple svd t] IsA--> [t],[simple unit] tests---> [assert countable],[simple unit] tests---> [assert equals uncountable],[simple unit] tests---> [assert equals],[simple unit] tests---> [assert shape],[singular matrix exception] HasProperty---> [singular matrix exception],[singular matrix exception] IsA--> [exception],[singular ops descending order array] IsA--> [array],[singular ops] check---> [svd matrix size],[singular ops] descending---> [order],[singular ops] HasProperty---> [null space],[singular ops] HasProperty---> [null vector],[singular ops] HasProperty---> [nullity],[singular ops] HasProperty---> [rank],[singular ops] HasProperty---> [singular threshold],[singular ops] swap---> [row or col],[smart rotator] update---> [get r],[smart rotator] update---> [initial object],[smart rotator] update---> [smart rotator update],[smart rotator] update---> [update object],[sol noharm] IsA--> [noharm],[solve pseudo inverse qrp d] IsA--> [d],[solve pseudo inverse] IsA--> [inverse],[solveing pseudo inverse] IsA--> [inverse],[solver invert] IsA--> [invert],[solver qr house col cd] IsA--> [cd],[specialized ops copy change row] IsA--> [row],[specialized ops get element diagonal max magnitude] IsA--> [magnitude],[specialized ops get householder vector] IsA--> [vector],[square invert benchmark] IsA--> [benchmark],[stability bidiagonal decomposition run] IsA--> [run],[stability bidiagonal decomposition] evaluate---> [object],[stability bidiagonal decomposition] HasProperty---> [main],[stability choleksy decomposition run] IsA--> [run],[stability choleksy decomposition] evaluate---> [object],[stability choleksy decomposition] HasProperty---> [main],[stability qr decomposition run] IsA--> [run],[stability qr decomposition] evaluate---> [object],[stability qr decomposition] HasProperty---> [main],[stability svdl decomposition run] IsA--> [run],[stability svdl decomposition] evaluate---> [object],[stability svdl decomposition] HasProperty---> [main],[stability svdl decomposition] IsA--> [decomposition],[stability svdl decomposition] run---> [algorithms],[stability symmetric eigenvalue] evaluate---> [object],[stability symmetric eigenvalue] HasProperty---> [main],[stability tridiagonal] evaluate---> [object],[stability tridiagonal] HasProperty---> [main],[stability tridiagonal] IsA--> [tridiagonal],[standard svd checks test identity] IsA--> [identity],[standard svd checks] check---> [components],[standard svd checks] check---> [get update storage],[standard svd checks] check---> [get update transpose],[standard svd checks] check---> [get v storage],[standard svd checks] check---> [get v transpose],[standard svd checks] check---> [occurrence],[standard svd checks] create---> [svd],[standard tridiagonal tests cd] create---> [decomposition],[standard tridiagonal tests cd] HasProperty---> [diagonal],[standard tridiagonal tests cd] IsA--> [cd],[standard tridiagonal tests cd] transpose---> [flag for quality],[standard tridiagonal tests d] create---> [decomposition],[standard tridiagonal tests d] HasProperty---> [diagonal],[standard tridiagonal tests d] IsA--> [d],[standard tridiagonal tests d] transpose---> [flag for quality],[statistics matrix wrap object] IsA--> [object],[statistics matrix] create---> [matrix],[statistics matrix] HasProperty---> [main],[statistics matrix] HasProperty---> [statistics matrix],[stress test check matrix] IsA--> [matrix],[stress test test matrix] IsA--> [matrix],[sub house] IsA--> [house],[sub list] IsA--> [list],[subjects process] IsA--> [process],[subjects] add---> [row to a],[subjects] compute---> [determinant],[subjects] configure---> [object],[subjects] copy---> [object],[subjects] create---> [like],[subjects] has---> [next],[subjects] HasProperty---> [a],[subjects] HasProperty---> [b],[subjects] HasProperty---> [covariance],[subjects] HasProperty---> [d],[subjects] HasProperty---> [data length],[subjects] HasProperty---> [decomposition],[subjects] HasProperty---> [diagonal],[subjects] HasProperty---> [eigenvalue vector],[subjects] HasProperty---> [eigenvalue],[subjects] HasProperty---> [eigenvalues],[subjects] HasProperty---> [imaginary],[subjects] HasProperty---> [input modified],[subjects] HasProperty---> [length],[subjects] HasProperty---> [lookup element wise],[subjects] HasProperty---> [lookup],[subjects] HasProperty---> [lower],[subjects] HasProperty---> [number columns],[subjects] HasProperty---> [number elements],[subjects] HasProperty---> [number of eigenvalues],[subjects] HasProperty---> [number of singular values],[subjects] HasProperty---> [number rows],[subjects] HasProperty---> [object],[subjects] HasProperty---> [pivot matrix],[subjects] HasProperty---> [pivot],[subjects] HasProperty---> [pivots],[subjects] HasProperty---> [print],[subjects] HasProperty---> [quality],[subjects] HasProperty---> [r],[subjects] HasProperty---> [rank],[subjects] HasProperty---> [real],[subjects] HasProperty---> [singular threshold],[subjects] HasProperty---> [singular values],[subjects] HasProperty---> [state],[subjects] HasProperty---> [t],[subjects] HasProperty---> [tolerance],[subjects] HasProperty---> [update],[subjects] HasProperty---> [upper],[subjects] HasProperty---> [v],[subjects] HasProperty---> [width],[subjects] initialize---> [object],[subjects] is---> [compact],[subjects] is---> [lower],[subjects] is---> [singular],[subjects] modifies---> [a],[subjects] modifies---> [b],[subjects] predict---> [object],[subjects] reduce---> [object],[subjects] remove---> [row from a],[subjects] requires---> [max index],[subjects] reshape---> [object],[submatrix ops set sub matrix] IsA--> [matrix],[svd implicit qr algorithm check for and] handle---> [zeros],[svd implicit qr algorithm count number] IsA--> [number],[svd implicit qr algorithm known case square] IsA--> [square],[svd implicit qr algorithm select wilkinson shift] IsA--> [shift],[svd implicit qr algorithm smart] update---> [rotator],[svd implicit qr algorithm] compute---> [bulge scale],[svd implicit qr algorithm] compute---> [rotator],[svd implicit qr algorithm] create---> [bulge],[svd implicit qr algorithm] HasProperty---> [eigenvalue bb x],[svd implicit qr algorithm] HasProperty---> [exception shift],[svd implicit qr algorithm] HasProperty---> [fast values],[svd implicit qr algorithm] HasProperty---> [increment steps],[svd implicit qr algorithm] HasProperty---> [off],[svd implicit qr algorithm] HasProperty---> [print matrix],[svd implicit qr algorithm] HasProperty---> [ut],[svd implicit qr algorithm] HasProperty---> [vt],[svd implicit qr algorithm] is---> [diagonal zero],[svd implicit qr algorithm] is---> [off zero],[svd implicit qr algorithm] perform---> [dynamic step],[svd implicit qr algorithm] perform---> [implicit single step],[svd implicit qr algorithm] perform---> [scripted step],[svd implicit qr algorithm] push---> [right],[svd implicit qr algorithm] remove---> [bulge left],[svd implicit qr algorithm] remove---> [bulge right],[svd implicit qr algorithm] reset---> [steps],[svd implicit qr algorithm] update---> [rotator],[svd implicit qr decompose d] compute---> [uwv],[svd implicit qr decompose d] decompose---> [object],[svd implicit qr decompose d] HasProperty---> [input modified],[svd implicit qr decompose d] HasProperty---> [number columns],[svd implicit qr decompose d] HasProperty---> [number of singular values],[svd implicit qr decompose d] HasProperty---> [number rows],[svd implicit qr decompose d] HasProperty---> [setup],[svd implicit qr decompose d] HasProperty---> [singular values],[svd implicit qr decompose d] HasProperty---> [update],[svd implicit qr decompose d] HasProperty---> [v],[svd implicit qr decompose d] HasProperty---> [width],[svd implicit qr decompose d] is---> [compact],[svd implicit qr decompose d] IsA--> [d],[svd implicit qr decompose d] make---> [singular positive],[svd implicit qr decompose d] undo---> [transpose],[svd implicit qr decompose ultimate s] compute---> [singular values],[svd implicit qr decompose ultimate s] compute---> [uand v],[svd implicit qr decompose ultimate s] decompose---> [object],[svd implicit qr decompose ultimate s] HasProperty---> [input modified],[svd implicit qr decompose ultimate s] HasProperty---> [number columns],[svd implicit qr decompose ultimate s] HasProperty---> [number of singular values],[svd implicit qr decompose ultimate s] HasProperty---> [number rows],[svd implicit qr decompose ultimate s] HasProperty---> [singular values],[svd implicit qr decompose ultimate s] HasProperty---> [update],[svd implicit qr decompose ultimate s] HasProperty---> [v],[svd implicit qr decompose ultimate s] HasProperty---> [width],[svd implicit qr decompose ultimate s] is---> [compact],[svd implicit qr decompose ultimate s] make---> [singular positive],[svd implicit qr decompose ultimate] compute---> [singular values],[svd implicit qr decompose ultimate] compute---> [uand v],[svd implicit qr decompose ultimate] HasProperty---> [input modified],[svd implicit qr decompose ultimate] HasProperty---> [number columns],[svd implicit qr decompose ultimate] HasProperty---> [number of singular values],[svd implicit qr decompose ultimate] HasProperty---> [number rows],[svd implicit qr decompose ultimate] HasProperty---> [singular values],[svd implicit qr decompose ultimate] HasProperty---> [update],[svd implicit qr decompose ultimate] HasProperty---> [v],[svd implicit qr decompose ultimate] HasProperty---> [width],[svd implicit qr decompose ultimate] is---> [compact],[svd implicit qr decompose ultimate] make---> [singular positive],[svdl decomposition] IsA--> [decomposition],[swap row] IsA--> [row],[switchinging eigenvalue decomposition] IsA--> [decomposition],[symmetric eigenvalue stress test] HasProperty---> [main],[symmetric eigenvalue stress test] IsA--> [test],[symmetric qr algorithm count number] IsA--> [number],[symmetric qr algorithm decomposition d] compute---> [eigenvalue values],[symmetric qr algorithm decomposition d] decompose---> [object],[symmetric qr algorithm decomposition d] HasProperty---> [compute vectors with values],[symmetric qr algorithm decomposition d] HasProperty---> [eigenvalue vector],[symmetric qr algorithm decomposition d] HasProperty---> [eigenvalue],[symmetric qr algorithm decomposition d] HasProperty---> [input modified],[symmetric qr algorithm decomposition d] HasProperty---> [max iterations],[symmetric qr algorithm decomposition d] HasProperty---> [number of eigenvalues],[symmetric qr algorithm decomposition d] IsA--> [d],[symmetric qr algorithm process] IsA--> [process],[symmetric qr algorithm] HasProperty---> [fast eigenvalues],[symmetric qr algorithm] HasProperty---> [max iterations],[symmetric qr algorithm] HasProperty---> [quality],[symmetric qr algorithm] perform---> [step],[symmetric qr eigenvalue helper] compute---> [rotation],[symmetric qr eigenvalue helper] compute---> [shift],[symmetric qr eigenvalue helper] compute---> [wilkinson shift],[symmetric qr eigenvalue helper] create---> [bulge by],[symmetric qr eigenvalue helper] create---> [bulge],[symmetric qr eigenvalue helper] HasProperty---> [eigenvalue by],[symmetric qr eigenvalue helper] HasProperty---> [increment steps],[symmetric qr eigenvalue helper] HasProperty---> [matrix size],[symmetric qr eigenvalue helper] HasProperty---> [print matrix],[symmetric qr eigenvalue helper] HasProperty---> [quality],[symmetric qr eigenvalue helper] HasProperty---> [submatrix],[symmetric qr eigenvalue helper] is---> [zero],[symmetric qr eigenvalue helper] IsA--> [helper],[symmetric qr eigenvalue helper] perform---> [implicit single step],[symmetric qr eigenvalue helper] remove---> [bulge end],[symmetric qr eigenvalue helper] remove---> [bulge],[symmetric qr eigenvalue helper] reset---> [object],[symmetric qr eigenvalue helper] reset---> [steps],[symmetric qr eigenvalue helper] update---> [quality],[symmetric rank n minus] update---> [],[symmetric rank n] IsA--> [n],[symmetric rank transpose] IsA--> [transpose],[symmetric rank] transpose---> [a sub],[target op] IsA--> [op],[tau and divide col] IsA--> [col],[tau and divide row] IsA--> [row],[tau gamma] IsA--> [gamma],[temp mat] IsA--> [mat],[temp parameter] IsA--> [parameter],[test adjustable linear solver qr d] add---> [row to a],[test adjustable linear solver qr d] create---> [solver],[test adjustable linear solver qr d] remove---> [row from a],[test base decomposition b to d] HasProperty---> [input modified],[test base decomposition b] IsA--> [b],[test bidiagonal decomposition row d test] compute---> [update],[test bidiagonal decomposition row d test] compute---> [v],[test bidiagonal decomposition row d] create---> [qr decomposition],[test bidiagonal decomposition row] IsA--> [row],[test bidiagonal decomposition tall d] create---> [qr decomposition],[test block cholesky outer solver test negative] solve---> [],[test block cholesky outer solver test positive] solve---> [],[test block cholesky outer solver test positive] solve---> [null],[test block cholesky outer solver] create---> [matrix spd],[test block cholesky outer solver] modifies---> [a],[test block cholesky outer solver] modifies---> [b],[test block d matrix ops] check---> [block to dense],[test block d matrix ops] check---> [convert dense to block],[test block d matrix ops] check---> [multiple],[test block d matrix ops] convert---> [block to dense],[test block d matrix ops] convert---> [dense to block],[test block d matrix ops] HasProperty---> [multiple],[test block house holder test] find---> [max col],[test block house holder test] find---> [max row],[test block house holder] add---> [row],[test block house holder] compute---> [tau and divide col],[test block house holder] compute---> [tau and divide row],[test block house holder] compute---> [width column],[test block house holder] compute---> [y t v],[test block house holder] compute---> [z],[test block house holder] decompose---> [qr block col],[test block house holder] HasProperty---> [rank update multiple lower left col],[test block house holder] HasProperty---> [rank update multiple lower row],[test block house holder] HasProperty---> [rank update multiple r col],[test block house holder] HasProperty---> [rank update multiple r top row],[test block house holder] HasProperty---> [scale row],[test block house holder] HasProperty---> [zeros y],[test block house holder] initialize---> [width],[test block house holder] IsA--> [holder],[test block inner multiplication test all] block---> [multiple],[test block inner multiplication] invoke---> [object],[test block inner rank] update---> [check rank n update],[test block inner rank] update---> [check symmetric rank n minus lower],[test block inner rank] update---> [check symmetric rank n minus update],[test block inner rank] update---> [get rank n update],[test block inner triangular solver check] solve---> [array],[test block inner triangular solver test] invert---> [lower one],[test block inner triangular solver test] invert---> [lower two],[test block inner triangular solver test] solve---> [array],[test block inner triangular solver] create---> [random lower triangular],[test block inner triangular solver] HasProperty---> [offset array],[test block matrix ops] block---> [aligned],[test block matrix ops] check---> [block to dense],[test block matrix ops] check---> [convert dense to block],[test block matrix ops] check---> [convert inline block to dense],[test block matrix ops] check---> [convert inline dense to block],[test block matrix ops] check---> [multiple input],[test block matrix ops] check---> [multiple],[test block matrix ops] check---> [transpose src block to dense],[test block matrix ops] check---> [transpose],[test block matrix ops] convert---> [block to dense],[test block matrix ops] convert---> [dense to block],[test block matrix ops] convert---> [inline block to dense],[test block matrix ops] convert---> [inline dense to block],[test block matrix ops] convert---> [simple],[test block matrix ops] convert---> [transpose src block to dense],[test block matrix ops] copy---> [triangle],[test block matrix ops] extract---> [aligned],[test block matrix ops] HasProperty---> [identity],[test block matrix ops] HasProperty---> [zero triangle lower],[test block matrix ops] HasProperty---> [zero triangle upper],[test block matrix ops] invoke---> [error check],[test block matrix ops] transpose---> [object],[test block matrix] IsA--> [matrix],[test block multiplication] HasProperty---> [multiple by extract],[test block multiplication] HasProperty---> [multiple submatrix],[test block multiplication] HasProperty---> [sub],[test block multiplication] transpose---> [sub],[test block qr house holder solver test quality scale] IsA--> [scale],[test block qr house holder solver] IsA--> [solver],[test block qr house holder solver] modifies---> [a],[test block qr house holder solver] modifies---> [b],[test block qr house holder] solver---> [test invert],[test block qr house holder] solver---> [test positive solve],[test block qr house holder] solver---> [test quality scale],[test block qr house holder] solver---> [test quality],[test block qr house] IsA--> [house],[test block qr] IsA--> [qr],[test block triangular solver check] solve---> [],[test block triangular solver check] solve---> [block submatrix],[test block triangular solver check] solve---> [unaligned],[test block triangular solver test] solve---> [],[test block triangular solver test] solve---> [block],[test block triangular solver] create---> [random lower triangular],[test block triangular solver] invert---> [one],[test block triangular solver] invert---> [two],[test block vector ops] add---> [row],[test block vector ops] check---> [vector row],[test block vector ops] dot---> [row col],[test block vector ops] dot---> [row],[test block vector ops] HasProperty---> [scale row],[test block] IsA--> [block],[test c common ops extract] simplified---> [],[test c common ops] add---> [object],[test c common ops] check---> [all matrix multiple],[test c common ops] convert---> [object],[test c common ops] fill---> [object],[test c common ops] HasProperty---> [columns to vector],[test c common ops] HasProperty---> [determinant],[test c common ops] HasProperty---> [diagonal],[test c common ops] HasProperty---> [element divide left],[test c common ops] HasProperty---> [element divide right],[test c common ops] HasProperty---> [element max absolute],[test c common ops] HasProperty---> [element max imaginary],[test c common ops] HasProperty---> [element max magnitude],[test c common ops] HasProperty---> [element max real],[test c common ops] HasProperty---> [element min imaginary],[test c common ops] HasProperty---> [element min real],[test c common ops] HasProperty---> [element multiply],[test c common ops] HasProperty---> [identity one],[test c common ops] HasProperty---> [identity two],[test c common ops] HasProperty---> [identity],[test c common ops] HasProperty---> [magnitude],[test c common ops] HasProperty---> [scale],[test c common ops] multiply---> [object],[test c common ops] solve---> [object],[test c common ops] subtract---> [object],[test c common ops] transpose---> [conjugate one],[test c common ops] transpose---> [conjugate two],[test c common ops] transpose---> [one],[test c common ops] transpose---> [two],[test c dense matrix f] HasProperty---> [array],[test c dense matrix f] HasProperty---> [constructor cmatrix],[test c dense matrix f] HasProperty---> [constructor darray],[test c dense matrix f] HasProperty---> [constructor shape],[test c dense matrix f] HasProperty---> [data length],[test c dense matrix f] HasProperty---> [imaginary],[test c dense matrix f] HasProperty---> [index],[test c dense matrix f] HasProperty---> [object],[test c dense matrix f] HasProperty---> [real],[test c dense matrix f] HasProperty---> [row stride],[test c dense matrix f] HasProperty---> [rowcolumn],[test c dense matrix f] reshape---> [object],[test c invert] using---> [solve invert object],[test c matrix features] check---> [identical],[test c matrix features] has---> [na n],[test c matrix features] has---> [uncountable],[test c matrix features] is---> [equals tolerance],[test c matrix features] is---> [equals],[test c matrix features] is---> [hermitian],[test c matrix features] is---> [identical],[test c matrix features] is---> [identity],[test c matrix features] is---> [lower triangle],[test c matrix features] is---> [negative],[test c matrix features] is---> [positive definite],[test c matrix features] is---> [unitary],[test c matrix features] is---> [upper triangle],[test c matrix features] is---> [vector],[test c matrix features] is---> [zeros],[test c matrix matrix multiple] HasProperty---> [general checks],[test c matrix matrix multiple] invoke---> [object],[test c matrix matrix multiple] multiply---> [object],[test c matrix matrix] IsA--> [matrix],[test c norm ops] HasProperty---> [norm f],[test c norm] IsA--> [norm],[test c random matrices] check---> [random range],[test c random matrices] check---> [random],[test c random matrices] create---> [herm positive definite],[test c random matrices] create---> [hermitian],[test c random matrices] create---> [random min max],[test c random matrices] HasProperty---> [random min max],[test c random matrices] HasProperty---> [random],[test c triangular solver] create---> [lower triangle diagonal real],[test c triangular solver] solve---> [conjugate transpose lower diagonal real],[test c triangular solver] solve---> [lower diagonal real],[test c triangular solver] solve---> [update],[test c] specialized---> [ops create reflector gamma],[test c] specialized---> [ops create reflector],[test c] specialized---> [ops get element diagonal max magnitude],[test c] specialized---> [ops get householder vector],[test c] specialized---> [ops get householder],[test c] specialized---> [ops get pivot matrix],[test c] specialized---> [ops get quality triangular],[test c] transpose---> [algs get standard conjugate],[test c] transpose---> [algs get standard],[test c] transpose---> [algs square conjugate],[test c] transpose---> [algs square object],[test cd matrix f] HasProperty---> [matrix],[test cd matrix f] HasProperty---> [number columns],[test cd matrix f] HasProperty---> [number rows],[test cd matrix] IsA--> [matrix],[test cholesky decomposition b to d check] modify---> [input],[test cholesky decomposition b to d] create---> [object],[test cholesky decomposition block d check] modify---> [input],[test cholesky decomposition block d] create---> [object],[test cholesky decomposition block] IsA--> [block],[test cholesky decomposition common cd] HasProperty---> [t],[test cholesky decomposition inner cd] create---> [object],[test cholesky decomposition inner d check] modify---> [input],[test cholesky decomposition inner d] create---> [object],[test cholesky decomposition ldl d check] modify---> [input],[test cholesky decomposition ldl d test] decompose---> [],[test cholesky] IsA--> [cholesky],[test common ops] add---> [alpha beta],[test common ops] add---> [alpha],[test common ops] add---> [beta],[test common ops] add---> [equals beta],[test common ops] add---> [equals],[test common ops] add---> [object],[test common ops] add---> [scalar c],[test common ops] add---> [scalar],[test common ops] change---> [sign one],[test common ops] change---> [sign two],[test common ops] check---> [all matrix multiple zeros],[test common ops] check---> [all matrix mults],[test common ops] check---> [input shape],[test common ops] check---> [multiple method],[test common ops] count---> [true],[test common ops] dot---> [object],[test common ops] extract---> [diagonal],[test common ops] fill---> [block],[test common ops] fill---> [dense],[test common ops] find---> [check],[test common ops] HasProperty---> [columns to vectors],[test common ops] HasProperty---> [diagonal rect],[test common ops] HasProperty---> [diagonal],[test common ops] HasProperty---> [element div three],[test common ops] HasProperty---> [element div two],[test common ops] HasProperty---> [element express],[test common ops] HasProperty---> [element less than double],[test common ops] HasProperty---> [element less than matrix],[test common ops] HasProperty---> [element less than or equal double],[test common ops] HasProperty---> [element less than or equal matrix],[test common ops] HasProperty---> [element log],[test common ops] HasProperty---> [element max absolute],[test common ops] HasProperty---> [element max],[test common ops] HasProperty---> [element min absolute],[test common ops] HasProperty---> [element min],[test common ops] HasProperty---> [element more than double],[test common ops] HasProperty---> [element more than or equal double],[test common ops] HasProperty---> [element multiple three],[test common ops] HasProperty---> [element multiple two],[test common ops] HasProperty---> [element power mm],[test common ops] HasProperty---> [element power ms],[test common ops] HasProperty---> [element power sm],[test common ops] HasProperty---> [element sum absolute],[test common ops] HasProperty---> [element sum],[test common ops] HasProperty---> [elements],[test common ops] HasProperty---> [identity rect],[test common ops] HasProperty---> [identity],[test common ops] HasProperty---> [multiple inner],[test common ops] HasProperty---> [multiple outer],[test common ops] HasProperty---> [scale two input],[test common ops] HasProperty---> [scale],[test common ops] HasProperty---> [sub equals],[test common ops] HasProperty---> [sum columns],[test common ops] HasProperty---> [sum rows],[test common ops] HasProperty---> [zero],[test common ops] insert---> [array two],[test common ops] insert---> [object],[test common ops] solve---> [object],[test common ops] subtract---> [double matrix],[test common ops] subtract---> [matrix double],[test common ops] subtract---> [matrix matrix],[test common ops] trace---> [object],[test common ops] transpose---> [inplace],[test common ops] transpose---> [object],[test complex math f conjugate object] IsA--> [object],[test complex math f] convert---> [object],[test complex math f] HasProperty---> [minus],[test complex math f] HasProperty---> [multiple polar],[test complex math f] HasProperty---> [plus],[test complex math f] HasProperty---> [pow],[test complex math f] HasProperty---> [root polar],[test complex math f] HasProperty---> [root standard],[test complex math f] multiply---> [object],[test complex math] IsA--> [math],[test construactor] IsA--> [construactor],[test constructor] IsA--> [constructor],[test covariance ops] is---> [valid],[test covariance random draw] modify---> [input],[test d submatrix f] HasProperty---> [object],[test decomposition factory] HasProperty---> [quality eigenvalue],[test decomposition factory] HasProperty---> [quality svd],[test decomposition] IsA--> [decomposition],[test dense matrix boolean set] HasProperty---> [row col],[test dense matrix boolean] HasProperty---> [index],[test dense matrix boolean] HasProperty---> [number columns],[test dense matrix boolean] HasProperty---> [number elements],[test dense matrix boolean] HasProperty---> [number rows],[test dense matrix boolean] reshape---> [object],[test dense matrix f test] reshape---> [],[test dense matrix f] HasProperty---> [column major],[test dense matrix f] HasProperty---> [row major],[test dense matrix f] wrap---> [object],[test determinant from minor] compare---> [to naive x],[test determinant from minor] compare---> [to x],[test determinant from minor] compute---> [medium sized],[test determinant] IsA--> [determinant],[test eigenvalue ops] bound---> [largest eigenvalue value markov],[test eigenvalue ops] compute---> [eigenvalue value],[test eigenvalue ops] create---> [matrix d],[test eigenvalue ops] create---> [matrix v],[test eigenvalue power method] compute---> [direct],[test eigenvalue power method] compute---> [shift direct],[test eigenvalue power method] compute---> [shift invert],[test eigenvalue power method] IsA--> [method],[test equation extract tokens] doubles---> [],[test equation] assign---> [lazy right],[test equation] assign---> [lazy],[test equation] assign---> [resize lazy],[test equation] compile---> [assign integer sequence case],[test equation] compile---> [assign submatrix scalar],[test equation] compile---> [assign submatrix special],[test equation] compile---> [assign submatrix],[test equation] compile---> [basic],[test equation] compile---> [construct matrix commas],[test equation] compile---> [construct matrix doubles],[test equation] compile---> [construct matrix for sequence case],[test equation] compile---> [construct matrix for],[test equation] compile---> [construct matrix inner],[test equation] compile---> [construct matrix matrix and scalar],[test equation] compile---> [construct matrix operations],[test equation] compile---> [construct matrix scalars],[test equation] compile---> [double],[test equation] compile---> [element wise],[test equation] compile---> [function n],[test equation] compile---> [function one],[test equation] compile---> [negative],[test equation] compile---> [output],[test equation] compile---> [parentheses extract scalar],[test equation] compile---> [parentheses extract special],[test equation] compile---> [parentheses extract],[test equation] compile---> [parentheses],[test equation] compile---> [transpose],[test equation] create---> [op],[test equation] handle---> [parentheses],[test equation] HasProperty---> [lookup variable],[test equation] HasProperty---> [macro],[test equation] is---> [letter],[test equation] is---> [target op],[test equation] IsA--> [equation],[test equation] parse---> [operations],[test exception test exception] IsA--> [exception],[test format] IsA--> [format],[test hessenberg similar decomposition cd] check---> [it all],[test hessenberg similar decomposition d] check---> [it all],[test identity] IsA--> [identity],[test implied common ops dense matrix f extract object] IsA--> [object],[test implied common ops matrix f extract object] IsA--> [object],[test inner cholesky b check] decompose---> [],[test inner cholesky b] HasProperty---> [upper],[test integer sequence] compare---> [object],[test integer sequence] HasProperty---> [range one],[test integer sequence] HasProperty---> [range two],[test integer sequence] HasProperty---> [range zero],[test integer sequence] IsA--> [sequence],[test invert] IsA--> [invert],[test invert] using---> [solve invert object],[test levenberg marquardt] IsA--> [marquardt],[test levenberg marquardt] run---> [trivial],[test linear solver abstract invert object] IsA--> [object],[test linear solver abstract set a] HasProperty---> [a],[test linear solver b to d] create---> [solver],[test linear solver chol b] create---> [solver],[test linear solver chol cd] create---> [solver],[test linear solver chol d] create---> [solver],[test linear solver chol ldl d test inverse and] solve---> [],[test linear solver factory] HasProperty---> [general],[test linear solver factory] HasProperty---> [least squares],[test linear solver factory] HasProperty---> [standard test],[test linear solver lu base d test] improve---> [sol noharm],[test linear solver lu cd] create---> [solver],[test linear solver lu d] create---> [solver],[test linear solver lu kji d] create---> [solver],[test linear solver lu kji] IsA--> [kji],[test linear solver lu] IsA--> [lu],[test linear solver qr block d] create---> [solver],[test linear solver qr cd] create---> [solver],[test linear solver qr d] create---> [solver],[test linear solver qr house cd] create---> [solver],[test linear solver qr house col cd] create---> [solver],[test linear solver qr house col d] create---> [solver],[test linear solver qr house col] IsA--> [col],[test linear solver qr house d] create---> [solver],[test linear solver qr house transpose d] create---> [solver],[test linear solver qr house transpose] IsA--> [transpose],[test linear solver qr house] IsA--> [house],[test linear solver qr house] transpose---> [cd create solver],[test linear solver qr house] transpose---> [cd test linear solver qr house transpose cd],[test linear solver qr] IsA--> [qr],[test linear solver safe test solver mod] IsA--> [mod],[test linear solver safe test] HasProperty---> [a mod],[test linear solver safe test] HasProperty---> [a not mod],[test linear solver safe test] solver---> [not mod],[test linear solver safe] HasProperty---> [multiple calls set a],[test linear solver safe] HasProperty---> [multiple calls set b],[test linear solver safe] HasProperty---> [quality],[test linear solver safe] modifies---> [object],[test lu decomposition alt cd] create---> [object],[test lu decomposition alt d] create---> [object],[test lu decomposition base cd] solve---> [lower],[test lu decomposition base cd] solve---> [vector internal],[test lu decomposition base d test determinant] IsA--> [determinant],[test lu decomposition base d] solve---> [vector internal],[test lu decomposition base] IsA--> [base],[test lu decomposition nr cd] create---> [object],[test lu decomposition nr d] create---> [object],[test lu decomposition] IsA--> [decomposition],[test matrix check mat] IsA--> [mat],[test matrix constructor] HasProperty---> [basic test],[test matrix constructor] HasProperty---> [to required size matrix],[test matrix constructor] HasProperty---> [to required size scalar],[test matrix features] check---> [identical],[test matrix features] has---> [na n],[test matrix features] has---> [uncountable],[test matrix features] HasProperty---> [nullity threshold],[test matrix features] HasProperty---> [nullity],[test matrix features] HasProperty---> [rank threshold],[test matrix features] HasProperty---> [rank],[test matrix features] is---> [constant value],[test matrix features] is---> [diagonal positive],[test matrix features] is---> [equals boolean],[test matrix features] is---> [equals tolerance],[test matrix features] is---> [equals triangle],[test matrix features] is---> [equals],[test matrix features] is---> [identical],[test matrix features] is---> [identity],[test matrix features] is---> [inverse nomodify],[test matrix features] is---> [inverse],[test matrix features] is---> [lower triangle],[test matrix features] is---> [negative],[test matrix features] is---> [orthogonal],[test matrix features] is---> [positive definite],[test matrix features] is---> [positive semidefinite],[test matrix features] is---> [rows linear independent],[test matrix features] is---> [skew symmetric],[test matrix features] is---> [square],[test matrix features] is---> [symmetric],[test matrix features] is---> [upper triangle],[test matrix features] is---> [vector],[test matrix features] is---> [zeros],[test matrix io] HasProperty---> [load save binary],[test matrix io] HasProperty---> [load save csv],[test matrix iterator f] HasProperty---> [sub col],[test matrix iterator f] HasProperty---> [sub row],[test matrix matrix multiple check all against] known---> [],[test matrix matrix multiple transpose object] IsA--> [object],[test matrix matrix multiple] invoke---> [object],[test matrix matrix] IsA--> [matrix],[test matrix vector multiple] HasProperty---> [multiple add transpose a reorder],[test matrix vector multiple] HasProperty---> [multiple add transpose a small],[test matrix vector multiple] HasProperty---> [multiple add],[test matrix vector multiple] HasProperty---> [multiple transpose a reorder],[test matrix vector multiple] HasProperty---> [multiple transpose a small],[test matrix vector multiple] HasProperty---> [multiple zero],[test matrix vector multiple] HasProperty---> [multiple],[test matrix vector multiple] invoke---> [object],[test matrix vector] IsA--> [vector],[test naive determinant] HasProperty---> [determinant recursive],[test naive determinant] HasProperty---> [determinant],[test norm ops fast element p] IsA--> [p],[test norm ops fast norm p] IsA--> [p],[test norm ops] check---> [uncountable],[test norm ops] HasProperty---> [condition p],[test norm ops] HasProperty---> [element p],[test norm ops] HasProperty---> [norm f],[test norm ops] HasProperty---> [norm p infinite],[test norm ops] HasProperty---> [norm p],[test norm ops] induced---> [p infinite],[test norm ops] induced---> [p],[test norm ops] normalize---> [f],[test norm] IsA--> [norm],[test operation check sub matrix arrays] insert---> [],[test operation check] IsA--> [check],[test operation trace matrix] IsA--> [matrix],[test operation transpose matrix] IsA--> [matrix],[test operation] add---> [integer integer],[test operation] add---> [matrix matrix],[test operation] add---> [matrix scalar],[test operation] add---> [scalar scalar],[test operation] express---> [matrix],[test operation] express---> [s],[test operation] HasProperty---> [absolute integer],[test operation] HasProperty---> [absolute matrix],[test operation] HasProperty---> [absolute scalar],[test operation] HasProperty---> [cos],[test operation] HasProperty---> [determinant matrix],[test operation] HasProperty---> [determinant scalar],[test operation] HasProperty---> [diagonal matrix],[test operation] HasProperty---> [diagonal vector],[test operation] HasProperty---> [element divide matrix],[test operation] HasProperty---> [element multiple matrix],[test operation] HasProperty---> [element power mm],[test operation] HasProperty---> [element power ms],[test operation] HasProperty---> [element power sm],[test operation] HasProperty---> [element power ss],[test operation] HasProperty---> [eye],[test operation] HasProperty---> [log matrix],[test operation] HasProperty---> [log s],[test operation] HasProperty---> [max integer],[test operation] HasProperty---> [max matrix],[test operation] HasProperty---> [max scalar],[test operation] HasProperty---> [min integer],[test operation] HasProperty---> [min matrix],[test operation] HasProperty---> [min scalar],[test operation] HasProperty---> [negative integer],[test operation] HasProperty---> [negative matrix],[test operation] HasProperty---> [negative scalar],[test operation] HasProperty---> [norm f matrix],[test operation] HasProperty---> [norm f scalar],[test operation] HasProperty---> [ones],[test operation] HasProperty---> [power double double],[test operation] HasProperty---> [power integer integer],[test operation] HasProperty---> [sin],[test operation] HasProperty---> [zeros],[test operation] IsA--> [operation],[test operation] multiply---> [integer integer],[test operation] multiply---> [matrix matrix],[test operation] multiply---> [matrix scalar],[test operation] multiply---> [scalar scalar],[test operation] solve---> [object],[test operation] subtract---> [integer integer],[test operation] subtract---> [matrix matrix],[test operation] subtract---> [matrix scalar],[test operation] subtract---> [scalar scalar],[test permute array] HasProperty---> [fact],[test polynomial root finder] find---> [roots],[test polynomial root finder] IsA--> [finder],[test principle component analysis] compute---> [error],[test principle component analysis] HasProperty---> [error],[test principle component analysis] HasProperty---> [response],[test principle component analysis] HasProperty---> [sample to eigenvalue space],[test principle component analysis] IsA--> [analysis],[test qr col pivot decomposition householder column d check decomposition] IsA--> [decomposition],[test qr col pivot decomposition householder column d test] IsA--> [test],[test qr col pivot decomposition householder column d] HasProperty---> [no pivot],[test qr col pivot decomposition householder column] IsA--> [column],[test qr col] IsA--> [col],[test qr decomposition b to d] create---> [qr decomposition],[test qr decomposition householder b] HasProperty---> [generic save width],[test qr decomposition householder b] HasProperty---> [generic],[test qr decomposition householder cd] create---> [qr decomposition],[test qr decomposition householder column cd check sub house] IsA--> [house],[test qr decomposition householder column cd check sub matrix] IsA--> [matrix],[test qr decomposition householder column cd] create---> [qr decomposition],[test qr decomposition householder column cd] HasProperty---> [householder],[test qr decomposition householder column cd] update---> [a],[test qr decomposition householder column d check sub house] IsA--> [house],[test qr decomposition householder column d check sub matrix] IsA--> [matrix],[test qr decomposition householder column d] create---> [qr decomposition],[test qr decomposition householder column d] HasProperty---> [householder],[test qr decomposition householder column d] update---> [a],[test qr decomposition householder column] IsA--> [column],[test qr decomposition householder d] create---> [qr decomposition],[test qr decomposition householder d] HasProperty---> [householder],[test qr decomposition householder d] update---> [a],[test qr decomposition householder transpose d] apply---> [quality],[test qr decomposition householder transpose d] apply---> [transpose quality],[test qr decomposition householder transpose d] create---> [qr decomposition],[test qr decomposition householder transpose d] HasProperty---> [householder],[test qr decomposition householder transpose d] update---> [a],[test qr decomposition householder] IsA--> [householder],[test qr decomposition householder] transpose---> [cd apply quality],[test qr decomposition householder] transpose---> [cd apply transpose quality],[test qr decomposition householder] transpose---> [cd check sub house],[test qr decomposition householder] transpose---> [cd check sub matrix],[test qr decomposition householder] transpose---> [cd create qr decomposition],[test qr decomposition householder] transpose---> [cd get householder],[test qr decomposition householder] transpose---> [cd update a],[test qr decomposition] IsA--> [decomposition],[test qr example equation] HasProperty---> [basic],[test qr example equation] IsA--> [equation],[test qr example ops] check---> [matrix],[test qr example ops] HasProperty---> [basic],[test qr example simple check matrix] IsA--> [matrix],[test qr example simple] HasProperty---> [basic],[test qr example simple] IsA--> [simple],[test qr example] IsA--> [example],[test qr helper] functions---> [cd compute row max],[test qr helper] functions---> [cd compute tau gamma and divide],[test qr helper] functions---> [cd divide elements start update],[test qr helper] functions---> [cd extract column and max],[test qr helper] functions---> [cd extract householder column],[test qr helper] functions---> [cd extract householder row],[test qr helper] functions---> [cd find max],[test qr helper] functions---> [cd get outside identical],[test qr helper] functions---> [cd get rank update multiple lower],[test qr helper] functions---> [cd get rank update multiple r],[test qr] update---> [check insert],[test qr] update---> [check remove],[test qr] update---> [create quality mod],[test qr] update---> [test insert row],[test qr] update---> [test remove row],[test quality scale] IsA--> [scale],[test quality] IsA--> [quality],[test random matrices] add---> [random],[test random matrices] check---> [gaussian],[test random matrices] check---> [random range],[test random matrices] check---> [random],[test random matrices] create---> [diagonal general],[test random matrices] create---> [diagonal square],[test random matrices] create---> [eigenvalues symmetric],[test random matrices] create---> [gaussian],[test random matrices] create---> [in span],[test random matrices] create---> [orthogonal],[test random matrices] create---> [random min max],[test random matrices] create---> [random],[test random matrices] create---> [singular values],[test random matrices] create---> [span],[test random matrices] create---> [symmetric positive definite],[test random matrices] create---> [symmetric],[test random matrices] create---> [upper triangle],[test random matrices] HasProperty---> [gaussian],[test random matrices] HasProperty---> [random b],[test random matrices] HasProperty---> [random min max],[test random matrices] HasProperty---> [random],[test rref] gauss---> [jordan row pivot test rref gauss jordan row pivot],[test safe svd] HasProperty---> [safety],[test sequence] HasProperty---> [order],[test sequence] IsA--> [sequence],[test set] IsA--> [set],[test simple matrix] combine---> [object],[test simple matrix] HasProperty---> [column],[test simple matrix] HasProperty---> [condition p],[test simple matrix] HasProperty---> [constructor d array],[test simple matrix] HasProperty---> [constructor dense],[test simple matrix] HasProperty---> [constructor simple],[test simple matrix] HasProperty---> [d],[test simple matrix] HasProperty---> [determinant],[test simple matrix] HasProperty---> [double],[test simple matrix] HasProperty---> [eigenvalue],[test simple matrix] HasProperty---> [element div],[test simple matrix] HasProperty---> [element express],[test simple matrix] HasProperty---> [element log],[test simple matrix] HasProperty---> [element max absolute],[test simple matrix] HasProperty---> [element multiple],[test simple matrix] HasProperty---> [element power matrix],[test simple matrix] HasProperty---> [element power s],[test simple matrix] HasProperty---> [element sum],[test simple matrix] HasProperty---> [identity],[test simple matrix] HasProperty---> [index],[test simple matrix] HasProperty---> [matrix],[test simple matrix] HasProperty---> [minus matrix matrix],[test simple matrix] HasProperty---> [minus matrix scalar],[test simple matrix] HasProperty---> [multiple],[test simple matrix] HasProperty---> [negative],[test simple matrix] HasProperty---> [norm f],[test simple matrix] HasProperty---> [plus beta],[test simple matrix] HasProperty---> [plus scalar],[test simple matrix] HasProperty---> [plus],[test simple matrix] HasProperty---> [pseudo inverse],[test simple matrix] HasProperty---> [row],[test simple matrix] HasProperty---> [scale],[test simple matrix] HasProperty---> [zero],[test simple matrix] is---> [in bounds],[test simple matrix] is---> [vector],[test simple matrix] reshape---> [object],[test simple matrix] solve---> [na n infinity],[test simple matrix] solve---> [notsquare],[test simple matrix] solve---> [object],[test simple] IsA--> [simple],[test singular ops test] descending---> [input transposed],[test singular ops test] descending---> [order],[test singular ops test] IsA--> [test],[test singular ops] check---> [svd matrix size negative],[test singular ops] check---> [svd matrix size positive],[test singular ops] descending---> [order array],[test singular ops] descending---> [order na n],[test singular ops] descending---> [order],[test singular ops] HasProperty---> [null space],[test singular ops] HasProperty---> [null vector],[test singular ops] HasProperty---> [rank and nullity no argument],[test singular ops] HasProperty---> [rank and nullity],[test size] IsA--> [size],[test solution] IsA--> [solution],[test submatrix ops] HasProperty---> [sub matrix],[test svd implicit qr algorithm count number] found---> [],[test svd implicit qr algorithm] create---> [helper],[test svd implicit qr algorithm] HasProperty---> [one bidiagonal matrix],[test svd implicit qr algorithm] HasProperty---> [zero on diagonal full],[test svd implicit qr algorithm] HasProperty---> [zero on diagonal],[test svd implicit qr algorithm] known---> [case square],[test svd implicit qr algorithm] known---> [diagonal],[test svd implicit qr decompose d check compact] IsA--> [compact],[test svd implicit qr decompose d] check---> [all permutations],[test svd implicit qr decompose d] create---> [svd],[test svd] IsA--> [svd],[test switching eigenvalue decomposition] create---> [decomposition],[test switching eigenvalue decomposition] IsA--> [decomposition],[test symmetric qr algorithm count number] found---> [],[test symmetric qr algorithm decomposition d] create---> [decomposition],[test symmetric qr algorithm] has---> [off diagonal],[test symmetric qr algorithm] HasProperty---> [multiple eigenvalues],[test symmetric qr algorithm] HasProperty---> [zero diagonal not zero off],[test test matrix] IsA--> [matrix],[test token list] HasProperty---> [token get type],[test token list] remove---> [object],[test token list] replace---> [object],[test transpose algs] block---> [object],[test triangular solver invert] IsA--> [invert],[test triangular solver] create---> [random lower triangular],[test triangular solver] solve---> [lower matrix],[test triangular solver] solve---> [lower vector],[test triangular solver] solve---> [transpose lower],[test triangular solver] solve---> [update submatrix],[test triangular solver] solve---> [update],[test tridiagonal decomposition b to d] create---> [decomposition],[test tridiagonal decomposition householder b] compare---> [to simple],[test tridiagonal decomposition householder b] HasProperty---> [multiple plus transpose a],[test tridiagonal decomposition householder cd] create---> [decomposition],[test tridiagonal decomposition householder d] create---> [decomposition],[test tridiagonal helper b] apply---> [reflectors to row],[test tridiagonal helper b] compute---> [row of v],[test tridiagonal helper b] compute---> [width row],[test tridiagonal helper b] compute---> [y],[test tridiagonal helper b] HasProperty---> [multiple a update],[test tridiagonal] IsA--> [tridiagonal],[test unrolled inverse from minor] compare---> [to lu],[test util decompositons cd check zeros] lt---> [null],[test util decompositons cd check zeros] lt---> [random],[test util decompositons cd check zeros] ut---> [null],[test util decompositons cd check zeros] ut---> [random],[test util decompositons d check zeros] lt---> [null],[test util decompositons d check zeros] lt---> [random],[test util decompositons d check zeros] ut---> [null],[test util decompositons d check zeros] ut---> [random],[test util ejml test] parse---> [matrix],[test util ejml] HasProperty---> [max array],[test util] IsA--> [util],[test vector vector multiple] add---> [outer prod],[test vector vector multiple] HasProperty---> [householder],[test vector vector multiple] HasProperty---> [rank update one square],[test vector vector multiple] HasProperty---> [rank update two square],[test] compare---> [kalman results check identical],[test] compare---> [kalman results compare filters],[test] convert---> [matrix type check all dm to fixed],[test] convert---> [matrix type check all fixed to dm],[test] convert---> [matrix type check identical v],[test] convert---> [matrix type check identical],[test] convert---> [matrix type get bm to dm],[test] convert---> [matrix type get dm to bm],[test] fixed---> [ops get diagonal],[test] fixed---> [ops test fixed ops],[test] implied---> [common ops dense matrix f extract object],[test] implied---> [common ops matrix f extract object],[test] read---> [matrix csv get bad matrix col],[test] read---> [matrix csv get bad matrix row],[test] read---> [matrix csv get complex],[test] solve---> [linear solver qrp house col d check singular basic],[test] solve---> [linear solver qrp house col d check singular full],[test] solve---> [linear solver qrp house col d create solver],[test] solve---> [linear solver qrp house col d test solve linear solver qrp house col d],[test] solve---> [pseudo inverse qrp d check singular basic],[test] solve---> [pseudo inverse qrp d check singular full],[test] solve---> [pseudo inverse qrp d create solver],[test] solve---> [pseudo inverse qrp d test solve pseudo inverse qrp d],[test] solve---> [pseudo inverse svd check singular basic],[test] solve---> [pseudo inverse svd create solver],[test] solve---> [pseudo inverse svd test solve pseudo inverse svd],[test] specialized---> [ops add identity],[test] specialized---> [ops copy change row],[test] specialized---> [ops copy triangle],[test] specialized---> [ops create reflector gamma],[test] specialized---> [ops create reflector],[test] specialized---> [ops get diagonal prod],[test] specialized---> [ops get element diagonal max absolute],[test] specialized---> [ops get element sum sq],[test] specialized---> [ops get pivot matrix],[test] specialized---> [ops get quality triangular],[test] specialized---> [ops get split into vectors],[test] transpose---> [algs get standard],[test] transpose---> [algs square object],[test] watched---> [double step qr decomposition d create decomposition],[testing block house holder] IsA--> [holder],[testing block multiplication] IsA--> [multiplication],[testing block] IsA--> [block],[testing c invert] IsA--> [invert],[testing cholesky decomposition] IsA--> [decomposition],[testing decomposition factory] IsA--> [factory],[testing determinant] IsA--> [determinant],[testing eigenvalue power method] IsA--> [method],[testing equation] IsA--> [equation],[testing exception] IsA--> [exception],[testing hessenberg similar decomposition cd] IsA--> [cd],[testing integer sequence] IsA--> [sequence],[testing invert] IsA--> [invert],[testing levenberg marquardt] IsA--> [marquardt],[testing linear solver chol cd] IsA--> [cd],[testing linear solver lu cd] IsA--> [cd],[testing linear solver qr cd] IsA--> [cd],[testing lu decomposition alt cd] IsA--> [cd],[testing lu decomposition base cd] IsA--> [cd],[testing lu decomposition nr cd] IsA--> [cd],[testing lu decomposition] IsA--> [decomposition],[testing matrix constructor] IsA--> [constructor],[testing matrix io] IsA--> [io],[testing matrix] IsA--> [matrix],[testing operation] IsA--> [operation],[testing polynomial root finder] IsA--> [finder],[testing principle component analysis] IsA--> [analysis],[testing qr decomposition householder cd] IsA--> [cd],[testing qr decomposition householder column cd] IsA--> [cd],[testing qr decomposition householder] IsA--> [householder],[testing qr decomposition] IsA--> [decomposition],[testing qr example equation] IsA--> [equation],[testing qr example simple] IsA--> [simple],[testing rref] IsA--> [rref],[testing sequence] IsA--> [sequence],[testing switching eigenvalue decomposition] IsA--> [decomposition],[testing tridiagonal decomposition householder cd] IsA--> [cd],[testing util decompositons cd] IsA--> [cd],[testing util ejml] IsA--> [ejml],[tests cd set a dimension check] IsA--> [check],[tests d set a dimension check] IsA--> [check],[testset matrix] IsA--> [matrix],[token list insert object] IsA--> [object],[token list insert] IsA--> [insert],[token list push object] IsA--> [object],[token list push] IsA--> [push],[token list] add---> [object],[token list] HasProperty---> [first],[token list] HasProperty---> [last],[token list] HasProperty---> [print],[token list] HasProperty---> [size],[token list] HasProperty---> [token list],[token list] remove---> [object],[token list] replace---> [object],[token] HasProperty---> [function],[token] HasProperty---> [scalar type],[token] HasProperty---> [symbol],[token] HasProperty---> [type],[token] HasProperty---> [variable],[token] HasProperty---> [word],[tokens element] IsA--> [element],[tranab column switch] IsA--> [switch],[transpose cd set] IsA--> [set],[transpose cd test] IsA--> [test],[transpose src block] IsA--> [block],[trials determinant] IsA--> [determinant],[trials norm] IsA--> [norm],[trials scale] IsA--> [scale],[triangular solver check] IsA--> [check],[triangular solver invert inplace] IsA--> [inplace],[triangular solver invert object] IsA--> [object],[triangular solver] solve---> [lower],[triangular solver] solve---> [transpose lower],[triangular solver] solve---> [update],[tridiagonal decomposition b to d] HasProperty---> [diagonal],[tridiagonal decomposition b to d] HasProperty---> [quality],[tridiagonal decomposition b to d] HasProperty---> [t],[tridiagonal decomposition householder b] decompose---> [object],[tridiagonal decomposition householder b] HasProperty---> [diagonal],[tridiagonal decomposition householder b] HasProperty---> [input modified],[tridiagonal decomposition householder b] HasProperty---> [multiple plus transpose a],[tridiagonal decomposition householder b] HasProperty---> [quality],[tridiagonal decomposition householder b] HasProperty---> [t],[tridiagonal decomposition householder b] IsA--> [b],[tridiagonal decomposition householder b] replace---> [zeros],[tridiagonal decomposition householder cd] decompose---> [object],[tridiagonal decomposition householder cd] HasProperty---> [diagonal],[tridiagonal decomposition householder cd] HasProperty---> [gammas],[tridiagonal decomposition householder cd] HasProperty---> [householder symmetric],[tridiagonal decomposition householder cd] HasProperty---> [input modified],[tridiagonal decomposition householder cd] HasProperty---> [qt],[tridiagonal decomposition householder cd] HasProperty---> [quality],[tridiagonal decomposition householder cd] HasProperty---> [t],[tridiagonal decomposition householder cd] IsA--> [cd],[tridiagonal decomposition householder d] decompose---> [object],[tridiagonal decomposition householder d] HasProperty---> [diagonal],[tridiagonal decomposition householder d] HasProperty---> [householder symmetric],[tridiagonal decomposition householder d] HasProperty---> [input modified],[tridiagonal decomposition householder d] HasProperty---> [qt],[tridiagonal decomposition householder d] HasProperty---> [quality],[tridiagonal decomposition householder d] HasProperty---> [t],[tridiagonal decomposition householder d] IsA--> [d],[tridiagonal decomposition householder original d] decompose---> [object],[tridiagonal decomposition householder original d] HasProperty---> [gamma],[tridiagonal decomposition householder original d] HasProperty---> [householder symmetric],[tridiagonal decomposition householder original d] HasProperty---> [qt],[tridiagonal decomposition householder original d] HasProperty---> [quality],[tridiagonal decomposition householder original d] HasProperty---> [t],[tridiagonal decomposition householder] IsA--> [householder],[tridiagonal helper b compute v block vector] IsA--> [vector],[tridiagonal helper b compute width row] IsA--> [row],[tridiagonal helper b] apply---> [reflectors to row],[tridiagonal helper b] compute---> [row of v],[tridiagonal helper b] compute---> [v block vector],[tridiagonal helper b] compute---> [width row],[tridiagonal helper b] compute---> [y],[tridiagonal helper b] HasProperty---> [multiple a update],[tridiagonal helper b] IsA--> [b],[under] determined---> [tall solve],[under] determined---> [wide inv],[under] determined---> [wide solve],[unrolled determinant from minor] HasProperty---> [determinant],[unsafe set] HasProperty---> [row col],[unsafe] HasProperty---> [],[unzero matrix] IsA--> [matrix],[unzero vector] IsA--> [vector],[updateing k] IsA--> [k],[updateing p] IsA--> [p],[ut null] IsA--> [null],[util decompositons cd check zeros] lt---> [],[util decompositons cd check zeros] ut---> [],[util decompositons d check identity] IsA--> [identity],[util decompositons d check zeros] lt---> [],[util decompositons d check zeros] ut---> [],[util decompositons d] IsA--> [d],[util ejml parse matrix] IsA--> [matrix],[util ejml] HasProperty---> [max],[util ejml] HasProperty---> [sort by index],[util ejml] is---> [uncountable],[util ejml] IsA--> [ejml],[util simple matrix] convert---> [simple],[util test matrix check number] found---> [],[util test matrix] IsA--> [matrix],[value end] IsA--> [end],[value start] IsA--> [start],[value step] IsA--> [step],[value x] IsA--> [x],[variable double] HasProperty---> [double],[variable double] HasProperty---> [variable double],[variable integer sequence] HasProperty---> [variable integer sequence],[variable integer sequence] IsA--> [sequence],[variable integer] HasProperty---> [double],[variable integer] HasProperty---> [variable integer],[variable matrix] create---> [temp],[variable matrix] HasProperty---> [variable matrix],[variable matrix] is---> [temp],[variable scalar] HasProperty---> [double],[variable scalar] HasProperty---> [scalar type],[variable scalar] HasProperty---> [variable scalar],[variable] HasProperty---> [variable],[vector vector multiple] add---> [outer prod],[vector vector multiple] HasProperty---> [householder],[vector vector multiple] HasProperty---> [rank update],[watch double step qr watch] find---> [eigenvalue],[watch double step qr] HasProperty---> [main],[width chol] IsA--> [chol],[width column] IsA--> [column],[width row] IsA--> [row],[wilkinson shift] IsA--> [shift],[wrap object] IsA--> [object],[subjects] update---> [object],[subjects] decompose---> [object],[subjects] solve---> [object],[subjects] HasProperty---> [type],[test function] IsA--> [function],[to] string---> [],[matrix iterator] IsA--> [iterator],[function] HasProperty---> [function],[token] HasProperty---> [token],[block object] IsA--> [object],[subjects] verify---> [lower],[subjects] verify---> [singular],[subjects] verify---> [compact],[util ejml] verify---> [uncountable],[complex f] verify---> [real],[dense matrix boolean] verify---> [in bounds],[dense matrix f] verify---> [in bounds],[matrix iterator f] verify---> [row major],[] read---> [csv verify space],[block matrix ops] verify---> [equals],[cholesky outer form b] verify---> [lower],[cholesky decomposition common d] verify---> [lower],[cholesky decomposition b to d] verify---> [lower],[symmetric qr eigenvalue helper] verify---> [zero],[] watched---> [double step qr eigenvalue verify zero],[] watched---> [double step qr eigenvalue verify real x],[lu decomposition base d] verify---> [singular],[safe svd] verify---> [compact],[svd implicit qr decompose d] verify---> [compact],[svd implicit qr algorithm] verify---> [off zero],[svd implicit qr algorithm] verify---> [diagonal zero],[generic matrix ops] verify---> [equivalent],[generic matrix ops] verify---> [identity],[generic matrix ops] verify---> [equivalent triangle],[covariance ops] verify---> [valid fast],[matrix features] verify---> [zeros],[matrix features] verify---> [vector],[matrix features] verify---> [positive definite],[matrix features] verify---> [positive semidefinite],[matrix features] verify---> [square],[matrix features] verify---> [symmetric],[matrix features] verify---> [skew symmetric],[matrix features] verify---> [inverse],[matrix features] verify---> [equals],[matrix features] verify---> [equals triangle],[matrix features] verify---> [identical],[matrix features] verify---> [orthogonal],[matrix features] verify---> [rows linear independent],[matrix features] verify---> [identity],[matrix features] verify---> [constant value],[matrix features] verify---> [diagonal positive],[matrix features] verify---> [full rank],[matrix features] verify---> [negative],[matrix features] verify---> [upper triangle],[matrix features] verify---> [lower triangle],[dummy] verify---> [compact],[] compare---> [fixed to common ops verify valid],[] compare---> [fixed to common ops verify match],[cholesky decomposition common cd] verify---> [lower],[lu decomposition base cd] verify---> [singular],[manager functions] verify---> [function name],[variable matrix] verify---> [temp],[equation] verify---> [variable integer],[equation] verify---> [target op],[equation] verify---> [symbol],[equation] verify---> [operator lr],[equation] verify---> [letter],[equation] verify---> [reserved],[svd implicit qr decompose ultimate] verify---> [compact],[svd implicit qr decompose ultimate s] verify---> [compact]