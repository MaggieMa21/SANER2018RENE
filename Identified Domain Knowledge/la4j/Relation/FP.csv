[] compressed---> [vector align object],[] compressed---> [vector compressed vector],[] compressed---> [vector copy of length],[] compressed---> [vector get blank of length],[] compressed---> [vector get or else],[] compressed---> [vector get search for index],[] compressed---> [vector get zero],[] compressed---> [vector grow up],[] compressed---> [vector insert object],[] compressed---> [vector remove object],[] compressed---> [vector set all],[] compressed---> [vector set object],[] compressed---> [vector swap elements],[] compressed---> [vector test compressed vector test],[] compressed---> [vector update at],[] join---> [function apply object],[abstract decompositor test] IsA--> [test],[abstract decompositor test] perform---> [test],[abstract decompositor] fail---> [object],[abstract decompositor] HasProperty---> [self],[abstract inverter test test inverse] IsA--> [inverse],[abstract inverter test] HasProperty---> [inverter factory],[abstract inverter test] IsA--> [test],[abstract inverter test] perform---> [test],[abstract solver test] HasProperty---> [solver factory],[abstract solver test] perform---> [test],[abstract solver] ensure---> [rhs is correct],[abstract solver] fail---> [object],[abstract solver] HasProperty---> [equations],[abstract solver] HasProperty---> [self],[abstract solver] HasProperty---> [unknowns],[abstracting inverter test] IsA--> [test],[accumulator procedure] IsA--> [procedure],[and also] divide---> [],[and also] multiply---> [],[basic double matrix block] IsA--> [block],[basic double matrix set] IsA--> [set],[basic double matrix test] HasProperty---> [basic double matrix test],[basic double matrix test] IsA--> [test],[basic double matrix] HasProperty---> [all],[basic double matrix] HasProperty---> [basic double matrix],[basic double matrix] HasProperty---> [blank of shape],[basic double matrix] HasProperty---> [constant],[basic double matrix] HasProperty---> [diagonal],[basic double matrix] HasProperty---> [identity],[basic double matrix] HasProperty---> [object],[basic double matrix] HasProperty---> [row],[basic double matrix] HasProperty---> [unit],[basic double matrix] HasProperty---> [zero],[basic vector copy] IsA--> [copy],[basic vector set] IsA--> [set],[basic vector test] HasProperty---> [basic vector test],[basic vector test] IsA--> [test],[basic vector] HasProperty---> [basic vector],[basic vector] HasProperty---> [blank of length],[basic vector] HasProperty---> [constant],[basic vector] HasProperty---> [object],[basic vector] HasProperty---> [unit],[basic vector] HasProperty---> [zero],[block object] IsA--> [object],[ccs matrix block object] IsA--> [object],[ccs matrix insert object] IsA--> [object],[ccs matrix test] HasProperty---> [ccs matrix test],[ccs matrix] grow---> [up],[ccs matrix] HasProperty---> [all],[ccs matrix] HasProperty---> [blank of shape],[ccs matrix] HasProperty---> [ccs matrix],[ccs matrix] HasProperty---> [column major iterator],[ccs matrix] HasProperty---> [object],[ccs matrix] HasProperty---> [or else],[ccs matrix] HasProperty---> [search for row index],[ccs matrix] remove---> [object],[ccs matrix] update---> [at],[cholesky decompositor test test] decompose---> [x],[cholesky decompositor test] IsA--> [test],[cholesky decompositor] decompose---> [object],[cholesky decompositor] IsA--> [decompositor],[collection byte] IsA--> [byte],[collection npe] IsA--> [npe],[column major matrix iterator set object] IsA--> [object],[column major matrix iterator] HasProperty---> [column major matrix iterator],[column major matrix iterator] HasProperty---> [cursor],[column major matrix iterator] HasProperty---> [or else add],[column major matrix iterator] HasProperty---> [or else subtract],[column major matrix iterator] IsA--> [iterator],[column major sparse matrix block object] IsA--> [object],[column major sparse matrix transpose object] IsA--> [object],[column major sparse matrix] apply---> [object],[column major sparse matrix] HasProperty---> [column major sparse matrix],[column major sparse matrix] rotate---> [object],[column x exception] IsA--> [exception],[column x] IsA--> [x],[common matrix matrix operation r] apply---> [common],[common matrix matrix operation r] apply---> [object],[common matrix matrix operation r] IsA--> [r],[common matrix matrix operation] IsA--> [operation],[common matrix operation r] apply---> [common],[common matrix operation r] apply---> [object],[common matrix operation r] IsA--> [r],[common vector operation r] apply---> [common],[common vector operation r] apply---> [object],[common vector operation r] IsA--> [r],[common vector vector operation r] apply---> [common],[common vector vector operation r] apply---> [object],[common vector vector operation r] IsA--> [r],[common vector vector operation] IsA--> [operation],[compressed vector insert] IsA--> [insert],[compressed vector set] IsA--> [set],[compressed vector test] IsA--> [test],[compresseding vector test] IsA--> [test],[crs matrix block object] IsA--> [object],[crs matrix insert object] IsA--> [object],[crs matrix test] HasProperty---> [crs matrix test],[crs matrix] grow---> [up],[crs matrix] HasProperty---> [all],[crs matrix] HasProperty---> [blank of shape],[crs matrix] HasProperty---> [crs matrix],[crs matrix] HasProperty---> [object],[crs matrix] HasProperty---> [or else],[crs matrix] HasProperty---> [row major iterator],[crs matrix] HasProperty---> [search for column index],[crs matrix] remove---> [object],[crs matrix] update---> [at],[cursor iterator] do---> [next],[cursor iterator] has---> [next],[cursor iterator] HasProperty---> [cursor],[cursor iterator] HasProperty---> [object],[cursor iterator] HasProperty---> [or else],[cursor iterator] IsA--> [iterator],[cursor iterator] remove---> [object],[cursor to column major matrix iterator] has---> [next],[cursor to column major matrix iterator] HasProperty---> [column index],[cursor to column major matrix iterator] HasProperty---> [cursor to column major matrix iterator],[cursor to column major matrix iterator] HasProperty---> [object],[cursor to column major matrix iterator] HasProperty---> [row index],[cursor to column major matrix iterator] IsA--> [iterator],[cursor to row major matrix iterator] IsA--> [iterator],[cursor to vector iterator] has---> [next],[cursor to vector iterator] HasProperty---> [cursor to vector iterator],[cursor to vector iterator] HasProperty---> [index],[cursor to vector iterator] HasProperty---> [object],[cursor to vector iterator] IsA--> [iterator],[cursor to] row---> [major matrix iterator get column index],[cursor to] row---> [major matrix iterator get cursor to row major matrix iterator],[cursor to] row---> [major matrix iterator get object],[cursor to] row---> [major matrix iterator get row index],[cursor to] row---> [major matrix iterator has next],[cursor to] row---> [major matrix iterator set object],[decompositor factory] IsA--> [factory],[decompositor test] IsA--> [test],[default columns delimiter] IsA--> [delimiter],[default delimiter] IsA--> [delimiter],[default formatter] IsA--> [formatter],[default rows delimiter] IsA--> [delimiter],[dense matrix block] IsA--> [block],[dense matrix test test] extends---> [dense matrix test to array],[dense matrix test test] extends---> [dense matrix],[dense matrix test test] IsA--> [test],[dense matrix test] IsA--> [test],[dense matrix] apply---> [object],[dense matrix] HasProperty---> [unit],[dense vector test test] extends---> [dense vector test to array],[dense vector test test] extends---> [dense vector],[dense vector test test] IsA--> [test],[dense vector test] IsA--> [test],[dense vector] apply---> [object],[dense vector] HasProperty---> [unit],[diagonally dominant predicate test] IsA--> [test],[dot object] IsA--> [object],[eigen decompositor test test] decompose---> [x non symmetric],[eigen decompositor test test] decompose---> [x symmetric],[eigen decompositor test test] IsA--> [test],[eigen decompositor test] IsA--> [test],[eigen decompositor] decompose---> [object],[eigen decompositor] generate---> [r],[eigen decompositor] generate---> [ri],[eigen decompositor] HasProperty---> [eigen decompositor],[eigen decompositor] IsA--> [decompositor],[eigen decompositor] regenerate---> [u],[else index check column] IsA--> [column],[else index check row] IsA--> [row],[euclidean norm accumulator] IsA--> [accumulator],[forward back substitution] solver---> [get forward back substitution solver],[forward back substitution] solver---> [solve object],[forward back substitution] solver---> [test get solver factory],[forward back substitution] solver---> [test test solve x],[gauss jordan inverter test] HasProperty---> [inverter factory],[gauss jordan inverter test] IsA--> [test],[gauss jordan inverter] HasProperty---> [gauss jordan inverter],[gauss jordan inverter] HasProperty---> [self],[gauss jordan inverter] IsA--> [inverter],[gauss jordan] IsA--> [jordan],[gaussian solver test test] IsA--> [test],[gaussian solver test test] solve---> [x],[gaussian solver test] HasProperty---> [solver factory],[gaussian solver] solve---> [object],[in place copy matrix to matrix] apply---> [object],[in place copy matrix to matrix] apply---> [simple],[index check column] IsA--> [column],[index check row] IsA--> [row],[index check] IsA--> [check],[infinity norm accumulator] IsA--> [accumulator],[insert column] IsA--> [column],[insert row] IsA--> [row],[inverter factory] IsA--> [factory],[its transpose multiplication] IsA--> [multiplication],[its transpose x] IsA--> [x],[jacobi solver test test] IsA--> [test],[jacobi solver] HasProperty---> [jacobi solver],[jacobi solver] IsA--> [solver],[jacobi solver] solve---> [object],[jacobi] solver---> [test get solver factory],[jacobi] solver---> [test test solve x],[jordan inverter] IsA--> [inverter],[least norm solver] HasProperty---> [least norm solver],[least norm solver] IsA--> [solver],[least norm solver] solve---> [object],[least squares] solver---> [get least squares solver],[least squares] solver---> [solve object],[least squares] solver---> [test get solver factory],[least squares] solver---> [test test solve x],[linear algebra] create---> [object],[lu decompositor test test] decompose---> [x],[lu decompositor test] IsA--> [test],[lu decompositor] decompose---> [object],[lu decompositor] HasProperty---> [lu decompositor],[major matrix iterator] IsA--> [iterator],[major sparse matrix block object] IsA--> [object],[major sparse matrix transpose object] IsA--> [object],[manhattan norm accumulator] IsA--> [accumulator],[map npe] IsA--> [npe],[matrices] HasProperty---> [as accumulator procedure],[matrices] HasProperty---> [as const function],[matrices] HasProperty---> [as div function],[matrices] HasProperty---> [as minus function],[matrices] HasProperty---> [as mod function],[matrices] HasProperty---> [as multiply function],[matrices] HasProperty---> [as plus function],[matrices] HasProperty---> [as product accumulator],[matrices] HasProperty---> [as product function accumulator],[matrices] HasProperty---> [as sum accumulator],[matrices] HasProperty---> [as sum function accumulator],[matrices] HasProperty---> [matrices],[matrix block] IsA--> [block],[matrix copy] IsA--> [copy],[matrix factory test] extends---> [matrix apply object],[matrix factory test] IsA--> [test],[matrix iterator] HasProperty---> [column index],[matrix iterator] HasProperty---> [matrix iterator],[matrix iterator] HasProperty---> [or else add],[matrix iterator] HasProperty---> [or else subtract],[matrix iterator] HasProperty---> [row index],[matrix iterator] IsA--> [iterator],[matrix market] IsA--> [market],[matrix matrix operation r] apply---> [object],[matrix matrix operation r] ensure---> [applicable to],[matrix matrix operation r] IsA--> [r],[matrix operation r] apply---> [object],[matrix operation r] ensure---> [applicable to],[matrix operation r] IsA--> [r],[matrix set] IsA--> [set],[matrix shuffle] IsA--> [shuffle],[matrix tag] IsA--> [tag],[matrix test access x] IsA--> [x],[matrix test access] IsA--> [access],[matrix test column access x] IsA--> [x],[matrix test copy x] IsA--> [x],[matrix test copy] IsA--> [copy],[matrix test determinant x] IsA--> [x],[matrix test diagonal matrix predicate] IsA--> [predicate],[matrix test diagonal product x] IsA--> [x],[matrix test divide x] IsA--> [x],[matrix test identity matrix predicate] IsA--> [predicate],[matrix test insert column x] IsA--> [x],[matrix test insert row x] IsA--> [x],[matrix test insert] IsA--> [insert],[matrix test max] IsA--> [max],[matrix test min] IsA--> [min],[matrix test power x] IsA--> [x],[matrix test power] IsA--> [power],[matrix test product x] IsA--> [x],[matrix test product] IsA--> [product],[matrix test rank x] IsA--> [x],[matrix test row access x] IsA--> [x],[matrix test shuffle x] IsA--> [x],[matrix test slice] IsA--> [slice],[matrix test sum x] IsA--> [x],[matrix test sum] IsA--> [sum],[matrix test swap x] IsA--> [x],[matrix test swap] IsA--> [swap],[matrix test test] extends---> [matrix get matrix a],[matrix test test] extends---> [matrix get matrix test],[matrix test test] extends---> [matrix get matrix],[matrix test test] extends---> [matrix test access x],[matrix test test] extends---> [matrix test add x],[matrix test test] extends---> [matrix test blank x],[matrix test test] extends---> [matrix test column access x],[matrix test test] extends---> [matrix test copy x],[matrix test test] extends---> [matrix test determinant x],[matrix test test] extends---> [matrix test diagonal matrix predicate],[matrix test test] extends---> [matrix test diagonal product x],[matrix test test] extends---> [matrix test divide x],[matrix test test] extends---> [matrix test equals with precision],[matrix test test] extends---> [matrix test equals],[matrix test test] extends---> [matrix test fold sum],[matrix test test] extends---> [matrix test from matrix market],[matrix test test] extends---> [matrix test get column x],[matrix test test] extends---> [matrix test get index check column negative],[matrix test test] extends---> [matrix test get index check column too large],[matrix test test] extends---> [matrix test get index check row negative],[matrix test test] extends---> [matrix test get index check row too large],[matrix test test] extends---> [matrix test get index check valid],[matrix test test] extends---> [matrix test get row x],[matrix test test] extends---> [matrix test hadamard product x],[matrix test test] extends---> [matrix test identity matrix predicate],[matrix test test] extends---> [matrix test insert column x],[matrix test test] extends---> [matrix test insert row x],[matrix test test] extends---> [matrix test insert x into x offset],[matrix test test] extends---> [matrix test insert x into x partial],[matrix test test] extends---> [matrix test insert x into x],[matrix test test] extends---> [matrix test insert x slice into x offset],[matrix test test] extends---> [matrix test kronecker x x],[matrix test test] extends---> [matrix test max compressed],[matrix test test] extends---> [matrix test max in column],[matrix test test] extends---> [matrix test max in row],[matrix test test] extends---> [matrix test max],[matrix test test] extends---> [matrix test min compressed],[matrix test test] extends---> [matrix test min in column],[matrix test test] extends---> [matrix test min in row],[matrix test test] extends---> [matrix test min],[matrix test test] extends---> [matrix test multiply by its transpose x],[matrix test test] extends---> [matrix test multiply x x],[matrix test test] extends---> [matrix test multiply x],[matrix test test] extends---> [matrix test normalize euclidean norm accumulator],[matrix test test] extends---> [matrix test normalize infinity norm accumulator],[matrix test test] extends---> [matrix test normalize manhattan norm accumulator],[matrix test test] extends---> [matrix test power x],[matrix test test] extends---> [matrix test product x],[matrix test test] extends---> [matrix test rank x empty],[matrix test test] extends---> [matrix test rank x],[matrix test test] extends---> [matrix test remove column x exception],[matrix test test] extends---> [matrix test remove column x],[matrix test test] extends---> [matrix test remove row empty],[matrix test test] extends---> [matrix test remove row x exception],[matrix test test] extends---> [matrix test remove row x],[matrix test test] extends---> [matrix test resize x to x to x],[matrix test test] extends---> [matrix test rotate x],[matrix test test] extends---> [matrix test row access x],[matrix test test] extends---> [matrix test select],[matrix test test] extends---> [matrix test set index check column negative],[matrix test test] extends---> [matrix test set index check column too large],[matrix test test] extends---> [matrix test set index check row negative],[matrix test test] extends---> [matrix test set index check row too large],[matrix test test] extends---> [matrix test set index check valid],[matrix test test] extends---> [matrix test shuffle x],[matrix test test] extends---> [matrix test slice x to x],[matrix test test] extends---> [matrix test subtract x],[matrix test test] extends---> [matrix test sum x],[matrix test test] extends---> [matrix test swap x],[matrix test test] extends---> [matrix test symmetric matrix predicate],[matrix test test] extends---> [matrix test test whether matrices contain same elements],[matrix test test] extends---> [matrix test trace x],[matrix test test] extends---> [matrix test transpose x],[matrix test test] extends---> [matrix test tridiagonal matrix predicate],[matrix test test] extends---> [matrix test whether matrices contain same elements],[matrix test test] extends---> [matrix test zero matrix predicate],[matrix test test] IsA--> [test],[matrix test trace x] IsA--> [x],[matrix test tridiagonal matrix predicate] IsA--> [predicate],[matrix test] IsA--> [test],[matrix trace] IsA--> [trace],[matrix vector operation r] apply---> [object],[matrix vector operation r] ensure---> [applicable to],[matrix vector operation r] IsA--> [r],[matrix] add---> [object],[matrix] apply---> [object],[matrix] ensure---> [dimensions are correct],[matrix] ensure---> [index arguments are in bounds],[matrix] ensure---> [indexes are in bounds],[matrix] equals---> [object],[matrix] fail---> [object],[matrix] HasProperty---> [a],[matrix] HasProperty---> [all],[matrix] HasProperty---> [blank of columns],[matrix] HasProperty---> [blank of rows],[matrix] HasProperty---> [blank of shape],[matrix] HasProperty---> [blank],[matrix] HasProperty---> [column major iterator],[matrix] HasProperty---> [fold column],[matrix] HasProperty---> [fold columns],[matrix] HasProperty---> [fold row],[matrix] HasProperty---> [fold rows],[matrix] HasProperty---> [fold],[matrix] HasProperty---> [hash code],[matrix] HasProperty---> [matrix],[matrix] HasProperty---> [ms],[matrix] HasProperty---> [object],[matrix] HasProperty---> [row major iterator],[matrix] HasProperty---> [slice bottom right],[matrix] HasProperty---> [slice top left],[matrix] HasProperty---> [slice],[matrix] is---> [object],[matrix] multiply---> [object],[matrix] rotate---> [object],[matrix] subtract---> [object],[matrix] transform---> [object],[matrix] update---> [at],[matrix] update---> [object],[max accumulator] IsA--> [accumulator],[min accumulator] IsA--> [accumulator],[mk euclidean norm accumulator] IsA--> [accumulator],[mk manhattan norm accumulator] IsA--> [accumulator],[mk string] IsA--> [string],[no pivot gauss inverter test] HasProperty---> [inverter factory],[no pivot gauss inverter test] IsA--> [test],[no pivot gauss inverter] HasProperty---> [inverse],[no pivot gauss inverter] HasProperty---> [no pivot gauss inverter],[no pivot gauss inverter] HasProperty---> [self],[no pivot gauss inverter] IsA--> [inverter],[normalize euclidean norm accumulator] IsA--> [accumulator],[normalize manhattan norm accumulator] IsA--> [accumulator],[oo place inner product dot object] IsA--> [object],[oo place inner product] apply---> [object],[oo place inner product] apply---> [symmetric],[oo place inner product] ensure---> [applicable to],[oo place kronecker product] apply---> [common],[oo place kronecker product] IsA--> [product],[oo place matrices addition] apply---> [object],[oo place matrices addition] apply---> [symmetric],[oo place matrices addition] ensure---> [applicable to],[oo place matrices addition] IsA--> [addition],[oo place matrices multiplication] apply---> [object],[oo place matrices multiplication] ensure---> [applicable to],[oo place matrices multiplication] IsA--> [multiplication],[oo place matrices subtraction] apply---> [object],[oo place matrices subtraction] apply---> [simple],[oo place matrices subtraction] ensure---> [applicable to],[oo place matrices subtraction] IsA--> [subtraction],[oo place matrix addition] IsA--> [addition],[oo place matrix by its transpose multiplication] apply---> [object],[oo place matrix by its transpose multiplication] IsA--> [multiplication],[oo place matrix by vector multiplication] apply---> [object],[oo place matrix by vector multiplication] ensure---> [applicable to],[oo place matrix by vector multiplication] IsA--> [multiplication],[oo place matrix hadamard product] apply---> [object],[oo place matrix hadamard product] apply---> [symmetric],[oo place matrix hadamard product] ensure---> [applicable to],[oo place matrix] IsA--> [matrix],[oo place outer product] apply---> [object],[oo place vector by matrix multiplication] apply---> [object],[oo place vector by matrix multiplication] ensure---> [applicable to],[oo place vector by matrix multiplication] IsA--> [multiplication],[oo place vector hadamard product] apply---> [object],[oo place vector hadamard product] apply---> [symmetric],[oo place vector hadamard product] ensure---> [applicable to],[oo place vector] IsA--> [vector],[oo place vectors addition] apply---> [object],[oo place vectors addition] apply---> [symmetric],[oo place vectors addition] ensure---> [applicable to],[oo place vectors addition] IsA--> [addition],[oo place vectors subtraction] apply---> [object],[oo place vectors subtraction] ensure---> [applicable to],[oo place vectors subtraction] IsA--> [subtraction],[oo place] IsA--> [place],[operation r] IsA--> [r],[output class] IsA--> [class],[partially] apply---> [],[place copy matrix] IsA--> [matrix],[place matrix by vector multiplication] IsA--> [multiplication],[place matrix] IsA--> [matrix],[place vector by matrix multiplication] IsA--> [multiplication],[place vector] IsA--> [vector],[positive definite matrix predicate test object] IsA--> [object],[predicate test object] IsA--> [object],[product accumulator] IsA--> [accumulator],[product function accumulator] IsA--> [accumulator],[qr decompositor test test] decompose---> [x],[qr decompositor] decompose---> [object],[raw lu decompositor] decompose---> [object],[raw lu decompositor] HasProperty---> [raw lu decompositor],[raw lu decompositor] IsA--> [decompositor],[raw qr decompositor] decompose---> [object],[raw qr decompositor] HasProperty---> [raw qr decompositor],[raw qr decompositor] IsA--> [decompositor],[row major matrix iterator] HasProperty---> [cursor],[row major matrix iterator] HasProperty---> [or else add],[row major matrix iterator] HasProperty---> [or else subtract],[row major matrix iterator] HasProperty---> [row major matrix iterator],[row major sparse matrix] apply---> [object],[row major sparse matrix] HasProperty---> [row major sparse matrix],[row major sparse matrix] rotate---> [object],[row x exception] IsA--> [exception],[row x] IsA--> [x],[search for column index] IsA--> [index],[search for row index] IsA--> [index],[seidel solver test test] IsA--> [test],[seidel solver] HasProperty---> [seidel solver],[seidel solver] IsA--> [solver],[seidel solver] solve---> [object],[seidel] solver---> [test get solver factory],[seidel] solver---> [test test solve x],[serial version uid] IsA--> [uid],[simple matrix matrix operation r] apply---> [object],[simple matrix matrix operation r] apply---> [simple],[simple matrix matrix operation r] IsA--> [r],[simple matrix matrix operation] IsA--> [operation],[singular value decompositor test test] decompose---> [x],[singular value decompositor test] IsA--> [test],[singular value decompositor] decompose---> [object],[singular value decompositor] HasProperty---> [singular value decompositor],[singular value decompositor] IsA--> [decompositor],[slice bottom] IsA--> [bottom],[slice top] IsA--> [top],[solver factory] IsA--> [factory],[sparse matrix test capacity overflow] IsA--> [overflow],[sparse matrix test issue] IsA--> [issue],[sparse matrix test test] extends---> [sparse matrix test capacity overflow],[sparse matrix test test] extends---> [sparse matrix test cardinality],[sparse matrix test test] extends---> [sparse matrix test fold non zero x],[sparse matrix test test] extends---> [sparse matrix test get or else index check column negative],[sparse matrix test test] extends---> [sparse matrix test get or else index check column too large],[sparse matrix test test] extends---> [sparse matrix test get or else index check row negative],[sparse matrix test test] extends---> [sparse matrix test get or else index check row too large],[sparse matrix test test] extends---> [sparse matrix test get or else index check valid],[sparse matrix test test] extends---> [sparse matrix test get or else x],[sparse matrix test test] extends---> [sparse matrix test is zero at x],[sparse matrix test test] extends---> [sparse matrix test issue],[sparse matrix test test] extends---> [sparse matrix test large matrix],[sparse matrix test test] extends---> [sparse matrix test non zero at x],[sparse matrix test test] extends---> [sparse matrix test non zero iterator issue],[sparse matrix test test] extends---> [sparse matrix],[sparse matrix test test] IsA--> [test],[sparse matrix test] IsA--> [test],[sparse matrix] add---> [object],[sparse matrix] HasProperty---> [capacity],[sparse matrix] HasProperty---> [fold non zero in column],[sparse matrix] HasProperty---> [fold non zero in columns],[sparse matrix] HasProperty---> [fold non zero in row],[sparse matrix] HasProperty---> [fold non zero in rows],[sparse matrix] HasProperty---> [fold non zero],[sparse matrix] HasProperty---> [object],[sparse matrix] HasProperty---> [or else],[sparse matrix] is---> [zero at],[sparse matrix] multiply---> [object],[sparse vector test test] extends---> [sparse vector test cardinality],[sparse vector test test] extends---> [sparse vector test fold non zero],[sparse vector test test] extends---> [sparse vector test get index check negative],[sparse vector test test] extends---> [sparse vector test get index check too large],[sparse vector test test] extends---> [sparse vector test get index check valid],[sparse vector test test] extends---> [sparse vector test get or else index check negative],[sparse vector test test] extends---> [sparse vector test get or else index check too large],[sparse vector test test] extends---> [sparse vector test get or else index check valid],[sparse vector test test] extends---> [sparse vector test get or else],[sparse vector test test] extends---> [sparse vector test is zero at],[sparse vector test test] extends---> [sparse vector test non zero at],[sparse vector test test] extends---> [sparse vector test set index check negative],[sparse vector test test] extends---> [sparse vector test set index check too large],[sparse vector test test] extends---> [sparse vector test set index check valid],[sparse vector test test] extends---> [sparse vector],[sparse vector test test] IsA--> [test],[sparse vector test] IsA--> [test],[sparse vector] add---> [object],[sparse vector] apply---> [object],[sparse vector] ensure---> [index is in bounds],[sparse vector] HasProperty---> [fold non zero],[sparse vector] HasProperty---> [hash code],[sparse vector] HasProperty---> [object],[sparse vector] HasProperty---> [or else],[sparse vector] is---> [zero at],[sparse vector] multiply---> [object],[square root solver square root solver] IsA--> [solver],[square root solver] IsA--> [solver],[square root solver] solve---> [object],[square root] solver---> [test get solver factory],[square root] solver---> [test test solve x],[subjects test] IsA--> [test],[subjects] accumulate---> [object],[subjects] apply---> [object],[subjects] decompose---> [object],[subjects] evaluate---> [object],[subjects] HasProperty---> [equations],[subjects] HasProperty---> [inverse],[subjects] HasProperty---> [self],[subjects] HasProperty---> [unknowns],[subjects] solve---> [object],[subjects] update---> [object],[substitution solver] IsA--> [solver],[sum accumulator] IsA--> [accumulator],[sum function accumulator] IsA--> [accumulator],[sweep solver sweep solver] IsA--> [solver],[sweep solver test test] IsA--> [test],[sweep solver] IsA--> [solver],[sweep solver] solve---> [object],[sweep] solver---> [test get solver factory],[sweep] solver---> [test test solve x],[symmetric matrix matrix operation r] apply---> [object],[symmetric matrix matrix operation r] apply---> [symmetric],[symmetric matrix matrix operation r] IsA--> [r],[symmetric matrix predicate test] IsA--> [test],[symmetric vector vector operation r] apply---> [object],[symmetric vector vector operation r] apply---> [symmetric],[symmetric vector vector operation r] IsA--> [r],[test inverse] IsA--> [inverse],[test test] IsA--> [test],[to] csv---> [],[to] row---> [major sparse matrix],[to] row---> [matrix],[to] row---> [vector],[to] string---> [],[triangularize with] pivoting---> [],[vector copy] IsA--> [copy],[vector factory test] extends---> [vector apply object],[vector factory test] IsA--> [test],[vector iterator] HasProperty---> [cursor],[vector iterator] HasProperty---> [index],[vector iterator] HasProperty---> [or else add],[vector iterator] HasProperty---> [or else subtract],[vector iterator] HasProperty---> [vector iterator],[vector iterator] IsA--> [iterator],[vector matrix operation r] apply---> [object],[vector matrix operation r] ensure---> [applicable to],[vector matrix operation r] IsA--> [r],[vector operation r] apply---> [object],[vector operation r] ensure---> [applicable to],[vector operation r] IsA--> [r],[vector set] IsA--> [set],[vector shuffle] IsA--> [shuffle],[vector tag] IsA--> [tag],[vector test access] IsA--> [access],[vector test copy] IsA--> [copy],[vector test cosine similarity] IsA--> [similarity],[vector test infinity norm] IsA--> [norm],[vector test issue] IsA--> [issue],[vector test manhattan norm] IsA--> [norm],[vector test max] IsA--> [max],[vector test min] IsA--> [min],[vector test product] IsA--> [product],[vector test shuffle] IsA--> [shuffle],[vector test sum] IsA--> [sum],[vector test test] extends---> [vector get vector test],[vector test test] extends---> [vector get vector],[vector test test] extends---> [vector test access],[vector test test] extends---> [vector test add],[vector test test] extends---> [vector test blank],[vector test test] extends---> [vector test copy of length to to],[vector test test] extends---> [vector test copy of to to],[vector test test] extends---> [vector test copy],[vector test test] extends---> [vector test cosine similarity],[vector test test] extends---> [vector test divide],[vector test test] extends---> [vector test equals with precision],[vector test test] extends---> [vector test equals],[vector test test] extends---> [vector test euclidean norm],[vector test test] extends---> [vector test fold],[vector test test] extends---> [vector test from collection byte],[vector test test] extends---> [vector test from collection empty],[vector test test] extends---> [vector test from collection normal x],[vector test test] extends---> [vector test from collection npe],[vector test test] extends---> [vector test from map empty map],[vector test test] extends---> [vector test from map empty],[vector test test] extends---> [vector test from map invalid map],[vector test test] extends---> [vector test from map normal],[vector test test] extends---> [vector test from map npe],[vector test test] extends---> [vector test hadamard product],[vector test test] extends---> [vector test infinity norm],[vector test test] extends---> [vector test inner product],[vector test test] extends---> [vector test issue],[vector test test] extends---> [vector test manhattan norm],[vector test test] extends---> [vector test max compressed],[vector test test] extends---> [vector test max],[vector test test] extends---> [vector test min compressed],[vector test test] extends---> [vector test min],[vector test test] extends---> [vector test multiply x],[vector test test] extends---> [vector test multiply],[vector test test] extends---> [vector test normalize default],[vector test test] extends---> [vector test normalize euclidean norm accumulator],[vector test test] extends---> [vector test normalize infinity norm accumulator],[vector test test] extends---> [vector test normalize manhattan norm accumulator],[vector test test] extends---> [vector test outer product],[vector test test] extends---> [vector test product],[vector test test] extends---> [vector test resize to to to],[vector test test] extends---> [vector test select],[vector test test] extends---> [vector test set all],[vector test test] extends---> [vector test shuffle],[vector test test] extends---> [vector test slice left right to and],[vector test test] extends---> [vector test slice to and],[vector test test] extends---> [vector test subtract],[vector test test] extends---> [vector test sum],[vector test test] extends---> [vector test swap elements],[vector test test] extends---> [vector test test whether vectors contain same elements],[vector test test] extends---> [vector test whether vectors contain same elements],[vector test test] IsA--> [test],[vector test] IsA--> [test],[vector vector operation r] apply---> [object],[vector vector operation r] ensure---> [applicable to],[vector vector operation r] IsA--> [r],[vector] add---> [object],[vector] apply---> [object],[vector] ensure---> [length is correct],[vector] equals---> [object],[vector] fail---> [object],[vector] HasProperty---> [all],[vector] HasProperty---> [blank of length],[vector] HasProperty---> [blank],[vector] HasProperty---> [fold],[vector] HasProperty---> [hash code],[vector] HasProperty---> [object],[vector] HasProperty---> [slice left],[vector] HasProperty---> [slice right],[vector] HasProperty---> [slice],[vector] HasProperty---> [vector],[vector] HasProperty---> [vs],[vector] is---> [object],[vector] multiply---> [object],[vector] subtract---> [object],[vector] transform---> [object],[vector] update---> [at],[vector] update---> [object],[vectors] HasProperty---> [as accumulator procedure],[vectors] HasProperty---> [as const function],[vectors] HasProperty---> [as div function],[vectors] HasProperty---> [as minus function],[vectors] HasProperty---> [as mod function],[vectors] HasProperty---> [as multiply function],[vectors] HasProperty---> [as plus function],[vectors] HasProperty---> [as product accumulator],[vectors] HasProperty---> [as product function accumulator],[vectors] HasProperty---> [as sum accumulator],[vectors] HasProperty---> [as sum function accumulator],[vectors] HasProperty---> [vectors],[zero matrix predicate] IsA--> [predicate],[matrix] HasProperty---> [unit],[sparse matrix] verify---> [zero at],[sparse vector] verify---> [zero at]