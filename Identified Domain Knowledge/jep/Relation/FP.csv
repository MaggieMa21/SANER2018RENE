[] add---> [add object],[] add---> [run object],[] assign---> [assign object],[] assign---> [evaluate object],[] associated---> [constant associated constant],[] associated---> [constant get value],[] associated---> [constant set value],[] associated---> [fun node associated fun node],[] associated---> [fun node get name],[] associated---> [fun node get operator],[] associated---> [fun node get pfmc],[] associated---> [fun node is operator],[] associated---> [fun node set function],[] associated---> [fun node set operator],[] associated---> [start associated start],[] associated---> [variable node associated variable node],[] associated---> [variable node get name],[] associated---> [variable node get variable],[] associated---> [variable node set variable],[] collect---> [powers apply object],[] collect---> [powers collect powers],[] collect---> [powers test object],[] define---> [define object],[] define---> [process object],[] differentiate---> [differentiate object],[] differentiate---> [example get main],[] differentiate---> [process object],[] differentiate---> [run object],[] do---> [nothing visitor accept children as array],[] do---> [nothing visitor visit object],[] evaluate---> [evaluate object],[] evaluate---> [process object],[] evaluate---> [run object],[] expand---> [brackets apply object],[] expand---> [brackets expand brackets],[] expand---> [brackets test object],[] expand---> [power apply object],[] expand---> [power expand power],[] expand---> [power test object],[] extended---> [free group extended free group],[] extended---> [free group get pow],[] HasProperty---> [diagonal calculate dim],[] HasProperty---> [diagonal calculate value],[] HasProperty---> [diagonal get diagonal],[] HasProperty---> [diagonal run object],[] jjmatched---> [positive],[] multiply---> [differentiate rule differentiate object],[] multiply---> [differentiate rule get name],[] multiply---> [differentiate rule multiply differentiate rule],[] multiply---> [multiply object],[] multiply---> [run object],[] parse---> [exception get error info],[] parse---> [exception get message],[] rewrite---> [test get main],[] rewrite---> [test get suite],[] rewrite---> [test rewrite test],[] rewrite---> [test test bad],[] rewrite---> [test test memory],[] rewrite---> [test test rewrite],[] rewrite---> [test test taylor],[] rewrite---> [visitor rewrite object],[] rewrite---> [visitor rewrite visitor],[] rewrite---> [visitor visit object],[] solve---> [calculate dim],[] solve---> [calculate value],[] solve---> [run object],[] solve---> [solve object],[] stack---> [jep console get main],[] stack---> [jep console get print intro text],[] stack---> [jep console get prompt],[] stack---> [jep console initialise object],[] stack---> [jep console process equation],[] stack---> [jep test assert polynomial equals],[] stack---> [jep test calculate value],[] stack---> [jep test expand test string],[] stack---> [jep test get complex value test],[] stack---> [jep test get main],[] stack---> [jep test get stack jep test],[] stack---> [jep test get suite],[] stack---> [jep test get value test],[] stack---> [jep test set up],[] stack---> [jep test simplify test string],[] stack---> [jep test simplify test],[] stack---> [jep test test bad],[] stack---> [jep test test format],[] stack---> [jep test test good],[] stack---> [jep test test operators],[] stack---> [jep test test poly simp],[] stack---> [jep test test print],[] stack---> [jep test test simp],[] stack---> [jep test test simple equals],[] stack---> [jep test test simple sum],[] stack---> [jep test test total order],[] subtract---> [differentiate rule differentiate object],[] subtract---> [differentiate rule get name],[] subtract---> [differentiate rule subtract differentiate rule],[] subtract---> [get sub],[] subtract---> [run object],[] subtract---> [subtract object],[] transpose---> [run object],[] transpose---> [transpose object],[absolute] HasProperty---> [absolute],[abstract p node abstract p node] IsA--> [node],[abstract p node invert] IsA--> [invert],[abstract p node] add---> [object],[abstract p node] compare---> [to],[abstract p node] equals---> [object],[abstract p node] HasProperty---> [pow],[abstract p node] HasProperty---> [sub],[abstract p node] is---> [one],[abstract p node] is---> [zero],[abstract p node] IsA--> [node],[abstract p node] multiply---> [object],[abstract p node] negate---> [object],[abstract] rewrite---> [abstract rewrite],[abstracting p node] IsA--> [node],[addition] differentiate---> [rule differentiate object],[addition] differentiate---> [rule get addition differentiate rule],[addition] differentiate---> [rule get name],[algebraic extension element] HasProperty---> [value of],[algebraic extension] HasProperty---> [subs poly],[all tests] HasProperty---> [main],[applet info] IsA--> [info],[applet initialise object] IsA--> [object],[arc cosine heap run] IsA--> [run],[arc cosine heap] HasProperty---> [arc cosine heap],[arc cosine heap] IsA--> [heap],[arc cosine heap] run---> [object],[arc cosine] HasProperty---> [arc cosine],[arc cosine] run---> [object],[arc sine heap run] IsA--> [run],[arc sine heap] HasProperty---> [arc sine heap],[arc sine heap] IsA--> [heap],[arc sine heap] run---> [object],[arc sine] HasProperty---> [arc sine],[arc sine] run---> [object],[arc tan heap run] IsA--> [run],[arc tan heap] HasProperty---> [arc tan heap],[arc tan heap] IsA--> [heap],[arc tan heap] run---> [object],[arc tangent] HasProperty---> [arc tangent],[arc tangent] run---> [object],[argument run] IsA--> [run],[array access] HasProperty---> [array access],[array access] HasProperty---> [object],[array access] IsA--> [access],[array mat] IsA--> [mat],[array vector] IsA--> [vector],[assignment example] HasProperty---> [main],[assignment example] IsA--> [example],[associated fun node] IsA--> [node],[associateding fun node] IsA--> [node],[astm constant] HasProperty---> [dim],[astm constant] HasProperty---> [matrix value],[astm constant] HasProperty---> [value],[astm fun node] HasProperty---> [dim],[astm fun node] HasProperty---> [matrix value],[astm variable node] HasProperty---> [dim],[astm variable node] HasProperty---> [matrix value],[base check number] IsA--> [number],[base format format object] IsA--> [object],[base format] HasProperty---> [base format],[base format] IsA--> [format],[base format] parse---> [object],[base ring] IsA--> [ring],[base run object] IsA--> [object],[big reals] add---> [object],[big reals] compare---> [object],[big reals] equals---> [object],[big reals] HasProperty---> [inverse],[big reals] HasProperty---> [multiply inverse],[big reals] HasProperty---> [one],[big reals] HasProperty---> [sub],[big reals] HasProperty---> [value of],[big reals] HasProperty---> [zero],[big reals] multiply---> [object],[binomial] expand---> [object],[binomial] HasProperty---> [binomial],[brackets test object] IsA--> [object],[buff size] IsA--> [size],[bugs test test bug] IsA--> [bug],[bugs test] HasProperty---> [bugs test],[bugs test] HasProperty---> [up],[bugs test] IsA--> [test],[bugs] test---> [test bug],[bugs] test---> [test has error],[bugs] test---> [test op set bug],[bugs] test---> [test set allow undeclared],[ceil run] IsA--> [run],[chain rule] differentiate---> [rules differentiate object],[chain rule] differentiate---> [rules get chain rule differentiate rules],[chain rule] differentiate---> [rules get name],[chain rule] differentiate---> [rules get number rules],[chain rule] differentiate---> [rules get pfmc],[chain rule] differentiate---> [rules get rule],[check node] IsA--> [node],[clear node scope] IsA--> [scope],[command check number] IsA--> [number],[command element] HasProperty---> [number parameter],[command element] HasProperty---> [pfmc],[command element] HasProperty---> [type],[command element] HasProperty---> [value],[command element] HasProperty---> [variable name],[command element] IsA--> [element],[command evaluator] evaluate---> [object],[command evaluator] HasProperty---> [command evaluator],[command evaluator] IsA--> [evaluator],[command list] IsA--> [list],[command visitor process object] IsA--> [object],[command visitor visit object] IsA--> [object],[command visitor] HasProperty---> [command visitor],[command visitor] IsA--> [visitor],[comparative set tolerance] IsA--> [tolerance],[comparative] HasProperty---> [comparative],[comparative] HasProperty---> [eq],[comparative] HasProperty---> [ge],[comparative] HasProperty---> [le],[comparative] HasProperty---> [ne],[comparative] HasProperty---> [tolerance],[complex float value] IsA--> [value],[complex pfmc run] IsA--> [run],[complex pfmc] HasProperty---> [complex pfmc],[complex set] IsA--> [set],[complex test test power] IsA--> [power],[complex test] HasProperty---> [complex test],[complex value test] IsA--> [test],[complex] add---> [object],[complex] equals---> [object],[complex] HasProperty---> [complex],[complex] HasProperty---> [hash code],[complex] HasProperty---> [im],[complex] HasProperty---> [object],[complex] HasProperty---> [re],[complex] is---> [na node],[complex] multiply---> [object],[condition value] IsA--> [value],[conjugate object] IsA--> [object],[console process equation] IsA--> [equation],[console] handle---> [error],[console] HasProperty---> [applet info],[console] HasProperty---> [command],[console] HasProperty---> [console],[console] HasProperty---> [input loop],[console] HasProperty---> [key pressed],[console] HasProperty---> [key released],[console] HasProperty---> [key typed],[console] HasProperty---> [main],[console] HasProperty---> [print funs],[console] HasProperty---> [print help],[console] HasProperty---> [print intro text],[console] HasProperty---> [print ops],[console] HasProperty---> [print std help],[console] HasProperty---> [print variables],[console] HasProperty---> [print],[console] HasProperty---> [prompt],[console] HasProperty---> [split],[constant invert object] IsA--> [object],[constant negate object] IsA--> [object],[cosine heap cosh] IsA--> [cosh],[cosine heap run] IsA--> [run],[cosine heap] HasProperty---> [cosine heap],[cosine heap] IsA--> [heap],[cosine heap] run---> [object],[cosine run object] IsA--> [object],[cur command list] IsA--> [list],[cur element] IsA--> [element],[cur number] IsA--> [number],[cust function] HasProperty---> [main],[cust function] IsA--> [function],[cust function] run---> [object],[d jep applet] HasProperty---> [action performed],[d jep applet] HasProperty---> [main],[d jep console] HasProperty---> [main],[d jep console] HasProperty---> [print help],[d jep console] HasProperty---> [print intro text],[d jep console] HasProperty---> [prompt],[d jep test test] assign---> [differentiate],[d jep test test] differentiate---> [],[d jep test] HasProperty---> [d jep test],[d jep test] HasProperty---> [main],[d jep test] HasProperty---> [suite],[d jep test] HasProperty---> [up],[d jep test] IsA--> [test],[d jep] add---> [differentiate rule],[d jep] add---> [standard differentiate rules],[d jep] differentiate---> [object],[d jep] HasProperty---> [d jep],[d jep] HasProperty---> [differentation visitor],[d jep] IsA--> [jep],[d print visitor] HasProperty---> [d print visitor],[d symbol table] HasProperty---> [d symbol table],[d symbol table] HasProperty---> [partial derivative],[d symbol table] IsA--> [table],[d variable factory] create---> [derivative],[d variable factory] create---> [variable],[d variable set derivative] IsA--> [derivative],[d variable set derivative] sorted---> [],[d variable] create---> [derivative],[d variable] find---> [derivative sorted],[d variable] find---> [derivative],[d variable] HasProperty---> [d variable],[d variable] HasProperty---> [derivative sorted],[d variable] HasProperty---> [derivative],[d variable] IsA--> [variable],[d variable] make---> [derivative string],[d variable] sorted---> [names],[deep copy visitor visit] IsA--> [visit],[deep copy visitor] HasProperty---> [deep copy],[deep copy visitor] IsA--> [visitor],[determinant drop row col] IsA--> [col],[determinant] calculate---> [dim],[determinant] HasProperty---> [determinant],[diagonal run object] IsA--> [object],[differentation visitor] IsA--> [visitor],[differentiate rule pass] IsA--> [pass],[differentiation visitor visit object] IsA--> [object],[differentiation visitor] add---> [differentiate rule],[differentiation visitor] differentiate---> [object],[differentiation visitor] HasProperty---> [differentiate rule],[differentiation visitor] HasProperty---> [differentiation visitor],[differentiation visitor] HasProperty---> [print differentiate rules],[differentiation visitor] is---> [constant variable],[differentiation visitor] IsA--> [visitor],[dimensions] equals---> [object],[dimensions] HasProperty---> [dimensions],[dimensions] is---> [d],[div] stack---> [],[divide divide] IsA--> [divide],[divide run] IsA--> [run],[divide] differentiate---> [rule differentiate object],[divide] differentiate---> [rule divide differentiate rule],[divide] differentiate---> [rule get name],[dot run] IsA--> [run],[dot vn] IsA--> [vn],[double number factory] create---> [number],[double number factory] HasProperty---> [minus one],[double number factory] HasProperty---> [one],[double number factory] HasProperty---> [two],[double number factory] HasProperty---> [zero],[double number factory] IsA--> [factory],[doubleing number factory] IsA--> [factory],[element comparative] calculate---> [dim],[element comparative] calculate---> [value],[element comparative] HasProperty---> [element comparative],[element divide] calculate---> [dim],[element run] IsA--> [run],[element set] IsA--> [set],[element] calculate---> [dim],[element] HasProperty---> [element],[element] HasProperty---> [object],[element] multiply---> [calculate dim],[element] multiply---> [multiply object],[error info] IsA--> [info],[error list] IsA--> [list],[error text area] IsA--> [area],[error] catching---> [visitor accept catching errors],[error] catching---> [visitor add error],[error] catching---> [visitor clear errors],[error] catching---> [visitor get error],[error] catching---> [visitor get errors message],[error] catching---> [visitor has errors],[errors message] IsA--> [message],[evaluator visitor visit object] IsA--> [object],[evaluator visitor] evaluate---> [object],[evaluator visitor] HasProperty---> [evaluator visitor],[evaluator visitor] HasProperty---> [trap null values],[evaluator visitor] HasProperty---> [value],[evaluator visitor] is---> [trap null values],[evaluator visitor] IsA--> [visitor],[evaluator] add---> [gui components],[evaluator] HasProperty---> [expression field text value changed],[evaluator] HasProperty---> [main],[evaluator] HasProperty---> [options changed],[evaluator] HasProperty---> [x field text value changed],[evaluator] update---> [result],[expression compiler visit object] IsA--> [object],[expression compiler] compile---> [object],[expression compiler] HasProperty---> [expression compiler],[expression compiler] IsA--> [compiler],[expression field text value] IsA--> [value],[expression field] IsA--> [field],[expression run] IsA--> [run],[expression] run---> [object],[exterior product] calculate---> [dim],[exterior product] HasProperty---> [exterior product],[exterior product] run---> [object],[field text value] IsA--> [value],[floor run] IsA--> [run],[floor] HasProperty---> [floor],[fractal canvas paint fractal sans jep] IsA--> [jep],[fractal canvas paint] IsA--> [paint],[fractal canvas] HasProperty---> [expression string],[fractal canvas] HasProperty---> [fractal canvas],[fractal canvas] HasProperty---> [iterations],[fractal] HasProperty---> [action performed],[fractal] HasProperty---> [expression field text value changed],[fractal] HasProperty---> [it field text value changed],[free group element free group element] IsA--> [element],[free group element] HasProperty---> [complex value],[free group element] HasProperty---> [value of],[free group element] IsA--> [element],[free group] add---> [object],[free group] add---> [standard constants],[free group] equals---> [object],[free group] HasProperty---> [base ring],[free group] HasProperty---> [inverse],[free group] HasProperty---> [one],[free group] HasProperty---> [root value],[free group] HasProperty---> [sub],[free group] HasProperty---> [symbol],[free group] HasProperty---> [t poly],[free group] HasProperty---> [value of],[free group] HasProperty---> [zero],[free group] is---> [constant poly],[free group] multiply---> [object],[from base] run---> [object],[fun node associated fun node] IsA--> [node],[fun tab] IsA--> [tab],[function plotter] HasProperty---> [expression field text value changed],[function plotter] IsA--> [plotter],[function table] HasProperty---> [function table],[function table] HasProperty---> [object],[function table] IsA--> [table],[function table] put---> [object],[gen mat] evaluate---> [object],[gen mat] HasProperty---> [gen mat],[gen mat] IsA--> [mat],[gen range] IsA--> [range],[global d jep] IsA--> [jep],[graph canvas graph canvas] IsA--> [canvas],[graph canvas paint curve] IsA--> [curve],[graph canvas paint object] IsA--> [object],[graph canvas] HasProperty---> [expression string],[graph canvas] HasProperty---> [y value],[graph canvas] IsA--> [canvas],[group comparative] HasProperty---> [group comparative],[group console] HasProperty---> [main],[group console] HasProperty---> [print group],[group console] HasProperty---> [print help],[group console] HasProperty---> [print intro text],[group console] HasProperty---> [prompt],[group console] IsA--> [console],[group divide] HasProperty---> [group divide],[group divide] IsA--> [divide],[group divide] run---> [object],[group element] IsA--> [element],[group jep test test] IsA--> [test],[group jep test] HasProperty---> [group jep test],[group jep test] HasProperty---> [main],[group jep test] HasProperty---> [suite],[group jep test] HasProperty---> [up],[group jep test] HasProperty---> [value to string test],[group jep test] IsA--> [test],[group jep] add---> [standard constants],[group jep] add---> [standard functions],[group jep] HasProperty---> [complex value of],[group jep] HasProperty---> [complex value],[group jep] HasProperty---> [group jep],[group jep] HasProperty---> [group],[group jep] IsA--> [jep],[group list] HasProperty---> [group list],[group list] IsA--> [list],[group list] run---> [object],[group logical] HasProperty---> [group logical],[group mod] HasProperty---> [group mod],[group mod] HasProperty---> [mod],[group mod] IsA--> [mod],[group mod] run---> [object],[group not] HasProperty---> [group not],[group not] run---> [object],[group operator set] IsA--> [set],[group operator] HasProperty---> [get group operator set],[group operator] IsA--> [operator],[group power] HasProperty---> [group power],[group power] HasProperty---> [pow],[group power] IsA--> [power],[group power] run---> [object],[group] add---> [add object],[group] add---> [get group add],[group] add---> [run object],[group] add---> [standard constants],[group] add---> [standard functions],[group] HasProperty---> [number factory],[group] is---> [constant poly],[group] multiply---> [get group multiply],[group] multiply---> [multiply object],[group] multiply---> [run object],[group] subtract---> [get group subtract],[group] subtract---> [get sub],[group] subtract---> [run object],[gu minus] HasProperty---> [gu minus],[half] HasProperty---> [half],[id run] IsA--> [run],[id] HasProperty---> [id],[if] evaluate---> [object],[imaginary] HasProperty---> [imaginary],[implicit] multiply---> [],[increment heap] IsA--> [heap],[initial fun tab] IsA--> [tab],[initial sym tab] IsA--> [tab],[initial token manager state] IsA--> [state],[initialise object] IsA--> [object],[input loop] IsA--> [loop],[input tf] IsA--> [tf],[integers] add---> [object],[integers] compare---> [object],[integers] equals---> [object],[integers] HasProperty---> [integers],[integers] multiply---> [object],[inverse] calculate---> [dim],[inverse] HasProperty---> [inverse],[invert object] IsA--> [object],[jama col] IsA--> [col],[jama console] HasProperty---> [main],[jama console] HasProperty---> [print help],[jama console] HasProperty---> [print intro text],[jama console] IsA--> [console],[jama row] IsA--> [row],[jama util] add---> [standard functions],[jama util] IsA--> [util],[java char stream] adjust---> [begin line column],[java char stream] adjust---> [buff size],[java char stream] begin---> [token],[java char stream] done---> [object],[java char stream] expand---> [buff],[java char stream] HasProperty---> [backup],[java char stream] HasProperty---> [begin column],[java char stream] HasProperty---> [begin line],[java char stream] HasProperty---> [column],[java char stream] HasProperty---> [end column],[java char stream] HasProperty---> [end line],[java char stream] HasProperty---> [image],[java char stream] HasProperty---> [java char stream],[java char stream] HasProperty---> [line],[java char stream] HasProperty---> [re initial],[java char stream] HasProperty---> [suffix],[java char stream] IsA--> [stream],[java char stream] read---> [byte],[java char stream] read---> [char],[java char stream] update---> [line column],[jep applet] IsA--> [applet],[jep console test] IsA--> [test],[jep console] IsA--> [console],[jep set] allow---> [assignment],[jep set] allow---> [undeclared],[jep set] IsA--> [set],[jep test test complex] IsA--> [complex],[jep test test format] IsA--> [format],[jep test test function] IsA--> [function],[jep test test length] IsA--> [length],[jep test test matrix] IsA--> [matrix],[jep test test poly simp] IsA--> [simp],[jep test test print] IsA--> [print],[jep test test quaternion] IsA--> [quaternion],[jep test test simp] IsA--> [simp],[jep test test variable] IsA--> [variable],[jep test test zn] IsA--> [zn],[jep test test zroot] IsA--> [zroot],[jep test test ztau] IsA--> [ztau],[jep test test] assign---> [],[jep test test] HasProperty---> [complex value],[jep test test] HasProperty---> [value],[jep test test] IsA--> [test],[jep test] calculate---> [value],[jep test] HasProperty---> [complex value test],[jep test] HasProperty---> [main],[jep test] HasProperty---> [print],[jep test] HasProperty---> [suite],[jep test] HasProperty---> [up],[jep test] HasProperty---> [value test integer],[jep test] HasProperty---> [value test na node],[jep test] HasProperty---> [value test],[jep test] is---> [expression valid],[jep test] IsA--> [test],[jep test] parse---> [next line],[jep test] run---> [test],[jep] add---> [complex],[jep] add---> [constant],[jep] add---> [function],[jep] add---> [standard constants],[jep] add---> [standard functions],[jep] add---> [variable],[jep] evaluate---> [object],[jep] has---> [error],[jep] HasProperty---> [allow assignment],[jep] HasProperty---> [allow undeclared],[jep] HasProperty---> [complex value],[jep] HasProperty---> [error info],[jep] HasProperty---> [evaluator visitor],[jep] HasProperty---> [function table],[jep] HasProperty---> [implicit multiply],[jep] HasProperty---> [number factory],[jep] HasProperty---> [operator set],[jep] HasProperty---> [parser],[jep] HasProperty---> [symbol table],[jep] HasProperty---> [top node],[jep] HasProperty---> [traverse],[jep] HasProperty---> [value as object],[jep] HasProperty---> [value],[jep] HasProperty---> [variable value],[jep] HasProperty---> [variable],[jep] remove---> [function],[jep] remove---> [variable],[jj can] move---> [],[jj check node] add---> [],[jj check node] add---> [states],[jj check node] add---> [two states],[jj check node] IsA--> [node],[jj gc] IsA--> [gc],[jj re] IsA--> [re],[jj rescan] IsA--> [rescan],[jj] add---> [error token],[jj] save---> [],[jj] scan---> [token],[jjbit vector] IsA--> [vector],[jjt close] IsA--> [close],[jjt parser state clear node scope] IsA--> [scope],[jjt parser state close] IsA--> [close],[jjt parser state open node scope] IsA--> [scope],[jjt parser state reset] IsA--> [reset],[jjt parser state] HasProperty---> [node arity],[jjt parser state] HasProperty---> [node created],[jjt parser state] HasProperty---> [root node],[jjt parser state] IsA--> [state],[jjt parser state] reset---> [object],[jjt] accept---> [],[jjt] add---> [child],[jjt] HasProperty---> [child],[jjt] HasProperty---> [number children],[jjt] HasProperty---> [parent],[l value] IsA--> [value],[large expression test] HasProperty---> [main],[large expression test] IsA--> [test],[length run] IsA--> [run],[length] calculate---> [dim],[length] HasProperty---> [length],[line count] IsA--> [count],[list list] IsA--> [list],[list run] IsA--> [run],[local d jep] IsA--> [jep],[logarithm run] IsA--> [run],[logarithm test test logarithm] IsA--> [logarithm],[logarithm test] HasProperty---> [logarithm test],[logarithm test] IsA--> [test],[logarithm] HasProperty---> [logarithm],[long pair] equals---> [object],[long pair] HasProperty---> [hash code],[long pair] HasProperty---> [x],[long pair] HasProperty---> [y],[longing pair] IsA--> [pair],[lookahead success] IsA--> [success],[macro function] differentiate---> [rules get macro function differentiate rules],[macro function] HasProperty---> [macro function],[macro function] HasProperty---> [name],[macro function] HasProperty---> [top node],[macro function] IsA--> [function],[macro function] run---> [object],[macro] differentiate---> [rules get macro differentiate rules],[map check number] IsA--> [number],[mat check number] IsA--> [number],[mat element] IsA--> [element],[mat object] IsA--> [object],[mat store copy variable] IsA--> [variable],[mat store] HasProperty---> [variable value],[mat store] IsA--> [store],[math command] IsA--> [command],[matrix array access] append---> [object],[matrix array access] HasProperty---> [matrix array access],[matrix array access] IsA--> [access],[matrix console] HasProperty---> [main],[matrix console] HasProperty---> [print help],[matrix console] HasProperty---> [print intro text],[matrix console] HasProperty---> [prompt],[matrix console] IsA--> [console],[matrix divide] HasProperty---> [matrix divide],[matrix divide] run---> [object],[matrix dot] HasProperty---> [matrix dot],[matrix dot] run---> [object],[matrix evaluator visit object] IsA--> [object],[matrix evaluator] evaluate---> [object],[matrix evaluator] IsA--> [evaluator],[matrix example] do---> [stuff],[matrix example] HasProperty---> [main],[matrix example] IsA--> [example],[matrix if] calculate---> [dim],[matrix if] calculate---> [value],[matrix if] evaluate---> [object],[matrix if] HasProperty---> [matrix if],[matrix jep test test] IsA--> [test],[matrix jep test] calculate---> [value],[matrix jep test] HasProperty---> [main],[matrix jep test] HasProperty---> [matrix jep test],[matrix jep test] HasProperty---> [suite],[matrix jep test] HasProperty---> [up],[matrix jep test] HasProperty---> [value test],[matrix jep test] IsA--> [test],[matrix jep] add---> [standard functions],[matrix jep] evaluate---> [object],[matrix jep] evaluate---> [raw],[matrix jep] HasProperty---> [matrix jep],[matrix jep] HasProperty---> [value as object],[matrix jep] IsA--> [jep],[matrix list append] IsA--> [append],[matrix list] calculate---> [value],[matrix list] HasProperty---> [buffer append],[matrix list] HasProperty---> [matrix list],[matrix list] IsA--> [list],[matrix map] evaluate---> [object],[matrix map] IsA--> [map],[matrix node factory] build---> [constant node],[matrix node factory] build---> [function node],[matrix node factory] build---> [operator node],[matrix node factory] build---> [unfinished operator node],[matrix node factory] build---> [variable node],[matrix node factory] calculate---> [dim],[matrix node factory] HasProperty---> [matrix node factory],[matrix node factory] IsA--> [factory],[matrix object] HasProperty---> [dims],[matrix object] IsA--> [object],[matrix operator set] IsA--> [set],[matrix operator] HasProperty---> [get matrix list],[matrix operator] HasProperty---> [get matrix operator set],[matrix operator] HasProperty---> [get operators],[matrix partial derivative] HasProperty---> [matrix partial derivative],[matrix preprocessor visit object] IsA--> [object],[matrix preprocessor visit op] IsA--> [op],[matrix preprocessor] HasProperty---> [matrix preprocessor],[matrix preprocessor] IsA--> [preprocessor],[matrix rp command list] add---> [command],[matrix rp command list] HasProperty---> [final type],[matrix rp command list] HasProperty---> [matrix rp command list],[matrix rp command list] HasProperty---> [number commands],[matrix rp command list] IsA--> [list],[matrix rp command] HasProperty---> [matrix rp command],[matrix rp command] IsA--> [command],[matrix rp example] do---> [stuff],[matrix rp example] HasProperty---> [main],[matrix rp example] IsA--> [example],[matrix rp res] HasProperty---> [dims],[matrix rp speed] do---> [all],[matrix rp speed] do---> [mat],[matrix rp speed] do---> [object add],[matrix rp speed] do---> [object multiply],[matrix rp speed] do---> [raw add],[matrix rp speed] do---> [raw multiply],[matrix rp speed] do---> [rpe],[matrix rp speed] do---> [vector],[matrix rp speed] HasProperty---> [main],[matrix rp speed] IsA--> [speed],[matrix rp surf example] calculate---> [mj],[matrix rp surf example] calculate---> [mrpe],[matrix rp surf example] calculate---> [vj],[matrix rp surf example] HasProperty---> [equation changed],[matrix rp surf example] HasProperty---> [main],[matrix rp surf example] HasProperty---> [matrix rp surf example],[matrix rp surf example] HasProperty---> [time print],[matrix rp surf example] HasProperty---> [vector equation changed],[matrix rp surf example] IsA--> [example],[matrix rp test test rp all] dim---> [],[matrix rp test test] assign---> [],[matrix rp test test] assign---> [differentiate],[matrix rp test test] IsA--> [test],[matrix rp test test] multiply---> [],[matrix rp test] calculate---> [value],[matrix rp test] HasProperty---> [complex value test],[matrix rp test] HasProperty---> [main],[matrix rp test] HasProperty---> [matrix rp test],[matrix rp test] HasProperty---> [suite],[matrix rp test] HasProperty---> [up],[matrix rp test] HasProperty---> [value test],[matrix rp test] IsA--> [test],[matrix rp test] simplify---> [test string],[matrix rp test] simplify---> [test],[matrix rp] differentiate---> [example calculate mrpe],[matrix rp] differentiate---> [example compile object],[matrix rp] differentiate---> [example get main],[matrix rp] differentiate---> [example get matrix rp differentiate example],[matrix rp] differentiate---> [example get time print],[matrix rp] evaluate---> [add constant],[matrix rp] evaluate---> [clean up],[matrix rp] evaluate---> [compile object],[matrix rp] evaluate---> [cross v],[matrix rp] evaluate---> [dim type to dimension],[matrix rp] evaluate---> [dot v],[matrix rp] evaluate---> [dot vn],[matrix rp] evaluate---> [evaluate object],[matrix rp] evaluate---> [get dec by dim],[matrix rp] evaluate---> [get dim type],[matrix rp] evaluate---> [get increment by dim],[matrix rp] evaluate---> [get matrix rp evaluate],[matrix rp] evaluate---> [get store by dim],[matrix rp] evaluate---> [get variable ref],[matrix rp] evaluate---> [multiply matrix matrix],[matrix rp] evaluate---> [multiply matrix v],[matrix rp] evaluate---> [multiply mnn mnn],[matrix rp] evaluate---> [multiply mnn vn],[matrix rp] evaluate---> [multiply v matrix],[matrix rp] evaluate---> [multiply vn mnn],[matrix rp] evaluate---> [push mat],[matrix rp] evaluate---> [push vector],[matrix rp] evaluate---> [set variable value],[matrix rp] evaluate---> [visit object],[matrix rp] IsA--> [rp],[matrix rp] res---> [copy to vector mat],[matrix speed] do---> [both],[matrix speed] do---> [mat],[matrix speed] do---> [vector],[matrix speed] HasProperty---> [main],[matrix speed] IsA--> [speed],[matrix store copy variable] IsA--> [variable],[matrix store] add---> [object],[matrix store] allocates---> [object],[matrix store] assign---> [object],[matrix store] expand---> [variable array],[matrix store] HasProperty---> [eq],[matrix store] HasProperty---> [sub],[matrix store] IsA--> [store],[matrix store] make---> [list],[matrix store] multiply---> [stack],[matrix sum] HasProperty---> [matrix sum],[matrix variable factory] create---> [derivative],[matrix variable factory] create---> [variable],[matrix variable] create---> [derivative],[matrix variable] HasProperty---> [matrix variable],[matrix variable] HasProperty---> [print],[matrix vector copy object] IsA--> [object],[matrix vector set element] IsA--> [element],[matrix vector] equals---> [object],[matrix vector] HasProperty---> [hash code],[matrix vector] HasProperty---> [instance],[matrix vector] HasProperty---> [matrix vector],[matrix] add---> [add object],[matrix] add---> [calculate dim],[matrix] add---> [calculate value],[matrix] assign---> [evaluate object],[matrix] assign---> [get matrix assign],[matrix] assign---> [run object],[matrix] differentiate---> [get matrix differentiate],[matrix] HasProperty---> [instance],[matrix] multiply---> [calculate dim],[matrix] multiply---> [calculate value],[matrix] multiply---> [get matrix multiply],[matrix] multiply---> [multiply object],[matrix] multiply---> [run object],[matrix] subtract---> [calculate dim],[matrix] subtract---> [calculate value],[matrix] subtract---> [get sub],[max argument] evaluate---> [object],[max argument] HasProperty---> [max argument],[max argument] IsA--> [argument],[max] evaluate---> [object],[max] HasProperty---> [max],[min argument] evaluate---> [object],[min argument] HasProperty---> [min argument],[min argument] IsA--> [argument],[min] evaluate---> [object],[min] HasProperty---> [min],[mnn object] HasProperty---> [dims],[mnn object] IsA--> [object],[mnn store copy variable] IsA--> [variable],[mnn store] add---> [object],[mnn store] allocates---> [object],[mnn store] assign---> [object],[mnn store] expand---> [variable array],[mnn store] HasProperty---> [eq],[mnn store] HasProperty---> [sub],[mnn store] IsA--> [store],[mnn store] make---> [list],[mnn store] multiply---> [stack],[modulus] HasProperty---> [modulus],[monomial] add---> [object],[monomial] compare---> [to],[monomial] equals---> [ignore constant],[monomial] equals---> [object],[monomial] expand---> [object],[monomial] HasProperty---> [print power],[monomial] multiply---> [object],[mu minus] calculate---> [dim],[mu minus] calculate---> [value],[multiply mnn mnn] IsA--> [mnn],[multiply mnn vn] IsA--> [vn],[multiply run object] IsA--> [object],[multiply vn mnn] IsA--> [mnn],[mutiable monomial] multiply---> [object],[mutiable monomial] reduce---> [object],[mutiable polynomial] add---> [object],[mutiable polynomial] expand---> [multiply],[mutiable polynomial] reduce---> [object],[my sym tab] IsA--> [tab],[my] assert---> [equals],[my] assert---> [na node],[nan constant] IsA--> [constant],[natural logarithm run] IsA--> [run],[natural logarithm test] HasProperty---> [natural logarithm test],[natural logarithm test] IsA--> [test],[natural logarithm] HasProperty---> [natural logarithm],[next char buffer] IsA--> [buffer],[node arity] IsA--> [arity],[node factory] build---> [constant node],[node factory] build---> [function node],[node factory] build---> [operator node],[node factory] build---> [unfinished operator node],[node factory] build---> [variable node],[node factory] HasProperty---> [node factory],[node factory] IsA--> [factory],[not] run---> [object],[nothing visitor] IsA--> [visitor],[object copy] IsA--> [copy],[object store] add---> [object],[object store] add---> [variable],[object store] allocates---> [object],[object store] assign---> [object],[object store] expand---> [variable array],[object store] HasProperty---> [dec stack],[object store] HasProperty---> [increment heap],[object store] HasProperty---> [increment stack],[object store] HasProperty---> [sub],[object store] HasProperty---> [variable value],[object store] HasProperty---> [variable],[object store] IsA--> [store],[object store] make---> [list],[object store] multiply---> [stack],[object store] reset---> [object],[object store] update---> [object],[observer console] HasProperty---> [main],[observer console] IsA--> [console],[observer console] update---> [object],[op id] IsA--> [id],[op list] IsA--> [list],[op set] IsA--> [set],[op udivide] IsA--> [udivide],[op uminus] IsA--> [uminus],[op] add---> [],[op] assign---> [],[op] multiply---> [],[op] subtract---> [],[open node scope] IsA--> [scope],[operator set set] IsA--> [set],[operator set] HasProperty---> [cross],[operator set] HasProperty---> [element],[operator set] IsA--> [set],[operator] HasProperty---> [get add],[operator] HasProperty---> [get and],[operator] HasProperty---> [get assign],[operator] HasProperty---> [get divide],[operator] HasProperty---> [get dot],[operator] HasProperty---> [get eq],[operator] HasProperty---> [get ge],[operator] HasProperty---> [get gt],[operator] HasProperty---> [get le],[operator] HasProperty---> [get list],[operator] HasProperty---> [get mod],[operator] HasProperty---> [get multiply],[operator] HasProperty---> [get ne],[operator] HasProperty---> [get not],[operator] HasProperty---> [get operator set],[operator] HasProperty---> [get operators],[operator] HasProperty---> [get or],[operator] HasProperty---> [get power],[operator] HasProperty---> [get print operators],[operator] HasProperty---> [get subtract],[operator] HasProperty---> [get u minus],[operator] HasProperty---> [pfmc],[output tf] IsA--> [tf],[p constant] add---> [object],[p constant] compare---> [to],[p constant] equals---> [object],[p constant] expand---> [object],[p constant] HasProperty---> [integer value],[p constant] HasProperty---> [p constant],[p constant] HasProperty---> [pow],[p constant] HasProperty---> [sub],[p constant] is---> [infinity],[p constant] is---> [integer],[p constant] is---> [minus one],[p constant] is---> [nan],[p constant] is---> [negative],[p constant] is---> [one],[p constant] is---> [positive],[p constant] is---> [zero],[p constant] IsA--> [constant],[p constant] multiply---> [object],[p function] compare---> [to],[p function] equals---> [object],[p function] expand---> [object],[p function] HasProperty---> [p function],[p function] IsA--> [function],[p node] IsA--> [node],[p operator] compare---> [to],[p operator] equals---> [object],[p operator] expand---> [object],[p operator] HasProperty---> [p operator],[p operator] IsA--> [operator],[p variable] compare---> [to],[p variable] equals---> [object],[p variable] expand---> [object],[p variable] HasProperty---> [p variable],[p variable] IsA--> [variable],[parse preproc simp] IsA--> [simp],[parser disable] tracing---> [],[parser dump visitor visit] IsA--> [visit],[parser dump visitor] IsA--> [visitor],[parser start] IsA--> [start],[parser state peek node] IsA--> [node],[parser state pop node] IsA--> [node],[parser state push node] IsA--> [node],[parser state] IsA--> [state],[parser token manager] HasProperty---> [debug stream],[parser token manager] HasProperty---> [next token],[parser token manager] HasProperty---> [parser token manager],[parser token manager] HasProperty---> [re initial rounds],[parser token manager] HasProperty---> [re initial],[parser] add---> [to error list],[parser] assign---> [expression],[parser] continue---> [parse],[parser] enable---> [tracing],[parser] generate---> [parse exception],[parser] HasProperty---> [additive expression],[parser] HasProperty---> [argument list],[parser] HasProperty---> [array access],[parser] HasProperty---> [expression],[parser] HasProperty---> [function],[parser] HasProperty---> [identifier],[parser] HasProperty---> [initial token manager state],[parser] HasProperty---> [l value],[parser] HasProperty---> [next token],[parser] HasProperty---> [or expression],[parser] HasProperty---> [power expression],[parser] HasProperty---> [re initial],[parser] HasProperty---> [real constant],[parser] HasProperty---> [right expression],[parser] HasProperty---> [token],[parser] HasProperty---> [variable],[parser] replace---> [escape],[parser] restart---> [object],[partial derivative set matrix value] IsA--> [value],[partial derivative] HasProperty---> [partial derivative],[partial derivative] HasProperty---> [root],[partial derivative] update---> [object],[pass through] differentiate---> [rule differentiate object],[pass through] differentiate---> [rule get name],[pass through] differentiate---> [rule pass through differentiate rule],[permutation group list object] IsA--> [object],[permutation group] add---> [object],[permutation group] equals---> [object],[permutation group] HasProperty---> [inverse],[permutation group] HasProperty---> [permutation group],[permutation group] HasProperty---> [sub],[permutation group] HasProperty---> [value of],[permutation group] HasProperty---> [zero],[permutation group] IsA--> [group],[permutation] add---> [object],[permutation] equals---> [object],[permutation] HasProperty---> [permutation],[polynomial creator raise] IsA--> [raise],[polynomial creator visit] IsA--> [visit],[polynomial creator] add---> [object],[polynomial creator] compare---> [object],[polynomial creator] create---> [poly],[polynomial creator] equals---> [object],[polynomial creator] expand---> [object],[polynomial creator] HasProperty---> [integer to value],[polynomial creator] HasProperty---> [negative],[polynomial creator] HasProperty---> [polynomial creator],[polynomial creator] HasProperty---> [sub],[polynomial creator] multiply---> [object],[polynomial creator] simplify---> [object],[polynomial visitor visit] IsA--> [visit],[polynomial visitor] calculate---> [polynomial],[polynomial visitor] HasProperty---> [polynomial visitor],[polynomial] add---> [object],[polynomial] compare---> [to],[polynomial] equals---> [object],[polynomial] expand---> [object],[polynomial] HasProperty---> [base ring],[polynomial] HasProperty---> [needs brackets],[polynomial] HasProperty---> [polynomial],[polynomial] multiply---> [object],[postfix math command check] IsA--> [check],[postfix math command check] stack---> [],[postfix math command run] IsA--> [run],[postfix math command] HasProperty---> [cur number of parameters],[postfix math command] HasProperty---> [number of parameters],[postfix math command] HasProperty---> [postfix math command],[postfix math command] IsA--> [command],[postfix math command] run---> [object],[power run] IsA--> [run],[power test object] IsA--> [object],[power] differentiate---> [rule differentiate object],[power] differentiate---> [rule get name],[power] differentiate---> [rule get power differentiate rule],[precedence table] IsA--> [table],[print example] HasProperty---> [main],[print example] IsA--> [example],[print group] IsA--> [group],[print intro text] IsA--> [text],[print power] IsA--> [power],[print std help] IsA--> [help],[print string] IsA--> [string],[print visitor test] left---> [],[print visitor] add---> [special rule],[print visitor] append---> [object],[print visitor] HasProperty---> [max length],[print visitor] HasProperty---> [mode],[print visitor] HasProperty---> [number format],[print visitor] HasProperty---> [print brackets],[print visitor] HasProperty---> [print no brackets],[print visitor] HasProperty---> [print visitor],[print visitor] HasProperty---> [print],[print visitor] IsA--> [visitor],[process command] IsA--> [command],[process equation] IsA--> [equation],[process object] IsA--> [object],[product] evaluate---> [object],[push mat] IsA--> [mat],[push vector] IsA--> [vector],[quaternion] HasProperty---> [integer value],[quaternion] HasProperty---> [quaternion],[quaternions] add---> [object],[quaternions] add---> [standard constants],[quaternions] equals---> [object],[quaternions] HasProperty---> [inverse],[quaternions] HasProperty---> [one],[quaternions] HasProperty---> [sub],[quaternions] HasProperty---> [value of],[quaternions] HasProperty---> [zero],[quaternions] multiply---> [object],[range run] IsA--> [run],[range] HasProperty---> [gen range],[range] HasProperty---> [range],[rank] HasProperty---> [rank],[rational] add---> [object],[rational] compare---> [to],[rational] HasProperty---> [rational],[rational] multiply---> [object],[rationals] add---> [object],[rationals] compare---> [object],[rationals] equals---> [object],[rationals] HasProperty---> [one],[rationals] HasProperty---> [rationals],[rationals] multiply---> [object],[real] HasProperty---> [re],[real] HasProperty---> [real],[reals] add---> [object],[reals] compare---> [object],[reals] equals---> [object],[reals] HasProperty---> [one],[reals] HasProperty---> [reals],[reals] multiply---> [object],[recursive] HasProperty---> [variables in equation],[result label] IsA--> [label],[root root] IsA--> [root],[round] HasProperty---> [round],[rp command list] add---> [command],[rp command list] HasProperty---> [command],[rp command list] HasProperty---> [number commands],[rp command] HasProperty---> [constant value],[rp command] HasProperty---> [function],[rp command] HasProperty---> [ref],[rp command] HasProperty---> [type],[rp command] HasProperty---> [variable],[rp command] IsA--> [command],[rp example] do---> [all],[rp example] do---> [stuff],[rp example] extended---> [print],[rp example] HasProperty---> [main],[rp example] IsA--> [example],[rp speed] do---> [all],[rp speed] do---> [jep],[rp speed] do---> [rpe],[rp speed] HasProperty---> [main],[rp speed] IsA--> [speed],[rp test test fun] IsA--> [fun],[rp test test rp] IsA--> [rp],[rp test test vn] IsA--> [vn],[rp test test] assign---> [],[rp test test] IsA--> [test],[rp test] calculate---> [value],[rp test] HasProperty---> [complex value test],[rp test] HasProperty---> [main],[rp test] HasProperty---> [suite],[rp test] HasProperty---> [up],[rp test] HasProperty---> [value test],[rp test] IsA--> [test],[rp] evaluate---> [],[rp] evaluate---> [clean up],[rp] evaluate---> [compile object],[rp] evaluate---> [evaluate object],[rp] evaluate---> [get function],[rp] evaluate---> [get variable],[rp] evaluate---> [visit object],[rule divide] IsA--> [divide],[scaler copy] IsA--> [copy],[scaler object] HasProperty---> [dims],[scaler object] HasProperty---> [scaler object],[scaler object] IsA--> [object],[scaler store list object] IsA--> [object],[scaler store] add---> [object],[scaler store] allocates---> [object],[scaler store] assign---> [object],[scaler store] expand---> [variable array],[scaler store] HasProperty---> [eq],[scaler store] HasProperty---> [ge],[scaler store] HasProperty---> [le],[scaler store] HasProperty---> [mod],[scaler store] HasProperty---> [or],[scaler store] HasProperty---> [pow node],[scaler store] HasProperty---> [pow],[scaler store] HasProperty---> [sub],[scaler store] HasProperty---> [variable value],[scaler store] IsA--> [store],[scaler store] make---> [list],[scaler store] multiply---> [stack],[scaler] equals---> [object],[scaler] HasProperty---> [dim],[scaler] HasProperty---> [element],[scaler] HasProperty---> [hash code],[scaler] HasProperty---> [instance],[scaler] HasProperty---> [integer value],[scaler] HasProperty---> [number elements],[scaler] HasProperty---> [scaler],[self inverse] IsA--> [inverse],[simple node dump] IsA--> [dump],[simple node] HasProperty---> [children accept],[simple node] HasProperty---> [id],[simple node] HasProperty---> [simple node],[simplification visitor visit object] IsA--> [object],[simplification visitor] HasProperty---> [simplification visitor],[simplification visitor] IsA--> [visitor],[simplification visitor] simplify---> [add],[simplification visitor] simplify---> [built operator node],[simplification visitor] simplify---> [divide],[simplification visitor] simplify---> [multiply],[simplification visitor] simplify---> [object],[simplification visitor] simplify---> [op],[simplification visitor] simplify---> [power],[simplification visitor] simplify---> [subtract],[simplification visitor] simplify---> [tripple],[simpson] evaluate---> [object],[simpson] HasProperty---> [simpson],[sine heap run] IsA--> [run],[sine heap] HasProperty---> [sine heap],[sine heap] IsA--> [heap],[sine heap] run---> [object],[sine run object] IsA--> [object],[size run] IsA--> [run],[size] HasProperty---> [size],[square root run] IsA--> [run],[square root square root] IsA--> [root],[st observable] HasProperty---> [symbol table],[st set] IsA--> [set],[st] HasProperty---> [changed],[stack jep test] IsA--> [test],[statments process equation] IsA--> [equation],[store copy] IsA--> [copy],[string run] IsA--> [run],[string test] IsA--> [test],[string] HasProperty---> [string],[subjects list] IsA--> [list],[subjects process] IsA--> [process],[subjects] add---> [object],[subjects] add---> [standard constants],[subjects] add---> [standard functions],[subjects] calculate---> [dim],[subjects] calculate---> [value],[subjects] check---> [number of parameters],[subjects] compare---> [object],[subjects] compare---> [to],[subjects] copy---> [object],[subjects] create---> [number],[subjects] differentiate---> [object],[subjects] equals---> [object],[subjects] expand---> [object],[subjects] has---> [equation],[subjects] has---> [valid value],[subjects] HasProperty---> [cur number of parameters],[subjects] HasProperty---> [dim],[subjects] HasProperty---> [dimensions],[subjects] HasProperty---> [element],[subjects] HasProperty---> [elements],[subjects] HasProperty---> [equation],[subjects] HasProperty---> [matrix value],[subjects] HasProperty---> [minus one],[subjects] HasProperty---> [mod],[subjects] HasProperty---> [multiply inverse],[subjects] HasProperty---> [number elements],[subjects] HasProperty---> [number factory],[subjects] HasProperty---> [number of parameters],[subjects] HasProperty---> [object],[subjects] HasProperty---> [one],[subjects] HasProperty---> [pow],[subjects] HasProperty---> [sub],[subjects] HasProperty---> [two],[subjects] HasProperty---> [valid value],[subjects] HasProperty---> [value of],[subjects] HasProperty---> [zero],[subjects] is---> [constant poly],[subjects] is---> [constant],[subjects] is---> [one],[subjects] is---> [zero],[subjects] list---> [object],[subjects] multiply---> [object],[subjects] negate---> [object],[subjects] run---> [object],[subjects] visit---> [object],[substitution visitor substitute object] IsA--> [object],[substitution visitor visit object] IsA--> [object],[substitution visitor] HasProperty---> [substitution visitor],[substitution visitor] IsA--> [visitor],[sum type] evaluate---> [object],[sum type] HasProperty---> [sum type],[sum type] run---> [object],[sum] evaluate---> [object],[sym tab] IsA--> [tab],[symbol table] add---> [constant],[symbol table] add---> [observer to existing variables],[symbol table] add---> [observer],[symbol table] add---> [variable],[symbol table] create---> [variable],[symbol table] delete---> [observer],[symbol table] delete---> [observers],[symbol table] has---> [changed],[symbol table] HasProperty---> [object],[symbol table] HasProperty---> [symbol table],[symbol table] HasProperty---> [value],[symbol table] HasProperty---> [variable factory],[symbol table] HasProperty---> [variable value],[symbol table] HasProperty---> [variable],[symbol table] IsA--> [table],[symbol table] make---> [variable if needed],[symbol table] put---> [object],[t poly] IsA--> [poly],[tan heap] HasProperty---> [tan heap],[tan heap] IsA--> [heap],[tan heap] run---> [object],[tensor copy] IsA--> [copy],[tensor] equals---> [object],[tensor] HasProperty---> [buffer append],[tensor] HasProperty---> [hash code],[tensor] HasProperty---> [instance],[tensor] HasProperty---> [tensor],[test format] IsA--> [format],[test hex] IsA--> [hex],[test macro fun] IsA--> [fun],[test print] IsA--> [print],[test reentrant] IsA--> [reentrant],[test set] IsA--> [set],[test simp] IsA--> [simp],[test string] IsA--> [string],[test sum] IsA--> [sum],[test test array access] IsA--> [access],[test test memory] IsA--> [memory],[test test number parameter] IsA--> [parameter],[test test sum vector] IsA--> [vector],[test test taylor] IsA--> [taylor],[test test tgt dev] IsA--> [dev],[test test vector cmp] IsA--> [cmp],[test test vector sum] IsA--> [sum],[thread test thread run] IsA--> [run],[thread test thread test] IsA--> [test],[thread test thread thread] IsA--> [thread],[thread test thread] run---> [object],[thread test] evaluate---> [object],[thread test] HasProperty---> [main],[thread test] IsA--> [test],[threading test thread] IsA--> [thread],[time print] IsA--> [print],[trace object] IsA--> [object],[trapezium] evaluate---> [object],[trapezium] HasProperty---> [trapezium],[tree utils] copy---> [children if needed],[tree utils] HasProperty---> [children as array],[tree utils] HasProperty---> [ci],[tree utils] HasProperty---> [cminusi],[tree utils] HasProperty---> [cminusone],[tree utils] HasProperty---> [complex value],[tree utils] HasProperty---> [cone],[tree utils] HasProperty---> [czero],[tree utils] HasProperty---> [integer value],[tree utils] HasProperty---> [minusone],[tree utils] HasProperty---> [name],[tree utils] HasProperty---> [nan],[tree utils] HasProperty---> [negative infinity],[tree utils] HasProperty---> [number],[tree utils] HasProperty---> [one],[tree utils] HasProperty---> [operator],[tree utils] HasProperty---> [positive infinity],[tree utils] HasProperty---> [value],[tree utils] HasProperty---> [zero],[tree utils] is---> [binary operator],[tree utils] is---> [complex],[tree utils] is---> [constant],[tree utils] is---> [function],[tree utils] is---> [infinity],[tree utils] is---> [integer],[tree utils] is---> [minus one],[tree utils] is---> [na node],[tree utils] is---> [negative],[tree utils] is---> [one],[tree utils] is---> [operator],[tree utils] is---> [positive],[tree utils] is---> [real],[tree utils] is---> [unary operator],[tree utils] is---> [variable],[tree utils] is---> [zero],[type check number] IsA--> [number],[u minus] HasProperty---> [u minus],[unfinished operator node] IsA--> [node],[unit poly] IsA--> [poly],[use binding] IsA--> [binding],[v element run object] IsA--> [object],[v element] calculate---> [dim],[v element] calculate---> [value],[v element] HasProperty---> [v element],[v list run object] IsA--> [object],[v list] calculate---> [dim],[v list] calculate---> [value],[v list] HasProperty---> [v list],[v map] calculate---> [dim],[v map] calculate---> [value],[v map] evaluate---> [object],[v map] HasProperty---> [v map],[v map] HasProperty---> [variables],[v object] HasProperty---> [dims],[v operator set set element] multiply---> [],[v operator set] HasProperty---> [v operator set],[v operator set] IsA--> [set],[v power run object] IsA--> [object],[v power] calculate---> [dim],[v power] calculate---> [value],[v power] HasProperty---> [v power],[v range] calculate---> [dim],[v range] calculate---> [value],[v range] HasProperty---> [gen range],[v range] HasProperty---> [v range],[v store copy variable] IsA--> [variable],[v store] add---> [object],[v store] allocates---> [object],[v store] assign---> [object],[v store] expand---> [variable array],[v store] HasProperty---> [eq],[v store] HasProperty---> [sub],[v store] make---> [list],[v store] multiply---> [stack],[v store] multiply---> [v],[v sum run object] IsA--> [object],[v sum] calculate---> [dim],[v sum] calculate---> [value],[v sum] HasProperty---> [v sum],[value test integer] IsA--> [integer],[value test] IsA--> [test],[variable factory] create---> [variable],[variable set derivative] IsA--> [derivative],[variable set] is---> [constant],[variable] HasProperty---> [value raw],[variable] HasProperty---> [variable],[vector console] HasProperty---> [main],[vector console] HasProperty---> [print help],[vector console] HasProperty---> [print intro text],[vector console] HasProperty---> [prompt],[vector console] IsA--> [console],[vector evaluator visit object] IsA--> [object],[vector evaluator] IsA--> [evaluator],[vector example] do---> [stuff],[vector example] HasProperty---> [main],[vector example] IsA--> [example],[vector jep set element] IsA--> [element],[vector jep set element] multiply---> [],[vector jep test test] IsA--> [test],[vector jep test] HasProperty---> [main],[vector jep test] HasProperty---> [suite],[vector jep test] HasProperty---> [up],[vector jep test] HasProperty---> [vector jep test],[vector jep test] IsA--> [test],[vector jep] add---> [standard functions],[vector jep] evaluate---> [object],[vector jep] evaluate---> [raw],[vector jep] HasProperty---> [vector jep],[vector jep] IsA--> [jep],[vector mat] IsA--> [mat],[vector object] IsA--> [object],[vector print] do---> [stuff],[vector print] HasProperty---> [main],[vector print] IsA--> [print],[vector store copy variable] IsA--> [variable],[vector store] HasProperty---> [variable value],[vector store] IsA--> [store],[visit object] IsA--> [object],[visitor format value] IsA--> [value],[visitor set max length] IsA--> [length],[visitor set number format] IsA--> [format],[visitor test] IsA--> [test],[visitor visit fun] IsA--> [fun],[visitor visit object] IsA--> [object],[visitor visit] IsA--> [visit],[vn object] HasProperty---> [dims],[vn object] IsA--> [object],[vn store copy variable] IsA--> [variable],[vn store] add---> [object],[vn store] allocates---> [object],[vn store] assign---> [object],[vn store] expand---> [variable array],[vn store] HasProperty---> [eq],[vn store] HasProperty---> [sub],[vn store] IsA--> [store],[vn store] make---> [list],[vn store] multiply---> [stack],[x evaluator visitor visit object] IsA--> [object],[x evaluator visitor] IsA--> [visitor],[x jep console] HasProperty---> [main],[x jep console] HasProperty---> [print help],[x jep console] HasProperty---> [print intro text],[x jep console] HasProperty---> [print ops],[x jep console] HasProperty---> [print variables],[x jep console] HasProperty---> [prompt],[x jep console] reset---> [variables],[x jep example] HasProperty---> [main],[x jep test test format] IsA--> [format],[x jep test test hex] IsA--> [hex],[x jep test test macro fun] IsA--> [fun],[x jep test test print] IsA--> [print],[x jep test test reentrant] IsA--> [reentrant],[x jep test test simp] IsA--> [simp],[x jep test test sum] IsA--> [sum],[x jep test test] define---> [],[x jep test] HasProperty---> [main],[x jep test] HasProperty---> [suite],[x jep test] HasProperty---> [up],[x jep test] HasProperty---> [x jep test],[x jep test] IsA--> [test],[x jep test] parse---> [preproc simp],[x jep test] parse---> [proc simp evaluate],[x jep test] simplify---> [test string],[x jep test] simplify---> [test],[x jep] add---> [complex],[x jep] add---> [standard constants],[x jep] add---> [standard functions],[x jep] calculate---> [variable value],[x jep] continue---> [parsing],[x jep] evaluate---> [object],[x jep] HasProperty---> [deep copy],[x jep] HasProperty---> [node factory],[x jep] HasProperty---> [print visitor],[x jep] HasProperty---> [print],[x jep] HasProperty---> [tree utils],[x jep] HasProperty---> [variables in equation],[x jep] HasProperty---> [x jep],[x jep] restart---> [parser],[x jep] simplify---> [object],[x math] HasProperty---> [binomial],[x operator set root op] IsA--> [op],[x operator set set precedence table] IsA--> [table],[x operator set] HasProperty---> [x operator set],[x operator set] IsA--> [set],[x operator] HasProperty---> [annotate operators],[x operator] HasProperty---> [binary inverse op],[x operator] HasProperty---> [binding],[x operator] HasProperty---> [distributive over],[x operator] HasProperty---> [get print operators],[x operator] HasProperty---> [inverse op],[x operator] HasProperty---> [number arguments],[x operator] HasProperty---> [precedence],[x operator] HasProperty---> [root op],[x operator] HasProperty---> [set precedence table],[x operator] HasProperty---> [use binding for print],[x operator] HasProperty---> [x operator],[x operator] is---> [associative],[x operator] is---> [binary],[x operator] is---> [commutative],[x operator] is---> [composite],[x operator] is---> [distributive over],[x operator] is---> [equivilence],[x operator] is---> [nary],[x operator] is---> [prefix],[x operator] is---> [reflexive],[x operator] is---> [self inverse],[x operator] is---> [sufix],[x operator] is---> [symmetric],[x operator] is---> [transitive],[x operator] is---> [unary],[x symbol table] HasProperty---> [print],[x symbol table] HasProperty---> [x symbol table],[x symbol table] IsA--> [table],[x variable factory] create---> [variable],[x variable] calculate---> [value],[x variable] has---> [equation],[x variable] HasProperty---> [equation],[x variable] HasProperty---> [x variable],[x] assign---> [get x assign],[x] assign---> [process object],[y value] IsA--> [value],[y variable] IsA--> [variable],[zero th root unity] IsA--> [unity],[zn] add---> [object],[zn] compare---> [object],[zn] equals---> [object],[zn] HasProperty---> [inverse],[zn] HasProperty---> [mod],[zn] HasProperty---> [multiply inverse],[zn] HasProperty---> [one],[zn] HasProperty---> [pow],[zn] HasProperty---> [sub],[zn] HasProperty---> [value of],[zn] HasProperty---> [zero],[zn] HasProperty---> [zn],[zn] multiply---> [object],[to] string---> [],[subjects] HasProperty---> [name],[subjects] HasProperty---> [inverse],[number factory] IsA--> [factory],[subjects] HasProperty---> [complex value],[subjects] evaluate---> [object],[subjects test] IsA--> [test],[subjects] apply---> [object],[check number] IsA--> [number],[token mgr error] IsA--> [error],[serial version uid] IsA--> [uid],[prev char] IsA--> [char],[prev char] is---> [cr],[prev char] is---> [lf],[input stream] IsA--> [stream],[next char ind] IsA--> [ind],[begining line] IsA--> [line],[end line] IsA--> [line],[static lexer error] IsA--> [error],[error code] IsA--> [code],[jjto] skip---> [],[jjstate set] IsA--> [set],[cur char] IsA--> [char],[cur lex state] IsA--> [state],[default lex state] IsA--> [state],[state cnt] IsA--> [cnt],[jj ntk] IsA--> [ntk],[jj gen] IsA--> [gen],[jj kind] IsA--> [kind],[matrix] HasProperty---> [matrix],[matrix copy] IsA--> [copy],[matrix] equals---> [object],[matrix] HasProperty---> [hash code],[product] HasProperty---> [product],[sum] HasProperty---> [sum],[print help] IsA--> [help],[all tests] HasProperty---> [suite],[test test] IsA--> [test],[argument] HasProperty---> [argument],[cosine] HasProperty---> [cosine],[dot object] IsA--> [object],[expression] HasProperty---> [expression],[power] HasProperty---> [power],[sine] HasProperty---> [sine],[tangent] HasProperty---> [tangent],[operator] HasProperty---> [operator],[line column] IsA--> [column],[] parse---> [exception parse exception],[] parse---> [exception add escapes],[token mgr error] HasProperty---> [token mgr error],[token mgr error] add---> [escapes],[token mgr error] HasProperty---> [message],[jj stop string] IsA--> [string],[jj move string] IsA--> [string],[jj] add---> [states],[move nfa] IsA--> [nfa],[simple test] HasProperty---> [main],[expression string] IsA--> [string],[parser] HasProperty---> [parser],[list expression] IsA--> [expression],[argument list] IsA--> [list],[jj] consume---> [token],[subjects] verify---> [constant poly],[subjects] verify---> [constant],[subjects] verify---> [zero],[subjects] verify---> [one],[differentiation visitor] verify---> [constant variable],[group] verify---> [constant poly],[free group] verify---> [constant poly],[abstract p node] verify---> [zero],[abstract p node] verify---> [one],[p constant] verify---> [zero],[p constant] verify---> [one],[p constant] verify---> [minus one],[p constant] verify---> [infinity],[p constant] verify---> [nan],[p constant] verify---> [positive],[p constant] verify---> [negative],[p constant] verify---> [integer],[dimensions] verify---> [d],[tree utils] verify---> [constant],[tree utils] verify---> [real],[tree utils] verify---> [integer],[tree utils] verify---> [zero],[tree utils] verify---> [one],[tree utils] verify---> [minus one],[tree utils] verify---> [infinity],[tree utils] verify---> [na node],[tree utils] verify---> [negative],[tree utils] verify---> [positive],[tree utils] verify---> [complex],[tree utils] verify---> [variable],[tree utils] verify---> [operator],[tree utils] verify---> [binary operator],[tree utils] verify---> [unary operator],[tree utils] verify---> [function],[x operator] verify---> [distributive over],[x operator] verify---> [associative],[x operator] verify---> [commutative],[x operator] verify---> [binary],[x operator] verify---> [unary],[x operator] verify---> [nary],[x operator] verify---> [transitive],[x operator] verify---> [symmetric],[x operator] verify---> [reflexive],[x operator] verify---> [equivilence],[x operator] verify---> [prefix],[x operator] verify---> [sufix],[x operator] verify---> [composite],[x operator verify self inverse] IsA--> [inverse],[verify self inverse] IsA--> [inverse],[x operator] verify---> [self inverse],[] associated---> [fun node verify operator],[evaluator visitor] verify---> [trap null values],[variable] verify---> [constant],[complex] verify---> [na node]